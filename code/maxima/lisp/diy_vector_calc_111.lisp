;;; -*- Mode: LISP; package:maxima; syntax:common-lisp; -*- 
(in-package :maxima)
(DSKSETQ $%I1
         '((MQUOTIENT)
           (($MAP) ((MQUOTE) $DIFF)
            ((MLIST) ((%SIN) $X) ((%COS) $X) ((%TAN) $X)))
           ((%DEL) $X))) 
(ADDLABEL '$%I1) 
(DSKSETQ $%O1
         '((MLIST SIMP) ((%COS SIMP) $X)
           ((MTIMES SIMP) -1. ((%SIN SIMP) $X))
           ((MEXPT SIMP) ((%SEC SIMP) $X) 2.))) 
(ADDLABEL '$%O1) 
(DSKSETQ $%I2 '(($TRIGSIMP) ((MPLUS) 1. ((MEXPT) ((%TAN) $X) 2.)))) 
(ADDLABEL '$%I2) 
(DSKSETQ $%O2 '((MEXPT SIMP) ((%COS SIMP) $X) -2.)) 
(ADDLABEL '$%O2) 
(DSKSETQ $%I3
         '((MPROGN)
           (($TRIGSIMP)
            ((MQUOTIENT) ((MTIMES) 2. ((%TAN) ((MQUOTIENT) $X 2.)))
             ((MPLUS) 1. ((MEXPT) ((%TAN) ((MQUOTIENT) $X 2.)) 2.))))
           (($TRIGREDUCE) $%%))) 
(ADDLABEL '$%I3) 
(DSKSETQ $%O3 '((%SIN SIMP) $X)) 
(ADDLABEL '$%O3) 
(DSKSETQ $%I4
         '((MPROGN)
           (($TRIGSIMP)
            ((MQUOTIENT)
             ((MPLUS) 1.
              ((MMINUS) ((MEXPT) ((%TAN) ((MQUOTIENT) $X 2.)) 2.)))
             ((MPLUS) 1. ((MEXPT) ((%TAN) ((MQUOTIENT) $X 2.)) 2.))))
           (($TRIGREDUCE) $%%) (($EXPAND) $%%))) 
(ADDLABEL '$%I4) 
(DSKSETQ $%O4 '((%COS SIMP) $X)) 
(ADDLABEL '$%O4) 
(DSKSETQ $%I5
         '(($GRADEF) ((%TAN) $X) ((MPLUS) 1. ((MEXPT) ((%TAN) $X) 2.)))) 
(ADDLABEL '$%I5) 
(DSKSETQ $%O5 '((%TAN SIMP) $X)) 
(ADDLABEL '$%O5) 
(DSKSETQ $%I6
         '(($GRADEF) ((%SIN) $X)
           ((MQUOTIENT)
            ((MPLUS) 1.
             ((MMINUS) ((MEXPT) ((%TAN) ((MQUOTIENT) $X 2.)) 2.)))
            ((MPLUS) 1. ((MEXPT) ((%TAN) ((MQUOTIENT) $X 2.)) 2.))))) 
(ADDLABEL '$%I6) 
(DSKSETQ $%O6 '((%SIN SIMP) $X)) 
(ADDLABEL '$%O6) 
(DSKSETQ $%I7
         '(($GRADEF) ((%COS) $X)
           ((MQUOTIENT)
            ((MTIMES) ((MMINUS) 2.) ((%TAN) ((MQUOTIENT) $X 2.)))
            ((MPLUS) 1. ((MEXPT) ((%TAN) ((MQUOTIENT) $X 2.)) 2.))))) 
(ADDLABEL '$%I7) 
(DSKSETQ $%O7 '((%COS SIMP) $X)) 
(ADDLABEL '$%O7) 
(DSKSETQ $%I8
         '((MQUOTIENT)
           (($MAP) ((MQUOTE) $DIFF)
            ((MLIST) ((%SIN) $X) ((%COS) $X) ((%TAN) $X)))
           ((%DEL) $X))) 
(ADDLABEL '$%I8) 
(DSKSETQ $%O8
         '((MLIST SIMP)
           ((MTIMES SIMP)
            ((MPLUS SIMP) 1.
             ((MTIMES SIMP) -1.
              ((MEXPT SIMP)
               ((%TAN SIMP) ((MTIMES SIMP) ((RAT SIMP) 1. 2.) $X)) 2.)))
            ((MEXPT SIMP)
             ((MPLUS SIMP) 1.
              ((MEXPT SIMP)
               ((%TAN SIMP) ((MTIMES SIMP) ((RAT SIMP) 1. 2.) $X)) 2.))
             -1.))
           ((MTIMES SIMP) -2.
            ((%TAN SIMP) ((MTIMES SIMP) ((RAT SIMP) 1. 2.) $X))
            ((MEXPT SIMP)
             ((MPLUS SIMP) 1.
              ((MEXPT SIMP)
               ((%TAN SIMP) ((MTIMES SIMP) ((RAT SIMP) 1. 2.) $X)) 2.))
             -1.))
           ((MPLUS SIMP) 1. ((MEXPT SIMP) ((%TAN SIMP) $X) 2.)))) 
(ADDLABEL '$%O8) 
(DSKSETQ $%I9 '(($LOAD) $DRAW)) 
(ADDLABEL '$%I9) 
(DSKSETQ $%O9 '"/usr/share/maxima/5.41.0/share/draw/draw.lisp") 
(ADDLABEL '$%O9) 
(DSKSETQ $%I10
         '(($BATCH) "/home/fraser/projects/Math/maxima/qdraw.mac")) 
(ADDLABEL '$%I10) 
(DSKSETQ $%I11
         '((MDEFINE) (($QDRAW_USAGE))
           (($PRINT)
            "


 -------------QDRAW SYNTAX------------------------------

 All arguments to qdraw are optional and can be entered in any order.
 
 You can have no more than one xr(..) argument.  Likewise,
  no more than one yr(..), one cut(..), one lw(n) (as an arg of
   qdraw), one nticks(n) and one ipgrid(n).
 
 You can have an arbitrary number of the other args in any order.
 
 The complete set of possible arguments (in alphabetic order) with the
    maximum number and type of arguments follow. In general, arguments
    with names lc,lw,lk,fill,pc,ps,pt,pk,pj,ha,hb,hl,and ht are optional.

    qdraw( arrowhead(x,y,theta-degrees,s,lc(c),lw(n) ),
           circle(x,y,radius,lc(c),lw(n),fill(cc) ),
           contour(expr,x,x1,x2,y,y1,y2,crange(n,min,max),options )
              or contour(expr,x,x1,x2,y,y1,y2, cvals(v1,v2,...), options ),
              contour options are lc(c),lw(n), add( add-options );
                 add-options are grid,xaxis,yaxis,and xyaxes,
           cut(cut-options);
              cut-options are key,grid,xaxis,yaxis,xyaxes,edge,all,
           ellipse(xc,yc,xsma,ysma,th0-deg,dth-deg,lw(n),lc(c),fill(cc) ),
           errorbars(ptlist,dylist,lc(c),lw(n) ),
           ex(exprlist,x,x1,x2),
           ex1(expr,x,x1,x2,lc(c),lw(n),lk(string) ),
           imp(eqnlist,x,xx1,xx2,y,yy1,yy2),
           imp1(eqn,x,x1,x2,y,y1,y2,lc(c),lw(n),lk(string) ),
           ipgrid(n),
           key(bottom) or key(top),
           label( [string1,x1,y1],[string2,x2,y2],...),
           label_align(p-options); p-options are l, r, or c,
           line(x1,y1,x2,y2,lc(c),lw(n),lk(string) ),
           log(log-options); log-options are x, y, or xy,
           lw(n),
           more( any legal draw2d arguments),
           nticks(n),
           para( xofu,yofu,u,u1,u2,lc(c),lw(n),lk(string) ),
           polar( roftheta,theta,th1,th2,lc(c),lw(n),lk(string) );
                       theta, th1, and th2 must be in radians,
           poly([ [x1,y1],[x2,y2],.,[xN,yN] ], lc(c),lw(n),fill(cc) ),
           pts( [ [x1,y1],[x2,y2],.,[xN,yN] ],pc(c),ps(s),pt(t),pk(string) ),
           pic( type(t), fname(string), font(string,size)  );
                      font(..) is optional,
           rect( x1,y1,x2,y2, lc(c),lw(n),fill(cc) ),
           vector( [x,y],[dx,dy],lw(n),lc(c),lk(string),
                                   ha(deg),hb(v),hl(v),ht(t) ),
                type vector_use(); to see vector option details,
           xr(xa,xb), 
           yr(ya,yb),            
           );
           
  ...................................................
  QUICK PLOT FEATURES:
               
  For quick plots, use ex(...) and imp(...). These
  two functions ex(...) and imp(...) use default colors, line widths,
  and simple legend key numbers. The function ex(...) can be used either
  with a single expression, as in ex( u^3,u,-2,2), or with a list
  of expressions as in ex([u,u^2,u^3],u,-2,2).
  
  You can use any other letter instead of 'u', such as 'x', etc.
  
  Like wise the function imp(...), used for the implicit plots of equations,
  can be used for one equation, as in imp(v^3=u^2,u,-2,2,v,-2,2) or for a 
  list of equations as in imp([v=u,v^2=u,v^3=u],u,-2,2,v,-2,2).
  
  You can use any other letters instead of 'u' and 'v', such as 'x' and 'y'.
   
  The top level qdraw argument lw(n) overrides the default line_width
   setting used for ex(...) and imp(...).
  
  You can have multiple ex and imp arguments.
  ....................................................
  
  You recover more control, although limited to either one expression
  or one equation, if you use ex1(...), or imp1(...), using the options
  indicated.
 
===========================================================
the functions qdensity(expr,[x,x1,x2,dx],[y,y1,y2,dy], palette(p-options),pic(..) )
          and wxqdensity( same args), in which
       palette(p) and pic(type,filename) are optional;
       palette(blue), palette(gray), palette(color), or palette(n1,n2,n3), 
   can be used to produce a density plot. qdensity or wxqdensity is called by itself and
   is not 'wrapped' by qdraw. 
================================================================

   To see the above again, type qdraw();
     
  "))) 
(ADDLABEL '$%I11) 
(DSKSETQ $%O11
         '((MDEFINE SIMP) (($QDRAW_USAGE))
           (($PRINT)
            "


 -------------QDRAW SYNTAX------------------------------

 All arguments to qdraw are optional and can be entered in any order.
 
 You can have no more than one xr(..) argument.  Likewise,
  no more than one yr(..), one cut(..), one lw(n) (as an arg of
   qdraw), one nticks(n) and one ipgrid(n).
 
 You can have an arbitrary number of the other args in any order.
 
 The complete set of possible arguments (in alphabetic order) with the
    maximum number and type of arguments follow. In general, arguments
    with names lc,lw,lk,fill,pc,ps,pt,pk,pj,ha,hb,hl,and ht are optional.

    qdraw( arrowhead(x,y,theta-degrees,s,lc(c),lw(n) ),
           circle(x,y,radius,lc(c),lw(n),fill(cc) ),
           contour(expr,x,x1,x2,y,y1,y2,crange(n,min,max),options )
              or contour(expr,x,x1,x2,y,y1,y2, cvals(v1,v2,...), options ),
              contour options are lc(c),lw(n), add( add-options );
                 add-options are grid,xaxis,yaxis,and xyaxes,
           cut(cut-options);
              cut-options are key,grid,xaxis,yaxis,xyaxes,edge,all,
           ellipse(xc,yc,xsma,ysma,th0-deg,dth-deg,lw(n),lc(c),fill(cc) ),
           errorbars(ptlist,dylist,lc(c),lw(n) ),
           ex(exprlist,x,x1,x2),
           ex1(expr,x,x1,x2,lc(c),lw(n),lk(string) ),
           imp(eqnlist,x,xx1,xx2,y,yy1,yy2),
           imp1(eqn,x,x1,x2,y,y1,y2,lc(c),lw(n),lk(string) ),
           ipgrid(n),
           key(bottom) or key(top),
           label( [string1,x1,y1],[string2,x2,y2],...),
           label_align(p-options); p-options are l, r, or c,
           line(x1,y1,x2,y2,lc(c),lw(n),lk(string) ),
           log(log-options); log-options are x, y, or xy,
           lw(n),
           more( any legal draw2d arguments),
           nticks(n),
           para( xofu,yofu,u,u1,u2,lc(c),lw(n),lk(string) ),
           polar( roftheta,theta,th1,th2,lc(c),lw(n),lk(string) );
                       theta, th1, and th2 must be in radians,
           poly([ [x1,y1],[x2,y2],.,[xN,yN] ], lc(c),lw(n),fill(cc) ),
           pts( [ [x1,y1],[x2,y2],.,[xN,yN] ],pc(c),ps(s),pt(t),pk(string) ),
           pic( type(t), fname(string), font(string,size)  );
                      font(..) is optional,
           rect( x1,y1,x2,y2, lc(c),lw(n),fill(cc) ),
           vector( [x,y],[dx,dy],lw(n),lc(c),lk(string),
                                   ha(deg),hb(v),hl(v),ht(t) ),
                type vector_use(); to see vector option details,
           xr(xa,xb), 
           yr(ya,yb),            
           );
           
  ...................................................
  QUICK PLOT FEATURES:
               
  For quick plots, use ex(...) and imp(...). These
  two functions ex(...) and imp(...) use default colors, line widths,
  and simple legend key numbers. The function ex(...) can be used either
  with a single expression, as in ex( u^3,u,-2,2), or with a list
  of expressions as in ex([u,u^2,u^3],u,-2,2).
  
  You can use any other letter instead of 'u', such as 'x', etc.
  
  Like wise the function imp(...), used for the implicit plots of equations,
  can be used for one equation, as in imp(v^3=u^2,u,-2,2,v,-2,2) or for a 
  list of equations as in imp([v=u,v^2=u,v^3=u],u,-2,2,v,-2,2).
  
  You can use any other letters instead of 'u' and 'v', such as 'x' and 'y'.
   
  The top level qdraw argument lw(n) overrides the default line_width
   setting used for ex(...) and imp(...).
  
  You can have multiple ex and imp arguments.
  ....................................................
  
  You recover more control, although limited to either one expression
  or one equation, if you use ex1(...), or imp1(...), using the options
  indicated.
 
===========================================================
the functions qdensity(expr,[x,x1,x2,dx],[y,y1,y2,dy], palette(p-options),pic(..) )
          and wxqdensity( same args), in which
       palette(p) and pic(type,filename) are optional;
       palette(blue), palette(gray), palette(color), or palette(n1,n2,n3), 
   can be used to produce a density plot. qdensity or wxqdensity is called by itself and
   is not 'wrapped' by qdraw. 
================================================================

   To see the above again, type qdraw();
     
  "))) 
(ADDLABEL '$%O11) 
(DSKSETQ $%I12
         '((MDEFINE) (($VECTOR_USE))
           (($DISP)
            "vector([x,y],[dx,dy],ha(thdeg),hb(v),hl(v),ht(t),lw(n),lc(c),lk(string) )
 draws a vector with components [dx,dy] starting at [x,y]. The first two
 list arguments are required, all others are optional and can be entered in
 any order after the first two required arguments.
 The default head angle is 30 deg, change to 45 deg using 
               ha(45) for example.
 The default 'head both' value is f for false, use hb(t) to set
      it to true,and hb(f) to return to false.
 The default 'head length' is 0.5, use hl(0.7) to change to 0.7.
 The default 'head type' is 'nofilled'; use ht(e) for 'empty',
       ht(f) for 'filled',and ht(n) to change back to 'nofilled'.           
 The default line width is 3, use lw(5) to change to 5.
 The default line color is black, use lc(brown) to change to brown.
 The default is no key string. use lk(string) for example to create
     a text string for the key."))) 
(ADDLABEL '$%I12) 
(DSKSETQ $%O12
         '((MDEFINE SIMP) (($VECTOR_USE))
           (($DISP)
            "vector([x,y],[dx,dy],ha(thdeg),hb(v),hl(v),ht(t),lw(n),lc(c),lk(string) )
 draws a vector with components [dx,dy] starting at [x,y]. The first two
 list arguments are required, all others are optional and can be entered in
 any order after the first two required arguments.
 The default head angle is 30 deg, change to 45 deg using 
               ha(45) for example.
 The default 'head both' value is f for false, use hb(t) to set
      it to true,and hb(f) to return to false.
 The default 'head length' is 0.5, use hl(0.7) to change to 0.7.
 The default 'head type' is 'nofilled'; use ht(e) for 'empty',
       ht(f) for 'filled',and ht(n) to change back to 'nofilled'.           
 The default line width is 3, use lw(5) to change to 5.
 The default line color is black, use lc(brown) to change to brown.
 The default is no key string. use lk(string) for example to create
     a text string for the key."))) 
(ADDLABEL '$%O12) 
(DSKSETQ $%I13 '(($PRINT) " qdraw.mac: see Maxima by Example, Ch. 13")) 
(ADDLABEL '$%I13) 
(DSKSETQ $%O13 '" qdraw.mac: see Maxima by Example, Ch. 13") 
(ADDLABEL '$%O13) 
(DSKSETQ $%I14
         '(($PRINT)
           " qdraw(...), wxqdraw(...), qdensity(...), wxqdensity(...)")) 
(ADDLABEL '$%I14) 
(DSKSETQ $%O14
         '" qdraw(...), wxqdraw(...), qdensity(...), wxqdensity(...)") 
(ADDLABEL '$%O14) 
(DSKSETQ $%I15 '(($PRINT) " default_colors(nwidth),  point_types()")) 
(ADDLABEL '$%I15) 
(DSKSETQ $%O15 '" default_colors(nwidth),  point_types()") 
(ADDLABEL '$%O15) 
(DSKSETQ $%I16 '(($PRINT) "  for  syntax info,  type:  qdraw(); ")) 
(ADDLABEL '$%I16) 
(DSKSETQ $%O16 '"  for  syntax info,  type:  qdraw(); ") 
(ADDLABEL '$%O16) 
(DSKSETQ $%I17
         '((MDEFINE) (($QDRAW1) ((MLIST) $QDA))
           ((MPROG)
            ((MLIST) $ACOLOR $ANERR $ARG $AX $AY $BX $BY $CC $CDV
             $CLIST $CNUM $COLDEF $CT $CTOP $CTARGS $CVAL $DRLIST $DY
             $DYL $EEX $ELIST $EQE $ERRBLW $FNAMELST $FNAMESTR $FNTSIZE
             $FNTSTR $HLIM $HVLIM $IPGRIDDEF $IQ $JQ $KK $KLIST
             $LABADEF $LAB_ARGS $LE $LENDR $LL $LP $LQDA $LWA $LWDEF
             $LWVAL $MKEDGE $MKGRID $LABELLIST $MKKEY $MKXAXIS
             $MKXYAXIS $MKYAXIS $MORELIST $MSG $NN $NARGS $NDEF $NLABEL
             $NLW $NPIC $NPS $NTICKSDEF $NXR $NYR $PHI $PICLIST
             $PICTYPE $PL $PL1 $PR $PRLIST $PSTR $PTL $PTSDEF $PTTDEF
             $PTSL $PTSLIST $QT $RL $RNGLIST $SA $TARGS $TH $TLIST
             $QTOP $TP $TT $TTARGS $TTOP $TVAL $ULIM $XX $X1RR $X2RR
             $YY $Y1RR $Y2RR)
            (($LOCAL) $GOODARGS $EQNCHECK $DOERR $QVAL $SETNFILL
             $SETNLK $SETNLW $SETNPC $SETOPTIONS $INLISTP)
            ((MSETQ) $STRINGDISP T) ((MSETQ) $RATPRINT NIL)
            ((MSETQ) $LWDEF 3.) ((MSETQ) $LWVAL $LWDEF)
            ((MSETQ) $COLDEF $BLUE) ((MSETQ) $PTSDEF 3.)
            ((MSETQ) $PTTDEF 7.) ((MSETQ) $LABADEF $LEFT)
            ((MSETQ) $NTICKSDEF 100.) ((MSETQ) $IPGRIDDEF 10.)
            ((MSETQ) $NDEF NIL) ((MSETQ) $NPIC NIL)
            ((MSETQ) $NLABEL NIL) ((MSETQ) $MORELIST ((MLIST)))
            ((MSETQ) $PICLIST ((MLIST))) ((MSETQ) $PTSLIST ((MLIST)))
            ((MSETQ) $LABELLIST ((MLIST))) ((MSETQ) $DRLIST ((MLIST)))
            ((MSETQ) $RNGLIST ((MLIST))) ((MSETQ) $NXR 0.)
            ((MSETQ) $NYR 0.) ((MSETQ) $MKKEY T) ((MSETQ) $MKGRID T)
            ((MSETQ) $MKXYAXES T) ((MSETQ) $MKEDGE T)
            ((MSETQ) $MKXAXIS T) ((MSETQ) $MKYAXIS T)
            ((MDEFINE) (($GOODARGS) $ARGLIST $MSG $GOODARGLIST)
             ((MPROG) ((MLIST) $AA $II $JJ $NCHK)
              ((MDO) $II NIL NIL NIL (($LENGTH) $ARGLIST) NIL
               ((MPROGN) ((MSETQ) $AA (($ARGLIST ARRAY) $II))
                ((MCOND) (($ATOM) $AA)
                 ((MPROGN) ((MSETQ) $NCHK NIL)
                  (($PRINT) " arg " $AA " must itself have args ")
                  ((MRETURN) (($DOERR) $MSG)))
                 T $FALSE)
                ((MSETQ) $NCHK NIL)
                ((MDO) $JJ NIL NIL NIL (($LENGTH) $GOODARGLIST) NIL
                 ((MCOND)
                  ((MEQUAL) (($OP) $AA) (($GOODARGLIST ARRAY) $JJ))
                  ((MPROGN) ((MSETQ) $NCHK T) ((MRETURN))) T $FALSE))
                ((MCOND) ((MNOT) $NCHK)
                 ((MPROGN) (($PRINT) " arg " $AA " problem")
                  ((MRETURN) (($DOERR) $MSG)))
                 T $FALSE)))
              ((MRETURN) $NCHK)))
            ((MSETQ) $ANERR NIL)
            ((MSETQ) $CC
             ((MLIST) $BLUE $RED $TURQUOISE $BROWN $MAGENTA $GREEN
              $BLACK))
            ((MDEFINE) (($EQNCHECK) $EQE)
             ((MCOND) (($ATOM) $EQE) NIL T
              ((MCOND) ((MEQUAL) (($OP) $EQE) "=") T T NIL)))
            ((MDEFINE) (($DOERR) $MSG)
             ((MPROGN) ((MSETQ) $ANERR T) (($PRINT) "...syntax error")
              (($PRINT) $MSG) NIL))
            ((MDEFINE) (($QVAL) $NN)
             ((MCOND) ((MEQUAL) (($MOD) $NN 7.) 0.) 7. T
              (($MOD) $NN 7.)))
            ((MDEFINE) (($SETNPC) $LL)
             ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
              ((MPROGN)
               ((MSETQ) $PTSL
                (($CONS) ((MEQUAL) $COLOR (($LL ARRAY) 1.)) $PTSL))
               ((MSETQ) $PTSL
                (($APPEND) $PTSL ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
              T ((MRETURN) (($DOERR) "use lc(red) for example "))))
            ((MDEFINE) (($SETNLW) $LL)
             ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
              ((MPROGN)
               ((MSETQ) $PTSL
                (($CONS) ((MEQUAL) $LINE_WIDTH (($LL ARRAY) 1.)) $PTSL))
               ((MSETQ) $PTSL
                (($APPEND) $PTSL
                 ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)))))
              T ((MRETURN) (($DOERR) "use lw(5) for example "))))
            ((MDEFINE) (($SETNLK) $LL)
             ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
              ((MPROGN)
               ((MSETQ) $PTSL
                (($CONS) ((MEQUAL) $KEY (($LL ARRAY) 1.)) $PTSL))
               ((MSETQ) $PTSL
                (($APPEND) $PTSL ((MLIST) ((MEQUAL) $KEY "")))))
              T
              ((MRETURN) (($DOERR) " use lk(\"case 1\") for example "))))
            ((MDEFINE) (($SETNFILL) $LL)
             ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
              ((MPROGN)
               ((MSETQ) $PTSL
                (($CONS) ((MEQUAL) $FILL_COLOR (($LL ARRAY) 1.)) $PTSL))
               ((MSETQ) $PTSL
                (($CONS) ((MEQUAL) $TRANSPARENT NIL) $PTSL))
               ((MSETQ) $PTSL
                (($APPEND) $PTSL ((MLIST) ((MEQUAL) $TRANSPARENT T)))))
              T ((MRETURN) (($DOERR) "use fill(blue) for example"))))
            ((MDEFINE) (($SETOPTIONS) $PRLIST)
             ((MPROG) ((MLIST) $JJ $TT $TTOP $TTARGS)
              ((MDO) $JJ NIL NIL NIL (($LENGTH) $PRLIST) NIL
               ((MPROGN) ((MSETQ) $TT (($PRLIST ARRAY) $JJ))
                ((MSETQ) $TTOP (($OP) $TT))
                ((MSETQ) $TTARGS (($ARGS) $TT))
                ((MCOND) ((MEQUAL) $TTOP $LC) (($SETNPC) $TTARGS) T
                 $FALSE)
                ((MCOND) ((MEQUAL) $TTOP $LW) (($SETNLW) $TTARGS) T
                 $FALSE)
                ((MCOND) ((MEQUAL) $TTOP $LK) (($SETNLK) $TTARGS) T
                 $FALSE)
                ((MCOND) ((MEQUAL) $TTOP $FILL) (($SETNFILL) $TTARGS) T
                 $FALSE)))))
            ((MDEFINE) (($INLISTP) $AAA $LLL)
             ((MPROG) ((MLIST) $FFF $XXX) ((MSETQ) $FFF NIL)
              ((MDOIN) $XXX $LLL NIL NIL NIL NIL
               ((MCOND) ((MEQUAL) $XXX $AAA) ((MSETQ) $FFF T) T $FALSE))
              $FFF))
            ((MSETQ) $LQDA (($LENGTH) $QDA))
            ((MCOND) ((MEQUAL) $LQDA 0.)
             ((MPROGN) (($QDRAW_USAGE)) ((MRETURN) NIL)) T $FALSE)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $QDA
               "qdraw args:arrowhead(), circle(), contour(), cut(), ellipse(), errorbars(), ex(), ex1(), imp(), imp1(),ipgrid(),key(),label(),label_align(), line(), log(), lw(n), more(),nticks(),para(),pic(),polar(), poly(), pts(), rect(),vector(), xr(), yr() "
               ((MLIST) $ARROWHEAD $CIRCLE $CONTOUR $CUT $ELLIPSE
                $ERRORBARS $PIC $EX $EX1 $IMP $IMP1 $IPGRID $KEY $LABEL
                $LABEL_ALIGN $LINE %LOG $LW $MORE $NTICKS $PARA $PIC
                $POLAR $POLY $PTS $RECT $VECTOR $XR $YR)))
             ((MRETURN) NIL) T $FALSE)
            ((MDO) $IQ NIL NIL NIL $LQDA NIL
             ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
              ((MSETQ) $QT (($QDA ARRAY) $IQ))
              ((MSETQ) $QTOP (($OP) $QT))
              ((MSETQ) $TARGS (($ARGS) $QT))
              ((MCOND) ((MEQUAL) $QTOP $LW)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
                 ((MRETURN)
                  (($DOERR) "lw  must have one and only one argument"))
                 T $FALSE)
                ((MSETQ) $LWA (($TARGS ARRAY) 1.))
                ((MCOND) (($INTEGERP) $LWA) ((MSETQ) $LWVAL $LWA) T
                 ((MRETURN)
                  (($DOERR) "lw arg must be a literal integer like 2"))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP %LOG)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
                 ((MRETURN)
                  (($DOERR) " use log(a) where a is x, y, or xy "))
                 T $FALSE)
                ((MSETQ) $PL (($TARGS ARRAY) 1.))
                ((MCOND) ((MNOT) (($INLISTP) $PL ((MLIST) $X $Y $XY)))
                 ((MRETURN)
                  (($DOERR) " use log(a) where a is x, y, or xy "))
                 T $FALSE)
                ((MCOND) ((MEQUAL) $PL $X)
                 ((MSETQ) $LOGLIST ((MLIST) ((MEQUAL) $LOGX T))) T
                 ((MCOND) ((MEQUAL) $PL $Y)
                  ((MSETQ) $LOGLIST ((MLIST) ((MEQUAL) $LOGY T))) T
                  ((MCOND) ((MEQUAL) $PL $XY)
                   ((MSETQ) $LOGLIST
                    ((MLIST) ((MEQUAL) $LOGX T) ((MEQUAL) $LOGY T)))
                   T
                   ((MRETURN)
                    (($DOERR) " use log(a) where a is x, y, or xy")))))
                ((MSETQ) $DRLIST (($APPEND) $DRLIST $LOGLIST)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $NTICKS)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
                 ((MRETURN) (($DOERR) "nticks ex: nticks(200) ")) T
                 $FALSE)
                ((MSETQ) $NTICKSDEF (($TARGS ARRAY) 1.)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $IPGRID)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
                 ((MRETURN) (($DOERR) "ipgrid ex: ipgrid(15) ")) T
                 $FALSE)
                ((MSETQ) $IPGRIDDEF (($TARGS ARRAY) 1.)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $CUT)
               ((MPROGN) ((MSETQ) $EEX $TARGS)
                ((MSETQ) $LE (($LENGTH) $EEX))
                ((MDO) $JQ NIL NIL NIL $LE NIL
                 ((MPROGN) ((MSETQ) $PL (($EEX ARRAY) $JQ))
                  ((MCOND)
                   ((MNOT)
                    (($INLISTP) $PL
                     ((MLIST) $ALL $EDGE $GRID $KEY $XAXIS $XYAXES
                      $YAXIS)))
                   ((MRETURN)
                    (($DOERR)
                     "cut: valid args: all,key,grid,xyaxes,xaxis,yaxis,edge "))
                   T $FALSE)
                  ((MCOND) ((MEQUAL) $PL $ALL)
                   ((MPROGN) ((MSETQ) $MKKEY NIL) ((MSETQ) $MKGRID NIL)
                    ((MSETQ) $MKXYAXES NIL) ((MSETQ) $MKEDGE NIL))
                   T $FALSE)
                  ((MCOND) ((MEQUAL) $PL $KEY) ((MSETQ) $MKKEY NIL) T
                   $FALSE)
                  ((MCOND) ((MEQUAL) $PL $GRID) ((MSETQ) $MKGRID NIL) T
                   $FALSE)
                  ((MCOND) ((MEQUAL) $PL $XYAXES)
                   ((MSETQ) $MKXYAXES NIL) T $FALSE)
                  ((MCOND) ((MEQUAL) $PL $XAXIS) ((MSETQ) $MKXAXIS NIL)
                   T $FALSE)
                  ((MCOND) ((MEQUAL) $PL $YAXIS) ((MSETQ) $MKYAXIS NIL)
                   T $FALSE)
                  ((MCOND) ((MEQUAL) $PL $EDGE) ((MSETQ) $MKEDGE NIL) T
                   $FALSE))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $XR)
               ((MPROGN) ((MSETQ) $NXR ((MPLUS) $NXR 1.))
                ((MCOND) ((MEQUAL) $NXR 2.)
                 ((MRETURN)
                  (($DOERR) "only one xr(xa,xb) item allowed in qdraw"))
                 T $FALSE)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 2.)
                 ((MRETURN) (($DOERR) "xr must be of form xr(xa, xb)"))
                 T $FALSE)
                ((MSETQ) $X1RR (($FLOAT) (($TARGS ARRAY) 1.)))
                ((MCOND) ((MNOT) (($NUMBERP) $X1RR))
                 ((MRETURN) (($DOERR) "xr(x1,x2): x1 is not a number"))
                 T $FALSE)
                ((MSETQ) $X2RR (($FLOAT) (($TARGS ARRAY) 2.)))
                ((MCOND) ((MNOT) (($NUMBERP) $X2RR))
                 ((MRETURN) (($DOERR) "xr(x1,x2): x2 is not a number"))
                 T $FALSE)
                ((MSETQ) $TVAL
                 ((MEQUAL) $XRANGE ((MLIST) $X1RR $X2RR)))
                ((MSETQ) $RNGLIST (($CONS) $TVAL $RNGLIST)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $YR)
               ((MPROGN) ((MSETQ) $NYR ((MPLUS) $NYR 1.))
                ((MCOND) ((MEQUAL) $NYR 2.)
                 ((MRETURN)
                  (($DOERR) "only one yr(ya,yb) item allowed in qdraw"))
                 T $FALSE)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 2.)
                 ((MRETURN) (($DOERR) "yr must be of form yr(ya, yb)"))
                 T $FALSE)
                ((MSETQ) $Y1RR (($FLOAT) (($TARGS ARRAY) 1.)))
                ((MCOND) ((MNOT) (($NUMBERP) $Y1RR))
                 ((MRETURN) (($DOERR) "yr(y1,y2): y1 is not a number"))
                 T $FALSE)
                ((MSETQ) $Y2RR (($FLOAT) (($TARGS ARRAY) 2.)))
                ((MCOND) ((MNOT) (($NUMBERP) $Y2RR))
                 ((MRETURN) (($DOERR) "yr(y1,y2): y2 is not a number"))
                 T $FALSE)
                ((MSETQ) $TVAL
                 ((MEQUAL) $YRANGE ((MLIST) $Y1RR $Y2RR)))
                ((MSETQ) $RNGLIST (($APPEND) $RNGLIST ((MLIST) $TVAL))))
               T $FALSE)))
            ((MCOND) $ANERR ((MRETURN)) T $FALSE)
            ((MDO) $IQ NIL NIL NIL $LQDA NIL
             ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
              ((MSETQ) $QT (($QDA ARRAY) $IQ))
              ((MSETQ) $QTOP (($OP) $QT))
              ((MSETQ) $TARGS (($ARGS) $QT))
              ((MCOND) ((MEQUAL) $QTOP $EX)
               ((MPROGN) ((MSETQ) $NDEF T)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 4.)
                 ((MRETURN)
                  (($DOERR) "ex() should have exactly four arguments"))
                 T $FALSE)
                ((MSETQ) $EEX (($TARGS ARRAY) 1.))
                ((MCOND) ((MNOT) (($LISTP) $EEX))
                 ((MSETQ) $EEX ((MLIST) $EEX)) T $FALSE)
                ((MSETQ) $HLIM (($FLOAT) (($REST) $TARGS 1.)))
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "ex: hlim=[x,x1,x2]: x is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR) "ex: hlim=[x,x1,x2]: x1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR) "ex: hlim=[x,x1,x2]: x2 is not a number"))
                 T $FALSE)
                ((MSETQ) $LE (($LENGTH) $EEX))
                ((MDO) $JQ NIL NIL NIL $LE NIL
                 ((MPROGN)
                  ((MCOND) (($EQNCHECK) (($EEX ARRAY) $JQ))
                   ((MRETURN)
                    (($DOERR) "you have an equation in ex() "))
                   T $FALSE)
                  ((MSETQ) $TLIST (($CONS) (($EEX ARRAY) $JQ) $HLIM))
                  ((MSETQ) $TVAL
                   (($APPLY) ((MQUOTE) $EXPLICIT) $TLIST))
                  ((MSETQ) $DRLIST (($APPEND) $DRLIST ((MLIST) $TVAL))))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $IMP)
               ((MPROGN) ((MSETQ) $NDEF T)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 7.)
                 ((MRETURN)
                  (($DOERR)
                   "imp() should have exactly seven arguments"))
                 T $FALSE)
                ((MSETQ) $EEX (($TARGS ARRAY) 1.))
                ((MCOND) ((MNOT) (($LISTP) $EEX))
                 ((MSETQ) $EEX ((MLIST) $EEX)) T $FALSE)
                ((MSETQ) $HVLIM (($FLOAT) (($REST) $TARGS 1.)))
                ((MCOND) (($NUMBERP) (($HVLIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: x is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: x1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: x2 is not a number"))
                 T $FALSE)
                ((MCOND) (($NUMBERP) (($HVLIM ARRAY) 4.))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: y is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 5.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: y1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 6.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: y2 is not a number"))
                 T $FALSE)
                ((MSETQ) $LE (($LENGTH) $EEX))
                ((MDO) $JQ NIL NIL NIL $LE NIL
                 ((MPROGN)
                  ((MCOND) ((MNOT) (($EQNCHECK) (($EEX ARRAY) $JQ)))
                   ((MRETURN)
                    (($DOERR) "one imp() arg is not an equation "))
                   T $FALSE)
                  ((MSETQ) $TLIST (($CONS) (($EEX ARRAY) $JQ) $HVLIM))
                  ((MSETQ) $TVAL
                   (($APPLY) ((MQUOTE) $IMPLICIT) $TLIST))
                  ((MSETQ) $DRLIST (($APPEND) $DRLIST ((MLIST) $TVAL))))))
               T $FALSE)))
            ((MCOND) $ANERR ((MRETURN)) T $FALSE)
            ((MCOND) $NDEF
             ((MPROGN) ((MSETQ) $LENDR (($LENGTH) $DRLIST))
              ((MSETQ) $CLIST
               (($MAKELIST)
                ((MEQUAL) $COLOR (($CC ARRAY) (($QVAL) $KK))) $KK 1.
                $LENDR))
              ((MCOND) $MKKEY
               ((MPROGN)
                ((MSETQ) $KLIST
                 (($MAKELIST) ((MEQUAL) $KEY (($STRING) $KK)) $KK 1.
                  $LENDR))
                ((MSETQ) $DRLIST
                 (($FLATTEN)
                  (($MAKELIST)
                   ((MLIST) (($CLIST ARRAY) $KK) (($KLIST ARRAY) $KK)
                    (($DRLIST ARRAY) $KK))
                   $KK 1. $LENDR))))
               T ((MSETQ) $DRLIST (($JOIN) $CLIST $DRLIST)))
              ((MSETQ) $DRLIST
               (($CONS) ((MEQUAL) $LINE_WIDTH $LWVAL) $DRLIST))
              ((MSETQ) $DRLIST
               (($APPEND) $DRLIST ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
             T $FALSE)
            ((MCOND) $MKKEY
             ((MSETQ) $DRLIST
              (($APPEND) $DRLIST ((MLIST) ((MEQUAL) $KEY ""))))
             T $FALSE)
            ((MSETQ) $DRLIST
             (($APPEND) $DRLIST
              ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)
               ((MEQUAL) $TRANSPARENT T) ((MEQUAL) $POINT_SIZE $PTSDEF)
               ((MEQUAL) $POINT_TYPE $PTTDEF)
               ((MEQUAL) $LABEL_ALIGNMENT $LABADEF)
               ((MEQUAL) $HEAD_TYPE $NOFILLED)
               ((MEQUAL) $HEAD_ANGLE 30.) ((MEQUAL) $HEAD_LENGTH 0.5))))
            ((MDO) $IQ NIL NIL NIL $LQDA NIL
             ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
              ((MSETQ) $QT (($QDA ARRAY) $IQ))
              ((MSETQ) $QTOP (($OP) $QT))
              ((MSETQ) $TARGS (($ARGS) $QT))
              ((MCOND) ((MEQUAL) $QTOP $KEY)
               ((MPROGN)
                ((MCOND) ((MGREATERP) (($LENGTH) $TARGS) 1.)
                 ((MRETURN) (($DOERR) "use key(bottom) or key(top) "))
                 T $FALSE)
                ((MSETQ) $TT (($TARGS ARRAY) 1.))
                ((MCOND) ((MEQUAL) $TT $BOTTOM)
                 ((MSETQ) $PTSLIST
                  (($APPEND) $PTSLIST
                   ((MLIST) ((MEQUAL) $USER_PREAMBLE "set key bottom"))))
                 T
                 ((MCOND) ((MEQUAL) $TT $TOP)
                  ((MSETQ) $PTSLIST
                   (($APPEND) $PTSLIST
                    ((MLIST) ((MEQUAL) $USER_PREAMBLE "set key top"))))
                  T
                  ((MRETURN) (($DOERR) "use key(bottom) or key(top) ")))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $LABEL)
               ((MPROGN) ((MSETQ) $NLABEL T)
                ((MDO) $KL NIL NIL NIL (($LENGTH) $TARGS) NIL
                 ((MPROGN) ((MSETQ) $LAB_ARGS (($TARGS ARRAY) $KL))
                  ((MCOND) ((MEQUAL) (($LENGTH) $LAB_ARGS) 3.)
                   ((MSETQ) $LABELLIST
                    (($APPEND) $LABELLIST
                     ((MLIST)
                      (($APPLY) ((MQUOTE) $LABEL) ((MLIST) $LAB_ARGS)))))
                   T
                   ((MPROGN)
                    ((MSETQ) $ACOLOR
                     ((MQAPPLY ARRAY) (($ARGS) (($LAB_ARGS ARRAY) 4.))
                      1.))
                    ((MSETQ) $LABELLIST
                     (($APPEND) $LABELLIST
                      ((MLIST) ((MEQUAL) $COLOR $ACOLOR))))
                    ((MSETQ) $LABELLIST
                     (($APPEND) $LABELLIST
                      ((MLIST)
                       (($APPLY) ((MQUOTE) $LABEL)
                        ((MLIST) (($REST) $LAB_ARGS ((MMINUS) 1.)))))))
                    ((MSETQ) $LABELLIST
                     (($APPEND) $LABELLIST
                      ((MLIST) ((MEQUAL) $COLOR $BLACK)))))))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $LABEL_ALIGN)
               ((MPROGN)
                ((MCOND) ((MGREATERP) (($LENGTH) $TARGS) 1.)
                 ((MRETURN)
                  (($DOERR)
                   " use label_align(p) where p is l, r, or c "))
                 T $FALSE)
                ((MSETQ) $PL (($TARGS ARRAY) 1.))
                ((MCOND) ((MNOT) (($INLISTP) $PL ((MLIST) $L $R $C)))
                 ((MRETURN)
                  (($DOERR)
                   " use label_align(p) where p is l, r, or c "))
                 T $FALSE)
                ((MCOND) ((MEQUAL) $PL $L) ((MSETQ) $LABADEF $LEFT) T
                 $FALSE)
                ((MCOND) ((MEQUAL) $PL $R) ((MSETQ) $LABADEF $RIGHT) T
                 $FALSE)
                ((MCOND) ((MEQUAL) $PL $C) ((MSETQ) $LABADEF $CENTER) T
                 $FALSE)
                ((MSETQ) $LABELLIST
                 (($APPEND) $LABELLIST
                  ((MLIST) ((MEQUAL) $LABEL_ALIGNMENT $LABADEF)))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $EX1)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 4.)
                 ((MPROGN)
                  (($PRINT)
                   "ex1 syntax: ex1(expr,x,x1,x2,lc(c),lw(n),lk(string) ) ")
                  (($PRINT) "first four args required")
                  ((MRETURN)
                   (($DOERR)
                    "only lc(c), lw(n), and lk(string) options can be included")))
                 T $FALSE)
                ((MCOND) ((MGREATERP) $NARGS 7.)
                 ((MRETURN)
                  (($DOERR)
                   "ex1: only lc(c), lw(n), and lk(string) options allowed "))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
                ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "ex1: first arg should not be a list"))
                 T $FALSE)
                ((MSETQ) $HLIM (($FLOAT) (($REST) $ELIST 1.)))
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "ex1: hlim=[x,x1,x2]: x is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR) "ex1: hlim=[x,x1,x2]: x1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR) "ex1: hlim=[x,x1,x2]: x2 is not a number"))
                 T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $EXPLICIT) $ELIST)))
                ((MSETQ) $PR (($REST) $TARGS 4.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "ex1 options: lc(color), lw(n), lk(string) "
                     ((MLIST) $LC $LW $LK)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $IMP1)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 7.)
                 ((MRETURN)
                  (($DOERR)
                   "imp1 syntax: imp1(eqn,x,x1,x2,y,y1,y2,options)"))
                 T $FALSE)
                ((MCOND) ((MGREATERP) $NARGS 10.)
                 ((MRETURN)
                  (($DOERR)
                   "imp1: only lc(c), lw(n), and lk(string) options allowed "))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 7.)))))
                ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "imp1: first arg should not be a list"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($EQNCHECK) (($ELIST ARRAY) 1.)))
                 ((MRETURN)
                  (($DOERR) "imp1: first arg should be an equation "))
                 T $FALSE)
                ((MSETQ) $HLIM (($FLOAT) (($REST) $ELIST 1.)))
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): x must be a symbol"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): x1 must be a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): x2 must be a number"))
                 T $FALSE)
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 4.))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): y must be a symbol"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 5.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): y1 must be a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 6.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): y2 must be a number"))
                 T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $IMPLICIT) $ELIST)))
                ((MSETQ) $PR (($REST) $TARGS 7.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "imp1 options: lc(color), lw(n), lk(string) "
                     ((MLIST) $LC $LW $LK)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $CONTOUR)
               ((MPROGN) (($PRINT) "   contour working... ")
                ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 8.)
                 ((MRETURN)
                  (($DOERR)
                   "contour syntax: contour(expr,x,x1,x2,y,y1,y2,cvals(v1,v2,...),options )
                            or contour(expr,x,x1,x2,y,y1,y2, crange(n,min,max),options )"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($MAKELIST) (($TARGS ARRAY) $JJ) $JJ 1. 7.))
                ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "contour: first arg should be an expression depending on
                            two variables "))
                 T $FALSE)
                ((MCOND) (($EQNCHECK) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "contour: first arg should be an expression "))
                 T $FALSE)
                ((MSETQ) $HLIM (($FLOAT) (($REST) $ELIST 1.)))
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): x must be a symbol"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): x1 must be a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): x2 must be a number"))
                 T $FALSE)
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 4.))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): y must be a symbol"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 5.)))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): y1 must be a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 6.)))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): y2 must be a number"))
                 T $FALSE)
                ((MSETQ) $PL (($TARGS ARRAY) 8.))
                ((MCOND) (($ATOM) $PL)
                 ((MRETURN)
                  (($DOERR)
                   "contour eighth arg: cvals(v1,v2,...) or crange(n,min,max)"))
                 T $FALSE)
                ((MSETQ) $PTSL ((MLIST)))
                ((MCOND) ((MEQUAL) (($OP) $PL) $CVALS)
                 ((MPROGN) ((MSETQ) $TT (($ARGS) $PL))
                  ((MDOIN) $CVAL $TT NIL NIL NIL NIL
                   ((MPROGN) ((MSETQ) $PTL $HLIM)
                    ((MSETQ) $PTL
                     (($CONS) ((MEQUAL) (($FIRST) $ELIST) $CVAL) $PTL))
                    ((MSETQ) $PTSL
                     (($APPEND) $PTSL
                      ((MLIST) (($APPLY) ((MQUOTE) $IMPLICIT) $PTL)))))))
                 T
                 ((MCOND) ((MEQUAL) (($OP) $PL) $CRANGE)
                  ((MPROGN) ((MSETQ) $TT (($ARGS) $PL))
                   ((MCOND) ((MNOTEQUAL) (($LENGTH) $TT) 3.)
                    ((MRETURN)
                     (($DOERR)
                      "contour last arg: cvals(v1,...) or crange(n,min,max)"))
                    T $FALSE)
                   ((MSETQ) $CNUM (($FIRST) $TT))
                   ((MCOND) ((MNOT) (($INTEGERP) $CNUM))
                    ((MRETURN)
                     (($DOERR)
                      "crange(n,min,max): n must be literal integer, like 10"))
                    T $FALSE)
                   ((MCOND) ((MEQUAL) $CNUM 0.)
                    ((MRETURN)
                     (($DOERR) "crange(n,min,max): n cannot be zero "))
                    T $FALSE)
                   ((MCOND) ((MNOT) (($NUMBERP) (($TT ARRAY) 2.)))
                    ((MRETURN)
                     (($DOERR)
                      "crange(n,min,max): min must be a number"))
                    T $FALSE)
                   ((MCOND) ((MNOT) (($NUMBERP) (($TT ARRAY) 3.)))
                    ((MRETURN)
                     (($DOERR)
                      "crange(n,min,max): max must be a number"))
                    T $FALSE)
                   ((MCOND)
                    ((MLESSP) (($TT ARRAY) 3.) (($TT ARRAY) 2.))
                    ((MRETURN)
                     (($DOERR)
                      "crange(n,min,max): max must be greater than min "))
                    T $FALSE)
                   ((MSETQ) $CDV
                    (($FLOAT)
                     ((MABS)
                      ((MQUOTIENT)
                       ((MPLUS) (($TT ARRAY) 3.)
                        ((MMINUS) (($TT ARRAY) 2.)))
                       $CNUM))))
                   ((MDO) $KK NIL NIL NIL $CNUM NIL
                    ((MPROGN) ((MSETQ) $PTL $HLIM)
                     ((MSETQ) $CVAL
                      ((MPLUS) (($TT ARRAY) 2.)
                       ((MTIMES) ((MPLUS) $KK ((MMINUS) 1.)) $CDV)))
                     ((MSETQ) $PTL
                      (($CONS) ((MEQUAL) (($FIRST) $ELIST) $CVAL) $PTL))
                     ((MSETQ) $PTSL
                      (($APPEND) $PTSL
                       ((MLIST) (($APPLY) ((MQUOTE) $IMPLICIT) $PTL)))))))
                  T
                  ((MRETURN)
                   (($DOERR)
                    "contour last arg: cvals(v1,...) or crange(n,min,max)"))))
                ((MSETQ) $MKGRID NIL) ((MSETQ) $MKXAXIS NIL)
                ((MSETQ) $MKYAXIS NIL)
                ((MSETQ) $PR (($REST) $TARGS 8.))
                ((MSETQ) $LP (($LENGTH) $PR)) ((MSETQ) $NLW NIL)
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "contour options: lc(color), lw(n), add(options) "
                     ((MLIST) $LC $LW $ADD)))
                   ((MRETURN)) T $FALSE)
                  ((MDO) $KK NIL NIL NIL $LP NIL
                   ((MPROGN) ((MSETQ) $CT (($PR ARRAY) $KK))
                    ((MSETQ) $CTOP (($OP) $CT))
                    ((MSETQ) $CTARGS (($ARGS) $CT))
                    ((MCOND) ((MEQUAL) $CTOP $LC) (($SETNPC) $CTARGS) T
                     $FALSE)
                    ((MCOND) ((MEQUAL) $CTOP $LW)
                     ((MCOND) ((MEQUAL) (($LENGTH) $CTARGS) 1.)
                      ((MPROGN) ((MSETQ) $NLW T)
                       ((MSETQ) $PTSL
                        (($CONS)
                         ((MEQUAL) $LINE_WIDTH (($CTARGS ARRAY) 1.))
                         $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL
                         ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)))))
                      T
                      ((MRETURN) (($DOERR) "use lw(5) for example ")))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $CTOP $ADD)
                     ((MDO) $LL NIL NIL NIL (($LENGTH) $CTARGS) NIL
                      ((MCOND) ((MEQUAL) (($CTARGS ARRAY) $LL) $GRID)
                       ((MSETQ) $MKGRID T) T
                       ((MCOND) ((MEQUAL) (($CTARGS ARRAY) $LL) $XAXIS)
                        ((MSETQ) $MKXAXIS T) T
                        ((MCOND)
                         ((MEQUAL) (($CTARGS ARRAY) $LL) $YAXIS)
                         ((MSETQ) $MKYAXIS T) T
                         ((MCOND)
                          ((MEQUAL) (($CTARGS ARRAY) $LL) $XYAXES)
                          ((MPROGN) ((MSETQ) $MKXAXIS T)
                           ((MSETQ) $MKYAXIS T))
                          T
                          ((MRETURN)
                           (($DOERR)
                            "contour: add(grid,xaxis,yaxis,xyaxes) ")))))))
                     T $FALSE))))
                 T $FALSE)
                ((MCOND) ((MNOT) $NLW)
                 ((MPROGN)
                  ((MSETQ) $PTSL
                   (($CONS) ((MEQUAL) $LINE_WIDTH 1.) $PTSL))
                  ((MSETQ) $PTSL
                   (($APPEND) $PTSL
                    ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)))))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $PARA)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 5.)
                 ((MPROGN)
                  (($PRINT)
                   "para syntax: para(xofu,yofu,u,u1,u2,lc(c),lw(n),lk(string) ) ")
                  (($PRINT) "first five args are required")
                  ((MRETURN)
                   (($DOERR)
                    "only lc(c), lw(n), and lk(string) options can be included")))
                 T $FALSE)
                ((MCOND) ((MGREATERP) $NARGS 8.)
                 ((MRETURN)
                  (($DOERR)
                   "para: only lc(c), lw(n), and lk(string) options allowed "))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 5.)))))
                ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "para: first arg should not be a list"))
                 T $FALSE)
                ((MSETQ) $ULIM (($FLOAT) (($REST) $ELIST 2.)))
                ((MCOND) (($NUMBERP) (($ULIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "para: ulim=[var,var1,var2]: var is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR)
                   "para: ulim=[var,var1,var2]: var1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR)
                   "para: ulim=[var,var1,var2]: var2 is not a number"))
                 T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $PARAMETRIC) $ELIST)))
                ((MSETQ) $PR (($REST) $TARGS 5.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "para options: lc(color), lw(n), lk(string) "
                     ((MLIST) $LC $LW $LK)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $POLAR)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 4.)
                 ((MPROGN)
                  (($PRINT)
                   "polar syntax: polar(roftheta,theta,thetamin,thetamax,lc(c),lw(w),lk(string) ) ")
                  (($PRINT) "first four args are required")
                  ((MRETURN)
                   (($DOERR)
                    "only lc(c), lw(n), and lk(string) options can be included")))
                 T $FALSE)
                ((MCOND) ((MGREATERP) $NARGS 7.)
                 ((MRETURN)
                  (($DOERR)
                   "polar: only lc(c), lw(n), and lk(string) options allowed "))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
                ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "polar: first arg should not be a list"))
                 T $FALSE)
                ((MSETQ) $ULIM (($FLOAT) (($REST) $ELIST 1.)))
                ((MCOND) (($NUMBERP) (($ULIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "polar: ulim=[var,var1,var2]: var is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR)
                   "polar: ulim=[var,var1,var2]: var1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR)
                   "polar: ulim=[var,var1,var2]: var2 is not a number"))
                 T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $POLAR) $ELIST)))
                ((MSETQ) $PR (($REST) $TARGS 4.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "polar options: lc(color), lw(n), lk(string) "
                     ((MLIST) $LC $LW $LK)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $CIRCLE)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 3.)
                 ((MRETURN)
                  (($DOERR) "circle: at least three args needed"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 3.)))))
                ((MSETQ) $PR (($REST) $TARGS 3.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MSETQ) $PTSL
                 ((MLIST)
                  (($ELLIPSE) (($ELIST ARRAY) 1.) (($ELIST ARRAY) 2.)
                   (($ELIST ARRAY) 3.) (($ELIST ARRAY) 3.) 0. 360.)))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "circle options: lc(color), lw(n), fill(color) "
                     ((MLIST) $LC $LW $FILL)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $ELLIPSE)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 6.)
                 ((MRETURN)
                  (($DOERR) "ellipse: at least six args needed"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 6.)))))
                ((MSETQ) $PR (($REST) $TARGS 6.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $ELLIPSE) $ELIST)))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "ellipse options: lc(color), lw(n), fill(color) "
                     ((MLIST) $LC $LW $FILL)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $LINE)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 4.)
                 ((MRETURN)
                  (($DOERR) "line: at least four args needed"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $ELIST) 4.)
                 ((MRETURN)
                  (($DOERR) "line: at least four args needed"))
                 T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST)
                  (($POINTS)
                   ((MLIST) (($REST) $ELIST ((MMINUS) 2.))
                    (($REST) $ELIST 2.)))))
                ((MSETQ) $PR (($REST) $TARGS 4.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "line options: lc(color), lw(n), lk(string) "
                     ((MLIST) $LC $LW $LK)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $POINTS_JOINED T) $PTSL))
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $POINT_TYPE ((MMINUS) 1.)) $PTSL))
                ((MSETQ) $PTSL
                 (($APPEND) $PTSL
                  ((MLIST) ((MEQUAL) $POINTS_JOINED NIL)
                   ((MEQUAL) $POINT_TYPE $PTTDEF))))
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $VECTOR)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 2.)
                 ((MRETURN)
                  (($DOERR) "vector: at least two args needed"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 2.)))))
                ((MDO) $JQ NIL NIL NIL 2. NIL
                 ((MCOND) ((MNOT) (($LISTP) (($ELIST ARRAY) $JQ)))
                  ((MRETURN)
                   (($DOERR) "vector([x,y],[dx,dy],options )"))
                  T $FALSE))
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $VECTOR) $ELIST)))
                ((MSETQ) $PR (($REST) $TARGS 2.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "vector options: lc(color), lw(n), lk(string), 
                            ha(thdeg), hb(v), hl(v), ht(v) "
                     ((MLIST) $LC $LW $LK $HA $HB $HL $HT)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR)
                  ((MDO) $JQ NIL NIL NIL $LP NIL
                   ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                    ((MSETQ) $TT (($PR ARRAY) $JQ))
                    ((MSETQ) $TTOP (($OP) $TT))
                    ((MSETQ) $TTARGS (($ARGS) $TT))
                    ((MCOND) ((MEQUAL) $TTOP $HA)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR) "vector: use ha(45) for example "))
                       T $FALSE)
                      ((MSETQ) $PL (($FLOAT) (($TTARGS ARRAY) 1.)))
                      ((MCOND) ((MNOT) (($NUMBERP) $PL))
                       ((MRETURN)
                        (($DOERR) "vector: use ha(45) for example "))
                       T $FALSE)
                      ((MSETQ) $PTSL
                       (($CONS) ((MEQUAL) $HEAD_ANGLE $PL) $PTSL)))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $HB)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR) "vector: use hb(t) or hb(f) "))
                       T $FALSE)
                      ((MSETQ) $PL (($TTARGS ARRAY) 1.))
                      ((MCOND)
                       ((MNOT) (($INLISTP) $PL ((MLIST) $T $F)))
                       ((MRETURN)
                        (($DOERR) "vector: use hb(t) or hb(f) "))
                       T $FALSE)
                      ((MCOND) ((MEQUAL) $PL $T)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $HEAD_BOTH T) $PTSL))
                       T $FALSE)
                      ((MCOND) ((MEQUAL) $PL $F)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $HEAD_BOTH NIL) $PTSL))
                       T $FALSE))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $HL)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR) "vector: use hl(0.7) for example "))
                       T $FALSE)
                      ((MSETQ) $PL (($FLOAT) (($TTARGS ARRAY) 1.)))
                      ((MCOND) ((MNOT) (($NUMBERP) $PL))
                       ((MRETURN)
                        (($DOERR) "vector: use hl(0.7) for example "))
                       T $FALSE)
                      ((MSETQ) $PTSL
                       (($CONS) ((MEQUAL) $HEAD_LENGTH $PL) $PTSL)))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $HT)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR)
                         "vector: use ht(e), ht(f), or ht(n) "))
                       T $FALSE)
                      ((MSETQ) $PL (($TTARGS ARRAY) 1.))
                      ((MCOND)
                       ((MNOT) (($INLISTP) $PL ((MLIST) $E $F $N)))
                       ((MRETURN)
                        (($DOERR)
                         "vector: use ht(e), ht(f), or ht(n) "))
                       T $FALSE)
                      ((MCOND) ((MEQUAL) $PL $E)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $HEAD_TYPE $EMPTY) $PTSL))
                       T $FALSE)
                      ((MCOND) ((MEQUAL) $PL $F)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $HEAD_TYPE $FILLED) $PTSL))
                       T $FALSE)
                      ((MCOND) ((MEQUAL) $PL $N)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $HEAD_TYPE $NOFILLED) $PTSL))
                       T $FALSE))
                     T $FALSE))))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $ARROWHEAD)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 4.)
                 ((MRETURN)
                  (($DOERR) "try arrowhead(0,0,45,0.3) for example "))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($FLOAT)
                  (($REST) $TARGS
                   ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.))))))
                ((MDO) $JQ NIL NIL NIL 4. NIL
                 ((MCOND) ((MNOT) (($NUMBERP) (($ELIST ARRAY) $JQ)))
                  ((MRETURN)
                   (($DOERR) "arrowhead: first 4 args must be numbers"))
                  T $FALSE))
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PHI 0.44) ((MSETQ) $XX (($ELIST ARRAY) 1.))
                ((MSETQ) $YY (($ELIST ARRAY) 2.))
                ((MSETQ) $TH
                 (($FLOAT)
                  ((MQUOTIENT) ((MTIMES) $%PI (($ELIST ARRAY) 3.))
                   180.)))
                ((MSETQ) $SA (($ELIST ARRAY) 4.))
                ((MSETQ) $AX
                 ((MTIMES) $SA ((%COS) ((MPLUS) $TH ((MMINUS) $PHI)))))
                ((MSETQ) $AY
                 ((MTIMES) $SA ((%SIN) ((MPLUS) $TH ((MMINUS) $PHI)))))
                ((MSETQ) $BX
                 ((MTIMES) $SA ((%COS) ((MPLUS) $TH $PHI))))
                ((MSETQ) $BY
                 ((MTIMES) $SA ((%SIN) ((MPLUS) $TH $PHI))))
                ((MSETQ) $PTSL
                 ((MLIST)
                  (($POINTS)
                   ((MLIST)
                    ((MLIST) ((MPLUS) $XX ((MMINUS) $AX))
                     ((MPLUS) $YY ((MMINUS) $AY)))
                    ((MLIST) $XX $YY)))
                  (($POINTS)
                   ((MLIST)
                    ((MLIST) ((MPLUS) $XX ((MMINUS) $BX))
                     ((MPLUS) $YY ((MMINUS) $BY)))
                    ((MLIST) $XX $YY)))))
                ((MSETQ) $PR (($REST) $TARGS 4.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "arrowhead options: lc(color), lw(n)  "
                     ((MLIST) $LC $LW)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $POINTS_JOINED T) $PTSL))
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $POINT_TYPE ((MMINUS) 1.)) $PTSL))
                ((MSETQ) $PTSL
                 (($APPEND) $PTSL
                  ((MLIST) ((MEQUAL) $POINTS_JOINED NIL)
                   ((MEQUAL) $POINT_TYPE $PTTDEF))))
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $RECT)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 4.)
                 ((MRETURN)
                  (($DOERR) "rect: at least four args needed"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $ELIST) 4.)
                 ((MRETURN)
                  (($DOERR) "rect: at least four args needed"))
                 T $FALSE)
                ((MSETQ) $PR (($REST) $TARGS 4.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MSETQ) $PTSL
                 ((MLIST)
                  (($RECTANGLE) (($REST) $ELIST ((MMINUS) 2.))
                   (($REST) $ELIST 2.))))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "rect options: lc(color), lw(n), fill(color) "
                     ((MLIST) $LC $LW $FILL)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $POLY)
               ((MPROGN) ((MSETQ) $PL (($FIRST) $TARGS))
                ((MCOND) ((MNOT) (($LISTP) $PL))
                 ((MRETURN)
                  (($DOERR) "first arg of poly:[ [x0,y0],[x1,y1],...]"))
                 T $FALSE)
                ((MSETQ) $PL1 (($FIRST) $PL))
                ((MCOND) ((MNOT) (($LISTP) $PL1))
                 ((MRETURN)
                  (($DOERR) "first arg of poly:[ [x0,y0],[x1,y1],...]"))
                 T $FALSE)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $PL1) 2.)
                 ((MRETURN)
                  (($DOERR) "first arg of poly:[ [x0,y0],[x1,y1],...]"))
                 T $FALSE)
                ((MSETQ) $PTSL ((MLIST) (($POLYGON) $PL)))
                ((MSETQ) $PR (($REST) $TARGS))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "poly options: lc(color), lw(n), fill(color) "
                     ((MLIST) $LC $LW $FILL)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $PTS)
               ((MPROGN) ((MSETQ) $PL (($FIRST) $TARGS))
                ((MCOND) ((MNOT) (($LISTP) $PL))
                 ((MRETURN)
                  (($DOERR) "first arg of pts must be a list"))
                 T $FALSE)
                ((MCOND) ((MEQUAL) (($LENGTH) $PL) 2.)
                 ((MCOND) ((MNOT) (($LISTP) (($PL ARRAY) 1.)))
                  ((MSETQ) $PL ((MLIST) $PL)) T $FALSE)
                 T $FALSE)
                ((MSETQ) $PTSL ((MLIST) (($POINTS) $PL)))
                ((MSETQ) $PR (($REST) $TARGS))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "pts options: pc(color), ps(size), pk(string), pt(type), pj(lw) "
                     ((MLIST) $PC $PS $PT $PJ $PK)))
                   ((MRETURN)) T $FALSE)
                  ((MDO) $JQ NIL NIL NIL $LP NIL
                   ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                    ((MSETQ) $TT (($PR ARRAY) $JQ))
                    ((MSETQ) $TTOP (($OP) $TT))
                    ((MSETQ) $TTARGS (($ARGS) $TT))
                    ((MCOND) ((MEQUAL) $TTOP $PC)
                     ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                      ((MPROGN)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $COLOR (($TTARGS ARRAY) 1.))
                         $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL
                         ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
                      T
                      ((MRETURN)
                       (($DOERR) "pts: use pc(blue) for example")))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $PS)
                     ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                      ((MPROGN)
                       ((MSETQ) $PTSL
                        (($CONS)
                         ((MEQUAL) $POINT_SIZE (($TTARGS ARRAY) 1.))
                         $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL
                         ((MLIST) ((MEQUAL) $POINT_SIZE $PTSDEF)))))
                      T
                      ((MRETURN)
                       (($DOERR) "pts: use ps(2) for example ")))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $PT)
                     ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                      ((MPROGN)
                       ((MSETQ) $PTSL
                        (($CONS)
                         ((MEQUAL) $POINT_TYPE (($TTARGS ARRAY) 1.))
                         $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL
                         ((MLIST) ((MEQUAL) $POINT_TYPE $PTTDEF)))))
                      T
                      ((MRETURN)
                       (($DOERR) "pts: use pt(3) for example ")))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $PJ)
                     ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                      ((MPROGN)
                       ((MCOND)
                        ((MNOTEQUAL) (($TTARGS ARRAY) 1.) $LWDEF)
                        ((MSETQ) $PTSL
                         (($CONS)
                          ((MEQUAL) $LINE_WIDTH (($TTARGS ARRAY) 1.))
                          $PTSL))
                        T $FALSE)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $POINTS_JOINED T) $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL
                         ((MLIST) ((MEQUAL) $POINTS_JOINED NIL))))
                       ((MCOND)
                        ((MNOTEQUAL) (($TTARGS ARRAY) 1.) $LWDEF)
                        ((MSETQ) $PTSL
                         (($APPEND) $PTSL
                          ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF))))
                        T $FALSE))
                      T
                      ((MRETURN)
                       (($DOERR) "pts: use pj(2) for example ")))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $PK)
                     ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                      ((MPROGN)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $KEY (($TTARGS ARRAY) 1.))
                         $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL ((MLIST) ((MEQUAL) $KEY "")))))
                      T
                      ((MRETURN)
                       (($DOERR)
                        "pts: use pk(\"case 1\") for example ")))
                     T $FALSE))))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $ERRORBARS)
               ((MPROGN)
                ((MCOND) ((MEQUAL) (($LENGTH) $TARGS) 1.)
                 ((MRETURN) (($DOERR) "errorbars(ptl,dyl,options")) T
                 $FALSE)
                ((MSETQ) $PTL (($FIRST) $TARGS))
                ((MCOND) ((MNOT) (($LISTP) $PTL))
                 ((MRETURN)
                  (($DOERR)
                   "first arg of errorbars must be a list of points"))
                 T $FALSE)
                ((MSETQ) $LE (($LENGTH) $PTL))
                ((MCOND) ((MEQUAL) $LE 2.)
                 ((MCOND) ((MNOT) (($LISTP) (($PTL ARRAY) 1.)))
                  ((MSETQ) $PTL ((MLIST) $PTL)) T $FALSE)
                 T $FALSE)
                ((MSETQ) $LE (($LENGTH) $PTL))
                ((MSETQ) $DYL (($SECOND) $TARGS))
                ((MCOND) ((MNOT) (($LISTP) $DYL))
                 ((MSETQ) $DYL ((MLIST) $DYL)) T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST) ((MEQUAL) $POINTS_JOINED T)
                  ((MEQUAL) $POINT_TYPE ((MMINUS) 1.))))
                ((MCOND) ((MEQUAL) (($LENGTH) $DYL) 1.)
                 ((MPROGN) ((MSETQ) $DY (($DYL ARRAY) 1.))
                  ((MDO) $JQ NIL NIL NIL (($LENGTH) $PTL) NIL
                   ((MSETQ) $PTSL
                    (($APPEND) $PTSL
                     ((MLIST)
                      (($POINTS)
                       ((MLIST)
                        ((MLIST)
                         ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                         ((MPLUS)
                          ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.)
                          ((MMINUS) $DY)))
                        ((MLIST)
                         ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                         ((MPLUS)
                          ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.) $DY)))))))))
                 T
                 ((MPROGN)
                  ((MCOND) ((MNOTEQUAL) (($LENGTH) $DYL) $LE)
                   ((MRETURN)
                    (($DOERR)
                     "number of errorbars must equal number of points"))
                   T $FALSE)
                  ((MDO) $JQ NIL NIL NIL (($LENGTH) $PTL) NIL
                   ((MSETQ) $PTSL
                    (($APPEND) $PTSL
                     ((MLIST)
                      (($POINTS)
                       ((MLIST)
                        ((MLIST)
                         ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                         ((MPLUS)
                          ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.)
                          ((MMINUS) (($DYL ARRAY) $JQ))))
                        ((MLIST)
                         ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                         ((MPLUS)
                          ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.)
                          (($DYL ARRAY) $JQ)))))))))))
                ((MSETQ) $ERRBLW 1.)
                ((MCOND) ((MGREATERP) (($LENGTH) $TARGS) 2.)
                 ((MPROGN) ((MSETQ) $PR (($REST) $TARGS 2.))
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR "errorbars options: lc(c), lw(n) "
                     ((MLIST) $LC $LW)))
                   ((MRETURN)) T $FALSE)
                  ((MSETQ) $LP (($LENGTH) $PR))
                  ((MDO) $KK NIL NIL NIL $LP NIL
                   ((MPROGN) ((MSETQ) $TT (($PR ARRAY) $KK))
                    ((MSETQ) $TTOP (($OP) $TT))
                    ((MSETQ) $TTARGS (($ARGS) $TT))
                    ((MCOND) ((MEQUAL) $TTOP $LC)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR) "errorbars: use lc(red) for example"))
                       T $FALSE)
                      ((MSETQ) $PTSL
                       (($CONS) ((MEQUAL) $COLOR (($TTARGS ARRAY) 1.))
                        $PTSL))
                      ((MSETQ) $PTSL
                       (($APPEND) $PTSL
                        ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $LW)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR) "errorbars: use lw(2) for example"))
                       T $FALSE)
                      ((MSETQ) $ERRBLW (($TTARGS ARRAY) 1.)))
                     T $FALSE))))
                 T $FALSE)
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $LINE_WIDTH $ERRBLW) $PTSL))
                ((MSETQ) $PTSL
                 (($APPEND) $PTSL
                  ((MLIST) ((MEQUAL) $POINTS_JOINED NIL)
                   ((MEQUAL) $POINT_TYPE $PTTDEF)
                   ((MEQUAL) $LINE_WIDTH $LWDEF))))
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $PIC)
               ((MPROGN)
                ((MCOND) $NPIC
                 ((MRETURN)
                  (($DOERR) "can only be one pic(...) arg to qdraw"))
                 T $FALSE)
                ((MSETQ) $NPIC T) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND)
                 ((MOR) ((MLESSP) $NARGS 2.) ((MGREATERP) $NARGS 3.))
                 ((MRETURN)
                  (($DOERR)
                   "pic args: type ,fname , font(string,size);
                                    type and fname required, font() optional "))
                 T $FALSE)
                ((MSETQ) $PICTYPE (($TARGS ARRAY) 1.))
                ((MCOND)
                 ((MNOT)
                  (($INLISTP) $PICTYPE
                   ((MLIST) $EPS $EPS_COLOR $JPG $PNG)))
                 ((MRETURN)
                  (($DOERR)
                   "pic types are eps, eps_color, jpg, and png "))
                 T $FALSE)
                ((MCOND) ((MEQUAL) $PICTYPE $EPS)
                 ((MSETQ) $PICTYPE $EPS_COLOR) T $FALSE)
                ((MSETQ) $FNAMESTR (($TARGS ARRAY) 2.))
                ((MCOND) ((MNOT) (($STRINGP) $FNAMESTR))
                 ((MRETURN)
                  (($DOERR) "pic file name must be in double quotes "))
                 T $FALSE)
                ((MSETQ) $FNAMELST (($CHARLIST) $FNAMESTR))
                ((MDO) $KK NIL NIL NIL (($LENGTH) $FNAMELST) NIL
                 ((MCOND) ((MEQUAL) (($FNAMELST ARRAY) $KK) ".")
                  ((MRETURN)
                   (($DOERR)
                    "pic file name string cannot contain a period"))
                  T $FALSE))
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PICLIST
                 (($APPEND) $PICLIST
                  ((MLIST) ((MEQUAL) $TERMINAL $PICTYPE)
                   ((MEQUAL) $FILE_NAME $FNAMESTR))))
                ((MCOND) ((MEQUAL) $NARGS 3.)
                 ((MPROGN) ((MSETQ) $TT (($TARGS ARRAY) 3.))
                  ((MSETQ) $TTOP (($OP) $TT))
                  ((MCOND) ((MNOTEQUAL) $TTOP $FONT)
                   ((MRETURN)
                    (($DOERR) "pic 3rd arg: font(string,size) "))
                   T $FALSE)
                  ((MSETQ) $TTARGS (($ARGS) $TT))
                  ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 2.)
                   ((MRETURN)
                    (($DOERR) "pic 3rd arg: font(string,size)"))
                   T $FALSE)
                  ((MSETQ) $FNTSTR (($TTARGS ARRAY) 1.))
                  ((MCOND) ((MNOT) (($STRINGP) $FNTSTR))
                   ((MRETURN)
                    (($DOERR) "font string must be in double quotes "))
                   T $FALSE)
                  ((MSETQ) $FNTSIZE (($TTARGS ARRAY) 2.))
                  ((MCOND) ((MNOT) (($INTEGERP) $FNTSIZE))
                   ((MRETURN)
                    (($DOERR)
                     "pic: font syntax: size must be a positive integer "))
                   T $FALSE)
                  ((MSETQ) $PICLIST
                   (($APPEND) $PICLIST
                    ((MLIST) ((MEQUAL) $FONT $FNTSTR)
                     ((MEQUAL) $FONT_SIZE $FNTSIZE)))))
                 T $FALSE))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $MORE)
               ((MSETQ) $MORELIST (($APPEND) $MORELIST $TARGS)) T
               $FALSE)))
            ((MCOND) $ANERR ((MRETURN)) T $FALSE)
            ((MSETQ) $DRLIST
             (($CONS) ((MEQUAL) $NTICKS $NTICKSDEF) $DRLIST))
            ((MCOND) $MKGRID
             ((MSETQ) $DRLIST (($CONS) ((MEQUAL) $GRID T) $DRLIST)) T
             $FALSE)
            ((MSETQ) $DRLIST
             (($CONS)
              ((MEQUAL) $IP_GRID_IN ((MLIST) $IPGRIDDEF $IPGRIDDEF))
              $DRLIST))
            ((MCOND) ((MGREATERP) (($LENGTH) $MORELIST) 0.)
             ((MSETQ) $DRLIST (($APPEND) $DRLIST $MORELIST)) T $FALSE)
            ((MSETQ) $DRLIST (($APPEND) $DRLIST $PTSLIST))
            ((MCOND) ((MAND) $MKXYAXES $MKXAXIS)
             ((MSETQ) $DRLIST
              (($APPEND) $DRLIST
               ((MLIST) ((MEQUAL) $XAXIS T) ((MEQUAL) $XAXIS_WIDTH 2.))))
             T $FALSE)
            ((MCOND) ((MAND) $MKXYAXES $MKYAXIS)
             ((MSETQ) $DRLIST
              (($APPEND) $DRLIST
               ((MLIST) ((MEQUAL) $YAXIS T) ((MEQUAL) $YAXIS_WIDTH 2.))))
             T $FALSE)
            ((MCOND) ((MNOT) $MKEDGE)
             ((MSETQ) $DRLIST
              (($APPEND) $DRLIST
               ((MLIST) ((MEQUAL) $XTICS ((MQUOTE) $NONE))
                ((MEQUAL) $YTICS ((MQUOTE) $NONE))
                ((MEQUAL) $AXIS_BOTTOM NIL) ((MEQUAL) $AXIS_TOP NIL)
                ((MEQUAL) $AXIS_LEFT NIL) ((MEQUAL) $AXIS_RIGHT NIL))))
             T $FALSE)
            ((MCOND) ((MGREATERP) (($LENGTH) $PICLIST) 0.)
             ((MSETQ) $DRLIST (($APPEND) $DRLIST $PICLIST)) T $FALSE)
            ((MCOND) $NLABEL
             ((MPROGN)
              ((MSETQ) $DRLIST
               (($APPEND) $DRLIST ((MLIST) ((MEQUAL) $COLOR $BLACK))))
              ((MSETQ) $DRLIST (($APPEND) $DRLIST $LABELLIST)))
             T $FALSE)
            ((MSETQ) $DRLIST (($APPEND) $RNGLIST $DRLIST)) $DRLIST))) 
(ADDLABEL '$%I17) 
(DSKSETQ $%O17
         '((MDEFINE SIMP) (($QDRAW1) ((MLIST) $QDA))
           ((MPROG)
            ((MLIST) $ACOLOR $ANERR $ARG $AX $AY $BX $BY $CC $CDV
             $CLIST $CNUM $COLDEF $CT $CTOP $CTARGS $CVAL $DRLIST $DY
             $DYL $EEX $ELIST $EQE $ERRBLW $FNAMELST $FNAMESTR $FNTSIZE
             $FNTSTR $HLIM $HVLIM $IPGRIDDEF $IQ $JQ $KK $KLIST
             $LABADEF $LAB_ARGS $LE $LENDR $LL $LP $LQDA $LWA $LWDEF
             $LWVAL $MKEDGE $MKGRID $LABELLIST $MKKEY $MKXAXIS
             $MKXYAXIS $MKYAXIS $MORELIST $MSG $NN $NARGS $NDEF $NLABEL
             $NLW $NPIC $NPS $NTICKSDEF $NXR $NYR $PHI $PICLIST
             $PICTYPE $PL $PL1 $PR $PRLIST $PSTR $PTL $PTSDEF $PTTDEF
             $PTSL $PTSLIST $QT $RL $RNGLIST $SA $TARGS $TH $TLIST
             $QTOP $TP $TT $TTARGS $TTOP $TVAL $ULIM $XX $X1RR $X2RR
             $YY $Y1RR $Y2RR)
            (($LOCAL) $GOODARGS $EQNCHECK $DOERR $QVAL $SETNFILL
             $SETNLK $SETNLW $SETNPC $SETOPTIONS $INLISTP)
            ((MSETQ) $STRINGDISP T) ((MSETQ) $RATPRINT NIL)
            ((MSETQ) $LWDEF 3.) ((MSETQ) $LWVAL $LWDEF)
            ((MSETQ) $COLDEF $BLUE) ((MSETQ) $PTSDEF 3.)
            ((MSETQ) $PTTDEF 7.) ((MSETQ) $LABADEF $LEFT)
            ((MSETQ) $NTICKSDEF 100.) ((MSETQ) $IPGRIDDEF 10.)
            ((MSETQ) $NDEF NIL) ((MSETQ) $NPIC NIL)
            ((MSETQ) $NLABEL NIL) ((MSETQ) $MORELIST ((MLIST)))
            ((MSETQ) $PICLIST ((MLIST))) ((MSETQ) $PTSLIST ((MLIST)))
            ((MSETQ) $LABELLIST ((MLIST))) ((MSETQ) $DRLIST ((MLIST)))
            ((MSETQ) $RNGLIST ((MLIST))) ((MSETQ) $NXR 0.)
            ((MSETQ) $NYR 0.) ((MSETQ) $MKKEY T) ((MSETQ) $MKGRID T)
            ((MSETQ) $MKXYAXES T) ((MSETQ) $MKEDGE T)
            ((MSETQ) $MKXAXIS T) ((MSETQ) $MKYAXIS T)
            ((MDEFINE) (($GOODARGS) $ARGLIST $MSG $GOODARGLIST)
             ((MPROG) ((MLIST) $AA $II $JJ $NCHK)
              ((MDO) $II NIL NIL NIL (($LENGTH) $ARGLIST) NIL
               ((MPROGN) ((MSETQ) $AA (($ARGLIST ARRAY) $II))
                ((MCOND) (($ATOM) $AA)
                 ((MPROGN) ((MSETQ) $NCHK NIL)
                  (($PRINT) " arg " $AA " must itself have args ")
                  ((MRETURN) (($DOERR) $MSG)))
                 T $FALSE)
                ((MSETQ) $NCHK NIL)
                ((MDO) $JJ NIL NIL NIL (($LENGTH) $GOODARGLIST) NIL
                 ((MCOND)
                  ((MEQUAL) (($OP) $AA) (($GOODARGLIST ARRAY) $JJ))
                  ((MPROGN) ((MSETQ) $NCHK T) ((MRETURN))) T $FALSE))
                ((MCOND) ((MNOT) $NCHK)
                 ((MPROGN) (($PRINT) " arg " $AA " problem")
                  ((MRETURN) (($DOERR) $MSG)))
                 T $FALSE)))
              ((MRETURN) $NCHK)))
            ((MSETQ) $ANERR NIL)
            ((MSETQ) $CC
             ((MLIST) $BLUE $RED $TURQUOISE $BROWN $MAGENTA $GREEN
              $BLACK))
            ((MDEFINE) (($EQNCHECK) $EQE)
             ((MCOND) (($ATOM) $EQE) NIL T
              ((MCOND) ((MEQUAL) (($OP) $EQE) "=") T T NIL)))
            ((MDEFINE) (($DOERR) $MSG)
             ((MPROGN) ((MSETQ) $ANERR T) (($PRINT) "...syntax error")
              (($PRINT) $MSG) NIL))
            ((MDEFINE) (($QVAL) $NN)
             ((MCOND) ((MEQUAL) (($MOD) $NN 7.) 0.) 7. T
              (($MOD) $NN 7.)))
            ((MDEFINE) (($SETNPC) $LL)
             ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
              ((MPROGN)
               ((MSETQ) $PTSL
                (($CONS) ((MEQUAL) $COLOR (($LL ARRAY) 1.)) $PTSL))
               ((MSETQ) $PTSL
                (($APPEND) $PTSL ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
              T ((MRETURN) (($DOERR) "use lc(red) for example "))))
            ((MDEFINE) (($SETNLW) $LL)
             ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
              ((MPROGN)
               ((MSETQ) $PTSL
                (($CONS) ((MEQUAL) $LINE_WIDTH (($LL ARRAY) 1.)) $PTSL))
               ((MSETQ) $PTSL
                (($APPEND) $PTSL
                 ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)))))
              T ((MRETURN) (($DOERR) "use lw(5) for example "))))
            ((MDEFINE) (($SETNLK) $LL)
             ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
              ((MPROGN)
               ((MSETQ) $PTSL
                (($CONS) ((MEQUAL) $KEY (($LL ARRAY) 1.)) $PTSL))
               ((MSETQ) $PTSL
                (($APPEND) $PTSL ((MLIST) ((MEQUAL) $KEY "")))))
              T
              ((MRETURN) (($DOERR) " use lk(\"case 1\") for example "))))
            ((MDEFINE) (($SETNFILL) $LL)
             ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
              ((MPROGN)
               ((MSETQ) $PTSL
                (($CONS) ((MEQUAL) $FILL_COLOR (($LL ARRAY) 1.)) $PTSL))
               ((MSETQ) $PTSL
                (($CONS) ((MEQUAL) $TRANSPARENT NIL) $PTSL))
               ((MSETQ) $PTSL
                (($APPEND) $PTSL ((MLIST) ((MEQUAL) $TRANSPARENT T)))))
              T ((MRETURN) (($DOERR) "use fill(blue) for example"))))
            ((MDEFINE) (($SETOPTIONS) $PRLIST)
             ((MPROG) ((MLIST) $JJ $TT $TTOP $TTARGS)
              ((MDO) $JJ NIL NIL NIL (($LENGTH) $PRLIST) NIL
               ((MPROGN) ((MSETQ) $TT (($PRLIST ARRAY) $JJ))
                ((MSETQ) $TTOP (($OP) $TT))
                ((MSETQ) $TTARGS (($ARGS) $TT))
                ((MCOND) ((MEQUAL) $TTOP $LC) (($SETNPC) $TTARGS) T
                 $FALSE)
                ((MCOND) ((MEQUAL) $TTOP $LW) (($SETNLW) $TTARGS) T
                 $FALSE)
                ((MCOND) ((MEQUAL) $TTOP $LK) (($SETNLK) $TTARGS) T
                 $FALSE)
                ((MCOND) ((MEQUAL) $TTOP $FILL) (($SETNFILL) $TTARGS) T
                 $FALSE)))))
            ((MDEFINE) (($INLISTP) $AAA $LLL)
             ((MPROG) ((MLIST) $FFF $XXX) ((MSETQ) $FFF NIL)
              ((MDOIN) $XXX $LLL NIL NIL NIL NIL
               ((MCOND) ((MEQUAL) $XXX $AAA) ((MSETQ) $FFF T) T $FALSE))
              $FFF))
            ((MSETQ) $LQDA (($LENGTH) $QDA))
            ((MCOND) ((MEQUAL) $LQDA 0.)
             ((MPROGN) (($QDRAW_USAGE)) ((MRETURN) NIL)) T $FALSE)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $QDA
               "qdraw args:arrowhead(), circle(), contour(), cut(), ellipse(), errorbars(), ex(), ex1(), imp(), imp1(),ipgrid(),key(),label(),label_align(), line(), log(), lw(n), more(),nticks(),para(),pic(),polar(), poly(), pts(), rect(),vector(), xr(), yr() "
               ((MLIST) $ARROWHEAD $CIRCLE $CONTOUR $CUT $ELLIPSE
                $ERRORBARS $PIC $EX $EX1 $IMP $IMP1 $IPGRID $KEY $LABEL
                $LABEL_ALIGN $LINE %LOG $LW $MORE $NTICKS $PARA $PIC
                $POLAR $POLY $PTS $RECT $VECTOR $XR $YR)))
             ((MRETURN) NIL) T $FALSE)
            ((MDO) $IQ NIL NIL NIL $LQDA NIL
             ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
              ((MSETQ) $QT (($QDA ARRAY) $IQ))
              ((MSETQ) $QTOP (($OP) $QT))
              ((MSETQ) $TARGS (($ARGS) $QT))
              ((MCOND) ((MEQUAL) $QTOP $LW)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
                 ((MRETURN)
                  (($DOERR) "lw  must have one and only one argument"))
                 T $FALSE)
                ((MSETQ) $LWA (($TARGS ARRAY) 1.))
                ((MCOND) (($INTEGERP) $LWA) ((MSETQ) $LWVAL $LWA) T
                 ((MRETURN)
                  (($DOERR) "lw arg must be a literal integer like 2"))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP %LOG)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
                 ((MRETURN)
                  (($DOERR) " use log(a) where a is x, y, or xy "))
                 T $FALSE)
                ((MSETQ) $PL (($TARGS ARRAY) 1.))
                ((MCOND) ((MNOT) (($INLISTP) $PL ((MLIST) $X $Y $XY)))
                 ((MRETURN)
                  (($DOERR) " use log(a) where a is x, y, or xy "))
                 T $FALSE)
                ((MCOND) ((MEQUAL) $PL $X)
                 ((MSETQ) $LOGLIST ((MLIST) ((MEQUAL) $LOGX T))) T
                 ((MCOND) ((MEQUAL) $PL $Y)
                  ((MSETQ) $LOGLIST ((MLIST) ((MEQUAL) $LOGY T))) T
                  ((MCOND) ((MEQUAL) $PL $XY)
                   ((MSETQ) $LOGLIST
                    ((MLIST) ((MEQUAL) $LOGX T) ((MEQUAL) $LOGY T)))
                   T
                   ((MRETURN)
                    (($DOERR) " use log(a) where a is x, y, or xy")))))
                ((MSETQ) $DRLIST (($APPEND) $DRLIST $LOGLIST)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $NTICKS)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
                 ((MRETURN) (($DOERR) "nticks ex: nticks(200) ")) T
                 $FALSE)
                ((MSETQ) $NTICKSDEF (($TARGS ARRAY) 1.)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $IPGRID)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
                 ((MRETURN) (($DOERR) "ipgrid ex: ipgrid(15) ")) T
                 $FALSE)
                ((MSETQ) $IPGRIDDEF (($TARGS ARRAY) 1.)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $CUT)
               ((MPROGN) ((MSETQ) $EEX $TARGS)
                ((MSETQ) $LE (($LENGTH) $EEX))
                ((MDO) $JQ NIL NIL NIL $LE NIL
                 ((MPROGN) ((MSETQ) $PL (($EEX ARRAY) $JQ))
                  ((MCOND)
                   ((MNOT)
                    (($INLISTP) $PL
                     ((MLIST) $ALL $EDGE $GRID $KEY $XAXIS $XYAXES
                      $YAXIS)))
                   ((MRETURN)
                    (($DOERR)
                     "cut: valid args: all,key,grid,xyaxes,xaxis,yaxis,edge "))
                   T $FALSE)
                  ((MCOND) ((MEQUAL) $PL $ALL)
                   ((MPROGN) ((MSETQ) $MKKEY NIL) ((MSETQ) $MKGRID NIL)
                    ((MSETQ) $MKXYAXES NIL) ((MSETQ) $MKEDGE NIL))
                   T $FALSE)
                  ((MCOND) ((MEQUAL) $PL $KEY) ((MSETQ) $MKKEY NIL) T
                   $FALSE)
                  ((MCOND) ((MEQUAL) $PL $GRID) ((MSETQ) $MKGRID NIL) T
                   $FALSE)
                  ((MCOND) ((MEQUAL) $PL $XYAXES)
                   ((MSETQ) $MKXYAXES NIL) T $FALSE)
                  ((MCOND) ((MEQUAL) $PL $XAXIS) ((MSETQ) $MKXAXIS NIL)
                   T $FALSE)
                  ((MCOND) ((MEQUAL) $PL $YAXIS) ((MSETQ) $MKYAXIS NIL)
                   T $FALSE)
                  ((MCOND) ((MEQUAL) $PL $EDGE) ((MSETQ) $MKEDGE NIL) T
                   $FALSE))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $XR)
               ((MPROGN) ((MSETQ) $NXR ((MPLUS) $NXR 1.))
                ((MCOND) ((MEQUAL) $NXR 2.)
                 ((MRETURN)
                  (($DOERR) "only one xr(xa,xb) item allowed in qdraw"))
                 T $FALSE)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 2.)
                 ((MRETURN) (($DOERR) "xr must be of form xr(xa, xb)"))
                 T $FALSE)
                ((MSETQ) $X1RR (($FLOAT) (($TARGS ARRAY) 1.)))
                ((MCOND) ((MNOT) (($NUMBERP) $X1RR))
                 ((MRETURN) (($DOERR) "xr(x1,x2): x1 is not a number"))
                 T $FALSE)
                ((MSETQ) $X2RR (($FLOAT) (($TARGS ARRAY) 2.)))
                ((MCOND) ((MNOT) (($NUMBERP) $X2RR))
                 ((MRETURN) (($DOERR) "xr(x1,x2): x2 is not a number"))
                 T $FALSE)
                ((MSETQ) $TVAL
                 ((MEQUAL) $XRANGE ((MLIST) $X1RR $X2RR)))
                ((MSETQ) $RNGLIST (($CONS) $TVAL $RNGLIST)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $YR)
               ((MPROGN) ((MSETQ) $NYR ((MPLUS) $NYR 1.))
                ((MCOND) ((MEQUAL) $NYR 2.)
                 ((MRETURN)
                  (($DOERR) "only one yr(ya,yb) item allowed in qdraw"))
                 T $FALSE)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 2.)
                 ((MRETURN) (($DOERR) "yr must be of form yr(ya, yb)"))
                 T $FALSE)
                ((MSETQ) $Y1RR (($FLOAT) (($TARGS ARRAY) 1.)))
                ((MCOND) ((MNOT) (($NUMBERP) $Y1RR))
                 ((MRETURN) (($DOERR) "yr(y1,y2): y1 is not a number"))
                 T $FALSE)
                ((MSETQ) $Y2RR (($FLOAT) (($TARGS ARRAY) 2.)))
                ((MCOND) ((MNOT) (($NUMBERP) $Y2RR))
                 ((MRETURN) (($DOERR) "yr(y1,y2): y2 is not a number"))
                 T $FALSE)
                ((MSETQ) $TVAL
                 ((MEQUAL) $YRANGE ((MLIST) $Y1RR $Y2RR)))
                ((MSETQ) $RNGLIST (($APPEND) $RNGLIST ((MLIST) $TVAL))))
               T $FALSE)))
            ((MCOND) $ANERR ((MRETURN)) T $FALSE)
            ((MDO) $IQ NIL NIL NIL $LQDA NIL
             ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
              ((MSETQ) $QT (($QDA ARRAY) $IQ))
              ((MSETQ) $QTOP (($OP) $QT))
              ((MSETQ) $TARGS (($ARGS) $QT))
              ((MCOND) ((MEQUAL) $QTOP $EX)
               ((MPROGN) ((MSETQ) $NDEF T)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 4.)
                 ((MRETURN)
                  (($DOERR) "ex() should have exactly four arguments"))
                 T $FALSE)
                ((MSETQ) $EEX (($TARGS ARRAY) 1.))
                ((MCOND) ((MNOT) (($LISTP) $EEX))
                 ((MSETQ) $EEX ((MLIST) $EEX)) T $FALSE)
                ((MSETQ) $HLIM (($FLOAT) (($REST) $TARGS 1.)))
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "ex: hlim=[x,x1,x2]: x is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR) "ex: hlim=[x,x1,x2]: x1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR) "ex: hlim=[x,x1,x2]: x2 is not a number"))
                 T $FALSE)
                ((MSETQ) $LE (($LENGTH) $EEX))
                ((MDO) $JQ NIL NIL NIL $LE NIL
                 ((MPROGN)
                  ((MCOND) (($EQNCHECK) (($EEX ARRAY) $JQ))
                   ((MRETURN)
                    (($DOERR) "you have an equation in ex() "))
                   T $FALSE)
                  ((MSETQ) $TLIST (($CONS) (($EEX ARRAY) $JQ) $HLIM))
                  ((MSETQ) $TVAL
                   (($APPLY) ((MQUOTE) $EXPLICIT) $TLIST))
                  ((MSETQ) $DRLIST (($APPEND) $DRLIST ((MLIST) $TVAL))))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $IMP)
               ((MPROGN) ((MSETQ) $NDEF T)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 7.)
                 ((MRETURN)
                  (($DOERR)
                   "imp() should have exactly seven arguments"))
                 T $FALSE)
                ((MSETQ) $EEX (($TARGS ARRAY) 1.))
                ((MCOND) ((MNOT) (($LISTP) $EEX))
                 ((MSETQ) $EEX ((MLIST) $EEX)) T $FALSE)
                ((MSETQ) $HVLIM (($FLOAT) (($REST) $TARGS 1.)))
                ((MCOND) (($NUMBERP) (($HVLIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: x is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: x1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: x2 is not a number"))
                 T $FALSE)
                ((MCOND) (($NUMBERP) (($HVLIM ARRAY) 4.))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: y is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 5.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: y1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 6.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp: hvlim=[x,x1,x2,y,y1,y2]: y2 is not a number"))
                 T $FALSE)
                ((MSETQ) $LE (($LENGTH) $EEX))
                ((MDO) $JQ NIL NIL NIL $LE NIL
                 ((MPROGN)
                  ((MCOND) ((MNOT) (($EQNCHECK) (($EEX ARRAY) $JQ)))
                   ((MRETURN)
                    (($DOERR) "one imp() arg is not an equation "))
                   T $FALSE)
                  ((MSETQ) $TLIST (($CONS) (($EEX ARRAY) $JQ) $HVLIM))
                  ((MSETQ) $TVAL
                   (($APPLY) ((MQUOTE) $IMPLICIT) $TLIST))
                  ((MSETQ) $DRLIST (($APPEND) $DRLIST ((MLIST) $TVAL))))))
               T $FALSE)))
            ((MCOND) $ANERR ((MRETURN)) T $FALSE)
            ((MCOND) $NDEF
             ((MPROGN) ((MSETQ) $LENDR (($LENGTH) $DRLIST))
              ((MSETQ) $CLIST
               (($MAKELIST)
                ((MEQUAL) $COLOR (($CC ARRAY) (($QVAL) $KK))) $KK 1.
                $LENDR))
              ((MCOND) $MKKEY
               ((MPROGN)
                ((MSETQ) $KLIST
                 (($MAKELIST) ((MEQUAL) $KEY (($STRING) $KK)) $KK 1.
                  $LENDR))
                ((MSETQ) $DRLIST
                 (($FLATTEN)
                  (($MAKELIST)
                   ((MLIST) (($CLIST ARRAY) $KK) (($KLIST ARRAY) $KK)
                    (($DRLIST ARRAY) $KK))
                   $KK 1. $LENDR))))
               T ((MSETQ) $DRLIST (($JOIN) $CLIST $DRLIST)))
              ((MSETQ) $DRLIST
               (($CONS) ((MEQUAL) $LINE_WIDTH $LWVAL) $DRLIST))
              ((MSETQ) $DRLIST
               (($APPEND) $DRLIST ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
             T $FALSE)
            ((MCOND) $MKKEY
             ((MSETQ) $DRLIST
              (($APPEND) $DRLIST ((MLIST) ((MEQUAL) $KEY ""))))
             T $FALSE)
            ((MSETQ) $DRLIST
             (($APPEND) $DRLIST
              ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)
               ((MEQUAL) $TRANSPARENT T) ((MEQUAL) $POINT_SIZE $PTSDEF)
               ((MEQUAL) $POINT_TYPE $PTTDEF)
               ((MEQUAL) $LABEL_ALIGNMENT $LABADEF)
               ((MEQUAL) $HEAD_TYPE $NOFILLED)
               ((MEQUAL) $HEAD_ANGLE 30.) ((MEQUAL) $HEAD_LENGTH 0.5))))
            ((MDO) $IQ NIL NIL NIL $LQDA NIL
             ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
              ((MSETQ) $QT (($QDA ARRAY) $IQ))
              ((MSETQ) $QTOP (($OP) $QT))
              ((MSETQ) $TARGS (($ARGS) $QT))
              ((MCOND) ((MEQUAL) $QTOP $KEY)
               ((MPROGN)
                ((MCOND) ((MGREATERP) (($LENGTH) $TARGS) 1.)
                 ((MRETURN) (($DOERR) "use key(bottom) or key(top) "))
                 T $FALSE)
                ((MSETQ) $TT (($TARGS ARRAY) 1.))
                ((MCOND) ((MEQUAL) $TT $BOTTOM)
                 ((MSETQ) $PTSLIST
                  (($APPEND) $PTSLIST
                   ((MLIST) ((MEQUAL) $USER_PREAMBLE "set key bottom"))))
                 T
                 ((MCOND) ((MEQUAL) $TT $TOP)
                  ((MSETQ) $PTSLIST
                   (($APPEND) $PTSLIST
                    ((MLIST) ((MEQUAL) $USER_PREAMBLE "set key top"))))
                  T
                  ((MRETURN) (($DOERR) "use key(bottom) or key(top) ")))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $LABEL)
               ((MPROGN) ((MSETQ) $NLABEL T)
                ((MDO) $KL NIL NIL NIL (($LENGTH) $TARGS) NIL
                 ((MPROGN) ((MSETQ) $LAB_ARGS (($TARGS ARRAY) $KL))
                  ((MCOND) ((MEQUAL) (($LENGTH) $LAB_ARGS) 3.)
                   ((MSETQ) $LABELLIST
                    (($APPEND) $LABELLIST
                     ((MLIST)
                      (($APPLY) ((MQUOTE) $LABEL) ((MLIST) $LAB_ARGS)))))
                   T
                   ((MPROGN)
                    ((MSETQ) $ACOLOR
                     ((MQAPPLY ARRAY) (($ARGS) (($LAB_ARGS ARRAY) 4.))
                      1.))
                    ((MSETQ) $LABELLIST
                     (($APPEND) $LABELLIST
                      ((MLIST) ((MEQUAL) $COLOR $ACOLOR))))
                    ((MSETQ) $LABELLIST
                     (($APPEND) $LABELLIST
                      ((MLIST)
                       (($APPLY) ((MQUOTE) $LABEL)
                        ((MLIST) (($REST) $LAB_ARGS ((MMINUS) 1.)))))))
                    ((MSETQ) $LABELLIST
                     (($APPEND) $LABELLIST
                      ((MLIST) ((MEQUAL) $COLOR $BLACK)))))))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $LABEL_ALIGN)
               ((MPROGN)
                ((MCOND) ((MGREATERP) (($LENGTH) $TARGS) 1.)
                 ((MRETURN)
                  (($DOERR)
                   " use label_align(p) where p is l, r, or c "))
                 T $FALSE)
                ((MSETQ) $PL (($TARGS ARRAY) 1.))
                ((MCOND) ((MNOT) (($INLISTP) $PL ((MLIST) $L $R $C)))
                 ((MRETURN)
                  (($DOERR)
                   " use label_align(p) where p is l, r, or c "))
                 T $FALSE)
                ((MCOND) ((MEQUAL) $PL $L) ((MSETQ) $LABADEF $LEFT) T
                 $FALSE)
                ((MCOND) ((MEQUAL) $PL $R) ((MSETQ) $LABADEF $RIGHT) T
                 $FALSE)
                ((MCOND) ((MEQUAL) $PL $C) ((MSETQ) $LABADEF $CENTER) T
                 $FALSE)
                ((MSETQ) $LABELLIST
                 (($APPEND) $LABELLIST
                  ((MLIST) ((MEQUAL) $LABEL_ALIGNMENT $LABADEF)))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $EX1)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 4.)
                 ((MPROGN)
                  (($PRINT)
                   "ex1 syntax: ex1(expr,x,x1,x2,lc(c),lw(n),lk(string) ) ")
                  (($PRINT) "first four args required")
                  ((MRETURN)
                   (($DOERR)
                    "only lc(c), lw(n), and lk(string) options can be included")))
                 T $FALSE)
                ((MCOND) ((MGREATERP) $NARGS 7.)
                 ((MRETURN)
                  (($DOERR)
                   "ex1: only lc(c), lw(n), and lk(string) options allowed "))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
                ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "ex1: first arg should not be a list"))
                 T $FALSE)
                ((MSETQ) $HLIM (($FLOAT) (($REST) $ELIST 1.)))
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "ex1: hlim=[x,x1,x2]: x is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR) "ex1: hlim=[x,x1,x2]: x1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR) "ex1: hlim=[x,x1,x2]: x2 is not a number"))
                 T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $EXPLICIT) $ELIST)))
                ((MSETQ) $PR (($REST) $TARGS 4.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "ex1 options: lc(color), lw(n), lk(string) "
                     ((MLIST) $LC $LW $LK)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $IMP1)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 7.)
                 ((MRETURN)
                  (($DOERR)
                   "imp1 syntax: imp1(eqn,x,x1,x2,y,y1,y2,options)"))
                 T $FALSE)
                ((MCOND) ((MGREATERP) $NARGS 10.)
                 ((MRETURN)
                  (($DOERR)
                   "imp1: only lc(c), lw(n), and lk(string) options allowed "))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 7.)))))
                ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "imp1: first arg should not be a list"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($EQNCHECK) (($ELIST ARRAY) 1.)))
                 ((MRETURN)
                  (($DOERR) "imp1: first arg should be an equation "))
                 T $FALSE)
                ((MSETQ) $HLIM (($FLOAT) (($REST) $ELIST 1.)))
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): x must be a symbol"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): x1 must be a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): x2 must be a number"))
                 T $FALSE)
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 4.))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): y must be a symbol"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 5.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): y1 must be a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 6.)))
                 ((MRETURN)
                  (($DOERR)
                   "imp1(eqn,x,x1,x2,y,y1,y2,options): y2 must be a number"))
                 T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $IMPLICIT) $ELIST)))
                ((MSETQ) $PR (($REST) $TARGS 7.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "imp1 options: lc(color), lw(n), lk(string) "
                     ((MLIST) $LC $LW $LK)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $CONTOUR)
               ((MPROGN) (($PRINT) "   contour working... ")
                ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 8.)
                 ((MRETURN)
                  (($DOERR)
                   "contour syntax: contour(expr,x,x1,x2,y,y1,y2,cvals(v1,v2,...),options )
                            or contour(expr,x,x1,x2,y,y1,y2, crange(n,min,max),options )"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($MAKELIST) (($TARGS ARRAY) $JJ) $JJ 1. 7.))
                ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "contour: first arg should be an expression depending on
                            two variables "))
                 T $FALSE)
                ((MCOND) (($EQNCHECK) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "contour: first arg should be an expression "))
                 T $FALSE)
                ((MSETQ) $HLIM (($FLOAT) (($REST) $ELIST 1.)))
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): x must be a symbol"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): x1 must be a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): x2 must be a number"))
                 T $FALSE)
                ((MCOND) (($NUMBERP) (($HLIM ARRAY) 4.))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): y must be a symbol"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 5.)))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): y1 must be a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 6.)))
                 ((MRETURN)
                  (($DOERR)
                   "contour(expr,x,x1,x2,y,y1,y2,options): y2 must be a number"))
                 T $FALSE)
                ((MSETQ) $PL (($TARGS ARRAY) 8.))
                ((MCOND) (($ATOM) $PL)
                 ((MRETURN)
                  (($DOERR)
                   "contour eighth arg: cvals(v1,v2,...) or crange(n,min,max)"))
                 T $FALSE)
                ((MSETQ) $PTSL ((MLIST)))
                ((MCOND) ((MEQUAL) (($OP) $PL) $CVALS)
                 ((MPROGN) ((MSETQ) $TT (($ARGS) $PL))
                  ((MDOIN) $CVAL $TT NIL NIL NIL NIL
                   ((MPROGN) ((MSETQ) $PTL $HLIM)
                    ((MSETQ) $PTL
                     (($CONS) ((MEQUAL) (($FIRST) $ELIST) $CVAL) $PTL))
                    ((MSETQ) $PTSL
                     (($APPEND) $PTSL
                      ((MLIST) (($APPLY) ((MQUOTE) $IMPLICIT) $PTL)))))))
                 T
                 ((MCOND) ((MEQUAL) (($OP) $PL) $CRANGE)
                  ((MPROGN) ((MSETQ) $TT (($ARGS) $PL))
                   ((MCOND) ((MNOTEQUAL) (($LENGTH) $TT) 3.)
                    ((MRETURN)
                     (($DOERR)
                      "contour last arg: cvals(v1,...) or crange(n,min,max)"))
                    T $FALSE)
                   ((MSETQ) $CNUM (($FIRST) $TT))
                   ((MCOND) ((MNOT) (($INTEGERP) $CNUM))
                    ((MRETURN)
                     (($DOERR)
                      "crange(n,min,max): n must be literal integer, like 10"))
                    T $FALSE)
                   ((MCOND) ((MEQUAL) $CNUM 0.)
                    ((MRETURN)
                     (($DOERR) "crange(n,min,max): n cannot be zero "))
                    T $FALSE)
                   ((MCOND) ((MNOT) (($NUMBERP) (($TT ARRAY) 2.)))
                    ((MRETURN)
                     (($DOERR)
                      "crange(n,min,max): min must be a number"))
                    T $FALSE)
                   ((MCOND) ((MNOT) (($NUMBERP) (($TT ARRAY) 3.)))
                    ((MRETURN)
                     (($DOERR)
                      "crange(n,min,max): max must be a number"))
                    T $FALSE)
                   ((MCOND)
                    ((MLESSP) (($TT ARRAY) 3.) (($TT ARRAY) 2.))
                    ((MRETURN)
                     (($DOERR)
                      "crange(n,min,max): max must be greater than min "))
                    T $FALSE)
                   ((MSETQ) $CDV
                    (($FLOAT)
                     ((MABS)
                      ((MQUOTIENT)
                       ((MPLUS) (($TT ARRAY) 3.)
                        ((MMINUS) (($TT ARRAY) 2.)))
                       $CNUM))))
                   ((MDO) $KK NIL NIL NIL $CNUM NIL
                    ((MPROGN) ((MSETQ) $PTL $HLIM)
                     ((MSETQ) $CVAL
                      ((MPLUS) (($TT ARRAY) 2.)
                       ((MTIMES) ((MPLUS) $KK ((MMINUS) 1.)) $CDV)))
                     ((MSETQ) $PTL
                      (($CONS) ((MEQUAL) (($FIRST) $ELIST) $CVAL) $PTL))
                     ((MSETQ) $PTSL
                      (($APPEND) $PTSL
                       ((MLIST) (($APPLY) ((MQUOTE) $IMPLICIT) $PTL)))))))
                  T
                  ((MRETURN)
                   (($DOERR)
                    "contour last arg: cvals(v1,...) or crange(n,min,max)"))))
                ((MSETQ) $MKGRID NIL) ((MSETQ) $MKXAXIS NIL)
                ((MSETQ) $MKYAXIS NIL)
                ((MSETQ) $PR (($REST) $TARGS 8.))
                ((MSETQ) $LP (($LENGTH) $PR)) ((MSETQ) $NLW NIL)
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "contour options: lc(color), lw(n), add(options) "
                     ((MLIST) $LC $LW $ADD)))
                   ((MRETURN)) T $FALSE)
                  ((MDO) $KK NIL NIL NIL $LP NIL
                   ((MPROGN) ((MSETQ) $CT (($PR ARRAY) $KK))
                    ((MSETQ) $CTOP (($OP) $CT))
                    ((MSETQ) $CTARGS (($ARGS) $CT))
                    ((MCOND) ((MEQUAL) $CTOP $LC) (($SETNPC) $CTARGS) T
                     $FALSE)
                    ((MCOND) ((MEQUAL) $CTOP $LW)
                     ((MCOND) ((MEQUAL) (($LENGTH) $CTARGS) 1.)
                      ((MPROGN) ((MSETQ) $NLW T)
                       ((MSETQ) $PTSL
                        (($CONS)
                         ((MEQUAL) $LINE_WIDTH (($CTARGS ARRAY) 1.))
                         $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL
                         ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)))))
                      T
                      ((MRETURN) (($DOERR) "use lw(5) for example ")))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $CTOP $ADD)
                     ((MDO) $LL NIL NIL NIL (($LENGTH) $CTARGS) NIL
                      ((MCOND) ((MEQUAL) (($CTARGS ARRAY) $LL) $GRID)
                       ((MSETQ) $MKGRID T) T
                       ((MCOND) ((MEQUAL) (($CTARGS ARRAY) $LL) $XAXIS)
                        ((MSETQ) $MKXAXIS T) T
                        ((MCOND)
                         ((MEQUAL) (($CTARGS ARRAY) $LL) $YAXIS)
                         ((MSETQ) $MKYAXIS T) T
                         ((MCOND)
                          ((MEQUAL) (($CTARGS ARRAY) $LL) $XYAXES)
                          ((MPROGN) ((MSETQ) $MKXAXIS T)
                           ((MSETQ) $MKYAXIS T))
                          T
                          ((MRETURN)
                           (($DOERR)
                            "contour: add(grid,xaxis,yaxis,xyaxes) ")))))))
                     T $FALSE))))
                 T $FALSE)
                ((MCOND) ((MNOT) $NLW)
                 ((MPROGN)
                  ((MSETQ) $PTSL
                   (($CONS) ((MEQUAL) $LINE_WIDTH 1.) $PTSL))
                  ((MSETQ) $PTSL
                   (($APPEND) $PTSL
                    ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)))))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $PARA)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 5.)
                 ((MPROGN)
                  (($PRINT)
                   "para syntax: para(xofu,yofu,u,u1,u2,lc(c),lw(n),lk(string) ) ")
                  (($PRINT) "first five args are required")
                  ((MRETURN)
                   (($DOERR)
                    "only lc(c), lw(n), and lk(string) options can be included")))
                 T $FALSE)
                ((MCOND) ((MGREATERP) $NARGS 8.)
                 ((MRETURN)
                  (($DOERR)
                   "para: only lc(c), lw(n), and lk(string) options allowed "))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 5.)))))
                ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "para: first arg should not be a list"))
                 T $FALSE)
                ((MSETQ) $ULIM (($FLOAT) (($REST) $ELIST 2.)))
                ((MCOND) (($NUMBERP) (($ULIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "para: ulim=[var,var1,var2]: var is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR)
                   "para: ulim=[var,var1,var2]: var1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR)
                   "para: ulim=[var,var1,var2]: var2 is not a number"))
                 T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $PARAMETRIC) $ELIST)))
                ((MSETQ) $PR (($REST) $TARGS 5.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "para options: lc(color), lw(n), lk(string) "
                     ((MLIST) $LC $LW $LK)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $POLAR)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 4.)
                 ((MPROGN)
                  (($PRINT)
                   "polar syntax: polar(roftheta,theta,thetamin,thetamax,lc(c),lw(w),lk(string) ) ")
                  (($PRINT) "first four args are required")
                  ((MRETURN)
                   (($DOERR)
                    "only lc(c), lw(n), and lk(string) options can be included")))
                 T $FALSE)
                ((MCOND) ((MGREATERP) $NARGS 7.)
                 ((MRETURN)
                  (($DOERR)
                   "polar: only lc(c), lw(n), and lk(string) options allowed "))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
                ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR) "polar: first arg should not be a list"))
                 T $FALSE)
                ((MSETQ) $ULIM (($FLOAT) (($REST) $ELIST 1.)))
                ((MCOND) (($NUMBERP) (($ULIM ARRAY) 1.))
                 ((MRETURN)
                  (($DOERR)
                   "polar: ulim=[var,var1,var2]: var is a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 2.)))
                 ((MRETURN)
                  (($DOERR)
                   "polar: ulim=[var,var1,var2]: var1 is not a number"))
                 T $FALSE)
                ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 3.)))
                 ((MRETURN)
                  (($DOERR)
                   "polar: ulim=[var,var1,var2]: var2 is not a number"))
                 T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $POLAR) $ELIST)))
                ((MSETQ) $PR (($REST) $TARGS 4.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "polar options: lc(color), lw(n), lk(string) "
                     ((MLIST) $LC $LW $LK)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $CIRCLE)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 3.)
                 ((MRETURN)
                  (($DOERR) "circle: at least three args needed"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 3.)))))
                ((MSETQ) $PR (($REST) $TARGS 3.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MSETQ) $PTSL
                 ((MLIST)
                  (($ELLIPSE) (($ELIST ARRAY) 1.) (($ELIST ARRAY) 2.)
                   (($ELIST ARRAY) 3.) (($ELIST ARRAY) 3.) 0. 360.)))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "circle options: lc(color), lw(n), fill(color) "
                     ((MLIST) $LC $LW $FILL)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $ELLIPSE)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 6.)
                 ((MRETURN)
                  (($DOERR) "ellipse: at least six args needed"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 6.)))))
                ((MSETQ) $PR (($REST) $TARGS 6.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $ELLIPSE) $ELIST)))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "ellipse options: lc(color), lw(n), fill(color) "
                     ((MLIST) $LC $LW $FILL)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $LINE)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 4.)
                 ((MRETURN)
                  (($DOERR) "line: at least four args needed"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $ELIST) 4.)
                 ((MRETURN)
                  (($DOERR) "line: at least four args needed"))
                 T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST)
                  (($POINTS)
                   ((MLIST) (($REST) $ELIST ((MMINUS) 2.))
                    (($REST) $ELIST 2.)))))
                ((MSETQ) $PR (($REST) $TARGS 4.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "line options: lc(color), lw(n), lk(string) "
                     ((MLIST) $LC $LW $LK)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $POINTS_JOINED T) $PTSL))
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $POINT_TYPE ((MMINUS) 1.)) $PTSL))
                ((MSETQ) $PTSL
                 (($APPEND) $PTSL
                  ((MLIST) ((MEQUAL) $POINTS_JOINED NIL)
                   ((MEQUAL) $POINT_TYPE $PTTDEF))))
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $VECTOR)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 2.)
                 ((MRETURN)
                  (($DOERR) "vector: at least two args needed"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 2.)))))
                ((MDO) $JQ NIL NIL NIL 2. NIL
                 ((MCOND) ((MNOT) (($LISTP) (($ELIST ARRAY) $JQ)))
                  ((MRETURN)
                   (($DOERR) "vector([x,y],[dx,dy],options )"))
                  T $FALSE))
                ((MSETQ) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $VECTOR) $ELIST)))
                ((MSETQ) $PR (($REST) $TARGS 2.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "vector options: lc(color), lw(n), lk(string), 
                            ha(thdeg), hb(v), hl(v), ht(v) "
                     ((MLIST) $LC $LW $LK $HA $HB $HL $HT)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR)
                  ((MDO) $JQ NIL NIL NIL $LP NIL
                   ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                    ((MSETQ) $TT (($PR ARRAY) $JQ))
                    ((MSETQ) $TTOP (($OP) $TT))
                    ((MSETQ) $TTARGS (($ARGS) $TT))
                    ((MCOND) ((MEQUAL) $TTOP $HA)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR) "vector: use ha(45) for example "))
                       T $FALSE)
                      ((MSETQ) $PL (($FLOAT) (($TTARGS ARRAY) 1.)))
                      ((MCOND) ((MNOT) (($NUMBERP) $PL))
                       ((MRETURN)
                        (($DOERR) "vector: use ha(45) for example "))
                       T $FALSE)
                      ((MSETQ) $PTSL
                       (($CONS) ((MEQUAL) $HEAD_ANGLE $PL) $PTSL)))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $HB)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR) "vector: use hb(t) or hb(f) "))
                       T $FALSE)
                      ((MSETQ) $PL (($TTARGS ARRAY) 1.))
                      ((MCOND)
                       ((MNOT) (($INLISTP) $PL ((MLIST) $T $F)))
                       ((MRETURN)
                        (($DOERR) "vector: use hb(t) or hb(f) "))
                       T $FALSE)
                      ((MCOND) ((MEQUAL) $PL $T)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $HEAD_BOTH T) $PTSL))
                       T $FALSE)
                      ((MCOND) ((MEQUAL) $PL $F)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $HEAD_BOTH NIL) $PTSL))
                       T $FALSE))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $HL)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR) "vector: use hl(0.7) for example "))
                       T $FALSE)
                      ((MSETQ) $PL (($FLOAT) (($TTARGS ARRAY) 1.)))
                      ((MCOND) ((MNOT) (($NUMBERP) $PL))
                       ((MRETURN)
                        (($DOERR) "vector: use hl(0.7) for example "))
                       T $FALSE)
                      ((MSETQ) $PTSL
                       (($CONS) ((MEQUAL) $HEAD_LENGTH $PL) $PTSL)))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $HT)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR)
                         "vector: use ht(e), ht(f), or ht(n) "))
                       T $FALSE)
                      ((MSETQ) $PL (($TTARGS ARRAY) 1.))
                      ((MCOND)
                       ((MNOT) (($INLISTP) $PL ((MLIST) $E $F $N)))
                       ((MRETURN)
                        (($DOERR)
                         "vector: use ht(e), ht(f), or ht(n) "))
                       T $FALSE)
                      ((MCOND) ((MEQUAL) $PL $E)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $HEAD_TYPE $EMPTY) $PTSL))
                       T $FALSE)
                      ((MCOND) ((MEQUAL) $PL $F)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $HEAD_TYPE $FILLED) $PTSL))
                       T $FALSE)
                      ((MCOND) ((MEQUAL) $PL $N)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $HEAD_TYPE $NOFILLED) $PTSL))
                       T $FALSE))
                     T $FALSE))))
                 T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $ARROWHEAD)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 4.)
                 ((MRETURN)
                  (($DOERR) "try arrowhead(0,0,45,0.3) for example "))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($FLOAT)
                  (($REST) $TARGS
                   ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.))))))
                ((MDO) $JQ NIL NIL NIL 4. NIL
                 ((MCOND) ((MNOT) (($NUMBERP) (($ELIST ARRAY) $JQ)))
                  ((MRETURN)
                   (($DOERR) "arrowhead: first 4 args must be numbers"))
                  T $FALSE))
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PHI 0.44) ((MSETQ) $XX (($ELIST ARRAY) 1.))
                ((MSETQ) $YY (($ELIST ARRAY) 2.))
                ((MSETQ) $TH
                 (($FLOAT)
                  ((MQUOTIENT) ((MTIMES) $%PI (($ELIST ARRAY) 3.))
                   180.)))
                ((MSETQ) $SA (($ELIST ARRAY) 4.))
                ((MSETQ) $AX
                 ((MTIMES) $SA ((%COS) ((MPLUS) $TH ((MMINUS) $PHI)))))
                ((MSETQ) $AY
                 ((MTIMES) $SA ((%SIN) ((MPLUS) $TH ((MMINUS) $PHI)))))
                ((MSETQ) $BX
                 ((MTIMES) $SA ((%COS) ((MPLUS) $TH $PHI))))
                ((MSETQ) $BY
                 ((MTIMES) $SA ((%SIN) ((MPLUS) $TH $PHI))))
                ((MSETQ) $PTSL
                 ((MLIST)
                  (($POINTS)
                   ((MLIST)
                    ((MLIST) ((MPLUS) $XX ((MMINUS) $AX))
                     ((MPLUS) $YY ((MMINUS) $AY)))
                    ((MLIST) $XX $YY)))
                  (($POINTS)
                   ((MLIST)
                    ((MLIST) ((MPLUS) $XX ((MMINUS) $BX))
                     ((MPLUS) $YY ((MMINUS) $BY)))
                    ((MLIST) $XX $YY)))))
                ((MSETQ) $PR (($REST) $TARGS 4.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "arrowhead options: lc(color), lw(n)  "
                     ((MLIST) $LC $LW)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $POINTS_JOINED T) $PTSL))
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $POINT_TYPE ((MMINUS) 1.)) $PTSL))
                ((MSETQ) $PTSL
                 (($APPEND) $PTSL
                  ((MLIST) ((MEQUAL) $POINTS_JOINED NIL)
                   ((MEQUAL) $POINT_TYPE $PTTDEF))))
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $RECT)
               ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND) ((MLESSP) $NARGS 4.)
                 ((MRETURN)
                  (($DOERR) "rect: at least four args needed"))
                 T $FALSE)
                ((MSETQ) $ELIST
                 (($REST) $TARGS
                  ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $ELIST) 4.)
                 ((MRETURN)
                  (($DOERR) "rect: at least four args needed"))
                 T $FALSE)
                ((MSETQ) $PR (($REST) $TARGS 4.))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MSETQ) $PTSL
                 ((MLIST)
                  (($RECTANGLE) (($REST) $ELIST ((MMINUS) 2.))
                   (($REST) $ELIST 2.))))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "rect options: lc(color), lw(n), fill(color) "
                     ((MLIST) $LC $LW $FILL)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $POLY)
               ((MPROGN) ((MSETQ) $PL (($FIRST) $TARGS))
                ((MCOND) ((MNOT) (($LISTP) $PL))
                 ((MRETURN)
                  (($DOERR) "first arg of poly:[ [x0,y0],[x1,y1],...]"))
                 T $FALSE)
                ((MSETQ) $PL1 (($FIRST) $PL))
                ((MCOND) ((MNOT) (($LISTP) $PL1))
                 ((MRETURN)
                  (($DOERR) "first arg of poly:[ [x0,y0],[x1,y1],...]"))
                 T $FALSE)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $PL1) 2.)
                 ((MRETURN)
                  (($DOERR) "first arg of poly:[ [x0,y0],[x1,y1],...]"))
                 T $FALSE)
                ((MSETQ) $PTSL ((MLIST) (($POLYGON) $PL)))
                ((MSETQ) $PR (($REST) $TARGS))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "poly options: lc(color), lw(n), fill(color) "
                     ((MLIST) $LC $LW $FILL)))
                   ((MRETURN)) T $FALSE)
                  (($SETOPTIONS) $PR))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $PTS)
               ((MPROGN) ((MSETQ) $PL (($FIRST) $TARGS))
                ((MCOND) ((MNOT) (($LISTP) $PL))
                 ((MRETURN)
                  (($DOERR) "first arg of pts must be a list"))
                 T $FALSE)
                ((MCOND) ((MEQUAL) (($LENGTH) $PL) 2.)
                 ((MCOND) ((MNOT) (($LISTP) (($PL ARRAY) 1.)))
                  ((MSETQ) $PL ((MLIST) $PL)) T $FALSE)
                 T $FALSE)
                ((MSETQ) $PTSL ((MLIST) (($POINTS) $PL)))
                ((MSETQ) $PR (($REST) $TARGS))
                ((MSETQ) $LP (($LENGTH) $PR))
                ((MCOND) ((MGREATERP) $LP 0.)
                 ((MPROGN)
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR
                     "pts options: pc(color), ps(size), pk(string), pt(type), pj(lw) "
                     ((MLIST) $PC $PS $PT $PJ $PK)))
                   ((MRETURN)) T $FALSE)
                  ((MDO) $JQ NIL NIL NIL $LP NIL
                   ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                    ((MSETQ) $TT (($PR ARRAY) $JQ))
                    ((MSETQ) $TTOP (($OP) $TT))
                    ((MSETQ) $TTARGS (($ARGS) $TT))
                    ((MCOND) ((MEQUAL) $TTOP $PC)
                     ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                      ((MPROGN)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $COLOR (($TTARGS ARRAY) 1.))
                         $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL
                         ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
                      T
                      ((MRETURN)
                       (($DOERR) "pts: use pc(blue) for example")))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $PS)
                     ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                      ((MPROGN)
                       ((MSETQ) $PTSL
                        (($CONS)
                         ((MEQUAL) $POINT_SIZE (($TTARGS ARRAY) 1.))
                         $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL
                         ((MLIST) ((MEQUAL) $POINT_SIZE $PTSDEF)))))
                      T
                      ((MRETURN)
                       (($DOERR) "pts: use ps(2) for example ")))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $PT)
                     ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                      ((MPROGN)
                       ((MSETQ) $PTSL
                        (($CONS)
                         ((MEQUAL) $POINT_TYPE (($TTARGS ARRAY) 1.))
                         $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL
                         ((MLIST) ((MEQUAL) $POINT_TYPE $PTTDEF)))))
                      T
                      ((MRETURN)
                       (($DOERR) "pts: use pt(3) for example ")))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $PJ)
                     ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                      ((MPROGN)
                       ((MCOND)
                        ((MNOTEQUAL) (($TTARGS ARRAY) 1.) $LWDEF)
                        ((MSETQ) $PTSL
                         (($CONS)
                          ((MEQUAL) $LINE_WIDTH (($TTARGS ARRAY) 1.))
                          $PTSL))
                        T $FALSE)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $POINTS_JOINED T) $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL
                         ((MLIST) ((MEQUAL) $POINTS_JOINED NIL))))
                       ((MCOND)
                        ((MNOTEQUAL) (($TTARGS ARRAY) 1.) $LWDEF)
                        ((MSETQ) $PTSL
                         (($APPEND) $PTSL
                          ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF))))
                        T $FALSE))
                      T
                      ((MRETURN)
                       (($DOERR) "pts: use pj(2) for example ")))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $PK)
                     ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                      ((MPROGN)
                       ((MSETQ) $PTSL
                        (($CONS) ((MEQUAL) $KEY (($TTARGS ARRAY) 1.))
                         $PTSL))
                       ((MSETQ) $PTSL
                        (($APPEND) $PTSL ((MLIST) ((MEQUAL) $KEY "")))))
                      T
                      ((MRETURN)
                       (($DOERR)
                        "pts: use pk(\"case 1\") for example ")))
                     T $FALSE))))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $ERRORBARS)
               ((MPROGN)
                ((MCOND) ((MEQUAL) (($LENGTH) $TARGS) 1.)
                 ((MRETURN) (($DOERR) "errorbars(ptl,dyl,options")) T
                 $FALSE)
                ((MSETQ) $PTL (($FIRST) $TARGS))
                ((MCOND) ((MNOT) (($LISTP) $PTL))
                 ((MRETURN)
                  (($DOERR)
                   "first arg of errorbars must be a list of points"))
                 T $FALSE)
                ((MSETQ) $LE (($LENGTH) $PTL))
                ((MCOND) ((MEQUAL) $LE 2.)
                 ((MCOND) ((MNOT) (($LISTP) (($PTL ARRAY) 1.)))
                  ((MSETQ) $PTL ((MLIST) $PTL)) T $FALSE)
                 T $FALSE)
                ((MSETQ) $LE (($LENGTH) $PTL))
                ((MSETQ) $DYL (($SECOND) $TARGS))
                ((MCOND) ((MNOT) (($LISTP) $DYL))
                 ((MSETQ) $DYL ((MLIST) $DYL)) T $FALSE)
                ((MSETQ) $PTSL
                 ((MLIST) ((MEQUAL) $POINTS_JOINED T)
                  ((MEQUAL) $POINT_TYPE ((MMINUS) 1.))))
                ((MCOND) ((MEQUAL) (($LENGTH) $DYL) 1.)
                 ((MPROGN) ((MSETQ) $DY (($DYL ARRAY) 1.))
                  ((MDO) $JQ NIL NIL NIL (($LENGTH) $PTL) NIL
                   ((MSETQ) $PTSL
                    (($APPEND) $PTSL
                     ((MLIST)
                      (($POINTS)
                       ((MLIST)
                        ((MLIST)
                         ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                         ((MPLUS)
                          ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.)
                          ((MMINUS) $DY)))
                        ((MLIST)
                         ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                         ((MPLUS)
                          ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.) $DY)))))))))
                 T
                 ((MPROGN)
                  ((MCOND) ((MNOTEQUAL) (($LENGTH) $DYL) $LE)
                   ((MRETURN)
                    (($DOERR)
                     "number of errorbars must equal number of points"))
                   T $FALSE)
                  ((MDO) $JQ NIL NIL NIL (($LENGTH) $PTL) NIL
                   ((MSETQ) $PTSL
                    (($APPEND) $PTSL
                     ((MLIST)
                      (($POINTS)
                       ((MLIST)
                        ((MLIST)
                         ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                         ((MPLUS)
                          ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.)
                          ((MMINUS) (($DYL ARRAY) $JQ))))
                        ((MLIST)
                         ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                         ((MPLUS)
                          ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.)
                          (($DYL ARRAY) $JQ)))))))))))
                ((MSETQ) $ERRBLW 1.)
                ((MCOND) ((MGREATERP) (($LENGTH) $TARGS) 2.)
                 ((MPROGN) ((MSETQ) $PR (($REST) $TARGS 2.))
                  ((MCOND)
                   ((MNOT)
                    (($GOODARGS) $PR "errorbars options: lc(c), lw(n) "
                     ((MLIST) $LC $LW)))
                   ((MRETURN)) T $FALSE)
                  ((MSETQ) $LP (($LENGTH) $PR))
                  ((MDO) $KK NIL NIL NIL $LP NIL
                   ((MPROGN) ((MSETQ) $TT (($PR ARRAY) $KK))
                    ((MSETQ) $TTOP (($OP) $TT))
                    ((MSETQ) $TTARGS (($ARGS) $TT))
                    ((MCOND) ((MEQUAL) $TTOP $LC)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR) "errorbars: use lc(red) for example"))
                       T $FALSE)
                      ((MSETQ) $PTSL
                       (($CONS) ((MEQUAL) $COLOR (($TTARGS ARRAY) 1.))
                        $PTSL))
                      ((MSETQ) $PTSL
                       (($APPEND) $PTSL
                        ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
                     T $FALSE)
                    ((MCOND) ((MEQUAL) $TTOP $LW)
                     ((MPROGN)
                      ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                       ((MRETURN)
                        (($DOERR) "errorbars: use lw(2) for example"))
                       T $FALSE)
                      ((MSETQ) $ERRBLW (($TTARGS ARRAY) 1.)))
                     T $FALSE))))
                 T $FALSE)
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $LINE_WIDTH $ERRBLW) $PTSL))
                ((MSETQ) $PTSL
                 (($APPEND) $PTSL
                  ((MLIST) ((MEQUAL) $POINTS_JOINED NIL)
                   ((MEQUAL) $POINT_TYPE $PTTDEF)
                   ((MEQUAL) $LINE_WIDTH $LWDEF))))
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $PIC)
               ((MPROGN)
                ((MCOND) $NPIC
                 ((MRETURN)
                  (($DOERR) "can only be one pic(...) arg to qdraw"))
                 T $FALSE)
                ((MSETQ) $NPIC T) ((MSETQ) $NARGS (($LENGTH) $TARGS))
                ((MCOND)
                 ((MOR) ((MLESSP) $NARGS 2.) ((MGREATERP) $NARGS 3.))
                 ((MRETURN)
                  (($DOERR)
                   "pic args: type ,fname , font(string,size);
                                    type and fname required, font() optional "))
                 T $FALSE)
                ((MSETQ) $PICTYPE (($TARGS ARRAY) 1.))
                ((MCOND)
                 ((MNOT)
                  (($INLISTP) $PICTYPE
                   ((MLIST) $EPS $EPS_COLOR $JPG $PNG)))
                 ((MRETURN)
                  (($DOERR)
                   "pic types are eps, eps_color, jpg, and png "))
                 T $FALSE)
                ((MCOND) ((MEQUAL) $PICTYPE $EPS)
                 ((MSETQ) $PICTYPE $EPS_COLOR) T $FALSE)
                ((MSETQ) $FNAMESTR (($TARGS ARRAY) 2.))
                ((MCOND) ((MNOT) (($STRINGP) $FNAMESTR))
                 ((MRETURN)
                  (($DOERR) "pic file name must be in double quotes "))
                 T $FALSE)
                ((MSETQ) $FNAMELST (($CHARLIST) $FNAMESTR))
                ((MDO) $KK NIL NIL NIL (($LENGTH) $FNAMELST) NIL
                 ((MCOND) ((MEQUAL) (($FNAMELST ARRAY) $KK) ".")
                  ((MRETURN)
                   (($DOERR)
                    "pic file name string cannot contain a period"))
                  T $FALSE))
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $PICLIST
                 (($APPEND) $PICLIST
                  ((MLIST) ((MEQUAL) $TERMINAL $PICTYPE)
                   ((MEQUAL) $FILE_NAME $FNAMESTR))))
                ((MCOND) ((MEQUAL) $NARGS 3.)
                 ((MPROGN) ((MSETQ) $TT (($TARGS ARRAY) 3.))
                  ((MSETQ) $TTOP (($OP) $TT))
                  ((MCOND) ((MNOTEQUAL) $TTOP $FONT)
                   ((MRETURN)
                    (($DOERR) "pic 3rd arg: font(string,size) "))
                   T $FALSE)
                  ((MSETQ) $TTARGS (($ARGS) $TT))
                  ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 2.)
                   ((MRETURN)
                    (($DOERR) "pic 3rd arg: font(string,size)"))
                   T $FALSE)
                  ((MSETQ) $FNTSTR (($TTARGS ARRAY) 1.))
                  ((MCOND) ((MNOT) (($STRINGP) $FNTSTR))
                   ((MRETURN)
                    (($DOERR) "font string must be in double quotes "))
                   T $FALSE)
                  ((MSETQ) $FNTSIZE (($TTARGS ARRAY) 2.))
                  ((MCOND) ((MNOT) (($INTEGERP) $FNTSIZE))
                   ((MRETURN)
                    (($DOERR)
                     "pic: font syntax: size must be a positive integer "))
                   T $FALSE)
                  ((MSETQ) $PICLIST
                   (($APPEND) $PICLIST
                    ((MLIST) ((MEQUAL) $FONT $FNTSTR)
                     ((MEQUAL) $FONT_SIZE $FNTSIZE)))))
                 T $FALSE))
               T $FALSE)
              ((MCOND) ((MEQUAL) $QTOP $MORE)
               ((MSETQ) $MORELIST (($APPEND) $MORELIST $TARGS)) T
               $FALSE)))
            ((MCOND) $ANERR ((MRETURN)) T $FALSE)
            ((MSETQ) $DRLIST
             (($CONS) ((MEQUAL) $NTICKS $NTICKSDEF) $DRLIST))
            ((MCOND) $MKGRID
             ((MSETQ) $DRLIST (($CONS) ((MEQUAL) $GRID T) $DRLIST)) T
             $FALSE)
            ((MSETQ) $DRLIST
             (($CONS)
              ((MEQUAL) $IP_GRID_IN ((MLIST) $IPGRIDDEF $IPGRIDDEF))
              $DRLIST))
            ((MCOND) ((MGREATERP) (($LENGTH) $MORELIST) 0.)
             ((MSETQ) $DRLIST (($APPEND) $DRLIST $MORELIST)) T $FALSE)
            ((MSETQ) $DRLIST (($APPEND) $DRLIST $PTSLIST))
            ((MCOND) ((MAND) $MKXYAXES $MKXAXIS)
             ((MSETQ) $DRLIST
              (($APPEND) $DRLIST
               ((MLIST) ((MEQUAL) $XAXIS T) ((MEQUAL) $XAXIS_WIDTH 2.))))
             T $FALSE)
            ((MCOND) ((MAND) $MKXYAXES $MKYAXIS)
             ((MSETQ) $DRLIST
              (($APPEND) $DRLIST
               ((MLIST) ((MEQUAL) $YAXIS T) ((MEQUAL) $YAXIS_WIDTH 2.))))
             T $FALSE)
            ((MCOND) ((MNOT) $MKEDGE)
             ((MSETQ) $DRLIST
              (($APPEND) $DRLIST
               ((MLIST) ((MEQUAL) $XTICS ((MQUOTE) $NONE))
                ((MEQUAL) $YTICS ((MQUOTE) $NONE))
                ((MEQUAL) $AXIS_BOTTOM NIL) ((MEQUAL) $AXIS_TOP NIL)
                ((MEQUAL) $AXIS_LEFT NIL) ((MEQUAL) $AXIS_RIGHT NIL))))
             T $FALSE)
            ((MCOND) ((MGREATERP) (($LENGTH) $PICLIST) 0.)
             ((MSETQ) $DRLIST (($APPEND) $DRLIST $PICLIST)) T $FALSE)
            ((MCOND) $NLABEL
             ((MPROGN)
              ((MSETQ) $DRLIST
               (($APPEND) $DRLIST ((MLIST) ((MEQUAL) $COLOR $BLACK))))
              ((MSETQ) $DRLIST (($APPEND) $DRLIST $LABELLIST)))
             T $FALSE)
            ((MSETQ) $DRLIST (($APPEND) $RNGLIST $DRLIST)) $DRLIST))) 
(ADDLABEL '$%O17) 
(DSKSETQ $%I18
         '((MDEFINE) (($QDRAW) ((MLIST) $QARGS))
           ((MPROGN) (($APPLY) ((MQUOTE) $QDRAW1) $QARGS)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $DRAW2D) $%%) T
             $FALSE)))) 
(ADDLABEL '$%I18) 
(DSKSETQ $%O18
         '((MDEFINE SIMP) (($QDRAW) ((MLIST) $QARGS))
           ((MPROGN) (($APPLY) ((MQUOTE) $QDRAW1) $QARGS)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $DRAW2D) $%%) T
             $FALSE)))) 
(ADDLABEL '$%O18) 
(DSKSETQ $%I19
         '((MDEFINE) (($WXQDRAW) ((MLIST) $QARGS))
           ((MPROGN) (($APPLY) ((MQUOTE) $QDRAW1) $QARGS)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $WXDRAW2D) $%%)
             T $FALSE)))) 
(ADDLABEL '$%I19) 
(DSKSETQ $%O19
         '((MDEFINE SIMP) (($WXQDRAW) ((MLIST) $QARGS))
           ((MPROGN) (($APPLY) ((MQUOTE) $QDRAW1) $QARGS)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $WXDRAW2D) $%%)
             T $FALSE)))) 
(ADDLABEL '$%O19) 
(DSKSETQ $%I20
         '((MDEFINE) (($QDENSITY) ((MLIST) $QDA))
           ((MPROG)
            ((MLIST) $DDRLIST $DXX $DYY $IMATRIX $II $JJ $LQDA $NXX
             $NYY $QEXPR $XRDX $XX $XX1 $XX2 $XXLIST $XYVALS $YY $YY1
             $YY2 $YRDY $YYLIST)
            ((MSETQ) $LQDA (($LENGTH) $QDA))
            ((MCOND) ((MGREATERP) $LQDA 5.)
             ((MRETURN)
              "qdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
             T $FALSE)
            ((MCOND) ((MLESSP) $LQDA 3.)
             ((MRETURN)
              "qdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
             T $FALSE)
            ((MSETQ) $QEXPR (($QDA ARRAY) 1.))
            ((MSETQ) $XRDX (($QDA ARRAY) 2.))
            ((MSETQ) $XX (($XRDX ARRAY) 1.))
            ((MSETQ) $XX1 (($XRDX ARRAY) 2.))
            ((MSETQ) $XX2 (($XRDX ARRAY) 3.))
            ((MSETQ) $DXX (($XRDX ARRAY) 4.))
            ((MSETQ) $YRDY (($QDA ARRAY) 3.))
            ((MSETQ) $YY (($YRDY ARRAY) 1.))
            ((MSETQ) $YY1 (($YRDY ARRAY) 2.))
            ((MSETQ) $YY2 (($YRDY ARRAY) 3.))
            ((MSETQ) $DYY (($YRDY ARRAY) 4.))
            ((MSETQ) $NXX
             (($FLOOR)
              ((MQUOTIENT) ((MPLUS) $XX2 ((MMINUS) $XX1)) $DXX)))
            ((MSETQ) $NYY
             (($FLOOR)
              ((MQUOTIENT) ((MPLUS) $YY2 ((MMINUS) $YY1)) $DYY)))
            ((MSETQ) $XXLIST
             (($FLOAT)
              (($MAKELIST) ((MPLUS) $XX1 ((MTIMES) $DXX $II)) $II 1.
               $NXX)))
            ((MSETQ) $YYLIST
             (($REVERSE)
              (($FLOAT)
               (($MAKELIST) ((MPLUS) $YY1 ((MTIMES) $DYY $II)) $II 1.
                $NYY))))
            ((MSETQ) $XYVALS
             (($FLOAT)
              (($MAKELIST)
               (($SUBSTITUTE) ((MEQUAL) $YY (($YYLIST ARRAY) $JJ))
                (($MAKELIST)
                 (($SUBSTITUTE) ((MEQUAL) $XX (($XXLIST ARRAY) $II))
                  $QEXPR)
                 $II 1. (($LENGTH) $XXLIST)))
               $JJ 1. (($LENGTH) $YYLIST))))
            ((MSETQ) $IMATRIX (($APPLY) ((MQUOTE) $MATRIX) $XYVALS))
            ((MSETQ) $DDRLIST
             ((MLIST) $IMATRIX ((MLIST) $XX1 $XX2) ((MLIST) $YY1 $YY2)))
            ((MCOND) ((MGREATERP) $LQDA 3.)
             ((MSETQ) $DDRLIST (($APPEND) $DDRLIST (($REST) $QDA 3.)))
             T $FALSE)
            (($APPLY) ((MQUOTE) $QDENSITY1) $DDRLIST)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $DRAW2D) $%%) T
             $FALSE)))) 
(ADDLABEL '$%I20) 
(DSKSETQ $%O20
         '((MDEFINE SIMP) (($QDENSITY) ((MLIST) $QDA))
           ((MPROG)
            ((MLIST) $DDRLIST $DXX $DYY $IMATRIX $II $JJ $LQDA $NXX
             $NYY $QEXPR $XRDX $XX $XX1 $XX2 $XXLIST $XYVALS $YY $YY1
             $YY2 $YRDY $YYLIST)
            ((MSETQ) $LQDA (($LENGTH) $QDA))
            ((MCOND) ((MGREATERP) $LQDA 5.)
             ((MRETURN)
              "qdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
             T $FALSE)
            ((MCOND) ((MLESSP) $LQDA 3.)
             ((MRETURN)
              "qdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
             T $FALSE)
            ((MSETQ) $QEXPR (($QDA ARRAY) 1.))
            ((MSETQ) $XRDX (($QDA ARRAY) 2.))
            ((MSETQ) $XX (($XRDX ARRAY) 1.))
            ((MSETQ) $XX1 (($XRDX ARRAY) 2.))
            ((MSETQ) $XX2 (($XRDX ARRAY) 3.))
            ((MSETQ) $DXX (($XRDX ARRAY) 4.))
            ((MSETQ) $YRDY (($QDA ARRAY) 3.))
            ((MSETQ) $YY (($YRDY ARRAY) 1.))
            ((MSETQ) $YY1 (($YRDY ARRAY) 2.))
            ((MSETQ) $YY2 (($YRDY ARRAY) 3.))
            ((MSETQ) $DYY (($YRDY ARRAY) 4.))
            ((MSETQ) $NXX
             (($FLOOR)
              ((MQUOTIENT) ((MPLUS) $XX2 ((MMINUS) $XX1)) $DXX)))
            ((MSETQ) $NYY
             (($FLOOR)
              ((MQUOTIENT) ((MPLUS) $YY2 ((MMINUS) $YY1)) $DYY)))
            ((MSETQ) $XXLIST
             (($FLOAT)
              (($MAKELIST) ((MPLUS) $XX1 ((MTIMES) $DXX $II)) $II 1.
               $NXX)))
            ((MSETQ) $YYLIST
             (($REVERSE)
              (($FLOAT)
               (($MAKELIST) ((MPLUS) $YY1 ((MTIMES) $DYY $II)) $II 1.
                $NYY))))
            ((MSETQ) $XYVALS
             (($FLOAT)
              (($MAKELIST)
               (($SUBSTITUTE) ((MEQUAL) $YY (($YYLIST ARRAY) $JJ))
                (($MAKELIST)
                 (($SUBSTITUTE) ((MEQUAL) $XX (($XXLIST ARRAY) $II))
                  $QEXPR)
                 $II 1. (($LENGTH) $XXLIST)))
               $JJ 1. (($LENGTH) $YYLIST))))
            ((MSETQ) $IMATRIX (($APPLY) ((MQUOTE) $MATRIX) $XYVALS))
            ((MSETQ) $DDRLIST
             ((MLIST) $IMATRIX ((MLIST) $XX1 $XX2) ((MLIST) $YY1 $YY2)))
            ((MCOND) ((MGREATERP) $LQDA 3.)
             ((MSETQ) $DDRLIST (($APPEND) $DDRLIST (($REST) $QDA 3.)))
             T $FALSE)
            (($APPLY) ((MQUOTE) $QDENSITY1) $DDRLIST)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $DRAW2D) $%%) T
             $FALSE)))) 
(ADDLABEL '$%O20) 
(DSKSETQ $%I21
         '((MDEFINE) (($WXQDENSITY) ((MLIST) $QDA))
           ((MPROG)
            ((MLIST) $DDRLIST $DXX $DYY $IMATRIX $II $JJ $LQDA $NXX
             $NYY $QEXPR $XRDX $XX $XX1 $XX2 $XXLIST $XYVALS $YY $YY1
             $YY2 $YRDY $YYLIST)
            ((MSETQ) $LQDA (($LENGTH) $QDA))
            ((MCOND) ((MGREATERP) $LQDA 5.)
             ((MRETURN)
              "wxqdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
             T $FALSE)
            ((MCOND) ((MLESSP) $LQDA 3.)
             ((MRETURN)
              "wxqdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
             T $FALSE)
            ((MSETQ) $QEXPR (($QDA ARRAY) 1.))
            ((MSETQ) $XRDX (($QDA ARRAY) 2.))
            ((MSETQ) $XX (($XRDX ARRAY) 1.))
            ((MSETQ) $XX1 (($XRDX ARRAY) 2.))
            ((MSETQ) $XX2 (($XRDX ARRAY) 3.))
            ((MSETQ) $DXX (($XRDX ARRAY) 4.))
            ((MSETQ) $YRDY (($QDA ARRAY) 3.))
            ((MSETQ) $YY (($YRDY ARRAY) 1.))
            ((MSETQ) $YY1 (($YRDY ARRAY) 2.))
            ((MSETQ) $YY2 (($YRDY ARRAY) 3.))
            ((MSETQ) $DYY (($YRDY ARRAY) 4.))
            ((MSETQ) $NXX
             (($FLOOR)
              ((MQUOTIENT) ((MPLUS) $XX2 ((MMINUS) $XX1)) $DXX)))
            ((MSETQ) $NYY
             (($FLOOR)
              ((MQUOTIENT) ((MPLUS) $YY2 ((MMINUS) $YY1)) $DYY)))
            ((MSETQ) $XXLIST
             (($FLOAT)
              (($MAKELIST) ((MPLUS) $XX1 ((MTIMES) $DXX $II)) $II 1.
               $NXX)))
            ((MSETQ) $YYLIST
             (($REVERSE)
              (($FLOAT)
               (($MAKELIST) ((MPLUS) $YY1 ((MTIMES) $DYY $II)) $II 1.
                $NYY))))
            ((MSETQ) $XYVALS
             (($FLOAT)
              (($MAKELIST)
               (($SUBSTITUTE) ((MEQUAL) $YY (($YYLIST ARRAY) $JJ))
                (($MAKELIST)
                 (($SUBSTITUTE) ((MEQUAL) $XX (($XXLIST ARRAY) $II))
                  $QEXPR)
                 $II 1. (($LENGTH) $XXLIST)))
               $JJ 1. (($LENGTH) $YYLIST))))
            ((MSETQ) $IMATRIX (($APPLY) ((MQUOTE) $MATRIX) $XYVALS))
            ((MSETQ) $DDRLIST
             ((MLIST) $IMATRIX ((MLIST) $XX1 $XX2) ((MLIST) $YY1 $YY2)))
            ((MCOND) ((MGREATERP) $LQDA 3.)
             ((MSETQ) $DDRLIST (($APPEND) $DDRLIST (($REST) $QDA 3.)))
             T $FALSE)
            (($APPLY) ((MQUOTE) $QDENSITY1) $DDRLIST)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $WXDRAW2D) $%%)
             T $FALSE)))) 
(ADDLABEL '$%I21) 
(DSKSETQ $%O21
         '((MDEFINE SIMP) (($WXQDENSITY) ((MLIST) $QDA))
           ((MPROG)
            ((MLIST) $DDRLIST $DXX $DYY $IMATRIX $II $JJ $LQDA $NXX
             $NYY $QEXPR $XRDX $XX $XX1 $XX2 $XXLIST $XYVALS $YY $YY1
             $YY2 $YRDY $YYLIST)
            ((MSETQ) $LQDA (($LENGTH) $QDA))
            ((MCOND) ((MGREATERP) $LQDA 5.)
             ((MRETURN)
              "wxqdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
             T $FALSE)
            ((MCOND) ((MLESSP) $LQDA 3.)
             ((MRETURN)
              "wxqdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
             T $FALSE)
            ((MSETQ) $QEXPR (($QDA ARRAY) 1.))
            ((MSETQ) $XRDX (($QDA ARRAY) 2.))
            ((MSETQ) $XX (($XRDX ARRAY) 1.))
            ((MSETQ) $XX1 (($XRDX ARRAY) 2.))
            ((MSETQ) $XX2 (($XRDX ARRAY) 3.))
            ((MSETQ) $DXX (($XRDX ARRAY) 4.))
            ((MSETQ) $YRDY (($QDA ARRAY) 3.))
            ((MSETQ) $YY (($YRDY ARRAY) 1.))
            ((MSETQ) $YY1 (($YRDY ARRAY) 2.))
            ((MSETQ) $YY2 (($YRDY ARRAY) 3.))
            ((MSETQ) $DYY (($YRDY ARRAY) 4.))
            ((MSETQ) $NXX
             (($FLOOR)
              ((MQUOTIENT) ((MPLUS) $XX2 ((MMINUS) $XX1)) $DXX)))
            ((MSETQ) $NYY
             (($FLOOR)
              ((MQUOTIENT) ((MPLUS) $YY2 ((MMINUS) $YY1)) $DYY)))
            ((MSETQ) $XXLIST
             (($FLOAT)
              (($MAKELIST) ((MPLUS) $XX1 ((MTIMES) $DXX $II)) $II 1.
               $NXX)))
            ((MSETQ) $YYLIST
             (($REVERSE)
              (($FLOAT)
               (($MAKELIST) ((MPLUS) $YY1 ((MTIMES) $DYY $II)) $II 1.
                $NYY))))
            ((MSETQ) $XYVALS
             (($FLOAT)
              (($MAKELIST)
               (($SUBSTITUTE) ((MEQUAL) $YY (($YYLIST ARRAY) $JJ))
                (($MAKELIST)
                 (($SUBSTITUTE) ((MEQUAL) $XX (($XXLIST ARRAY) $II))
                  $QEXPR)
                 $II 1. (($LENGTH) $XXLIST)))
               $JJ 1. (($LENGTH) $YYLIST))))
            ((MSETQ) $IMATRIX (($APPLY) ((MQUOTE) $MATRIX) $XYVALS))
            ((MSETQ) $DDRLIST
             ((MLIST) $IMATRIX ((MLIST) $XX1 $XX2) ((MLIST) $YY1 $YY2)))
            ((MCOND) ((MGREATERP) $LQDA 3.)
             ((MSETQ) $DDRLIST (($APPEND) $DDRLIST (($REST) $QDA 3.)))
             T $FALSE)
            (($APPLY) ((MQUOTE) $QDENSITY1) $DDRLIST)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $WXDRAW2D) $%%)
             T $FALSE)))) 
(ADDLABEL '$%O21) 
(DSKSETQ $%I22
         '((MDEFINE) (($QDENSITY1) ((MLIST) $QDA))
           ((MPROG)
            ((MLIST) $ANERR $XLIM $YLIM $XX1 $XX2 $YY1 $YY2 $DRLIST
             $FNAMELST $FNAMESTR $LQDA $PALDEF |$Mxy| $PRB $PICTYPE $TT
             $TTOP $TTARGS $FNAMESTR $FNAMELST)
            (($LOCAL) $DOERR)
            ((MDEFINE) (($DOERR) $MSG)
             ((MPROGN) ((MSETQ) $ANERR T) (($PRINT) "...syntax error")
              (($PRINT) $MSG) NIL))
            ((MSETQ) $PALDEF ((MLIST) 1. 3. 8.)) ((MSETQ) $ANERR NIL)
            ((MSETQ) $LQDA (($LENGTH) $QDA))
            ((MCOND) ((MGREATERP) $LQDA 5.)
             ((MRETURN)
              (($DOERR)
               "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)), palette and pic are optional"))
             T $FALSE)
            ((MCOND) ((MLESSP) $LQDA 3.)
             ((MRETURN)
              (($DOERR)
               "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)), palette and pic are optional"))
             T $FALSE)
            ((MSETQ) |$Mxy| (($QDA ARRAY) 1.))
            ((MCOND) ((MNOT) (($MATRIXP) |$Mxy|))
             ((MRETURN)
              (($DOERR)
               "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)),palette and pic are optional "))
             T $FALSE)
            ((MSETQ) $XLIM (($FLOAT) (($QDA ARRAY) 2.)))
            ((MCOND) ((MNOT) (($LISTP) $XLIM))
             ((MRETURN)
              (($DOERR)
               "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)),palette and pic are optional "))
             T $FALSE)
            ((MSETQ) $XX1 (($XLIM ARRAY) 1.))
            ((MSETQ) $XX2 (($XLIM ARRAY) 2.))
            ((MSETQ) $YLIM (($FLOAT) (($QDA ARRAY) 3.)))
            ((MCOND) ((MNOT) (($LISTP) $YLIM))
             ((MRETURN)
              (($DOERR)
               "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)),palette and pic are optional "))
             T $FALSE)
            ((MSETQ) $YY1 (($YLIM ARRAY) 1.))
            ((MSETQ) $YY2 (($YLIM ARRAY) 2.))
            ((MSETQ) $DRLIST
             ((MLIST)
              (($IMAGE) |$Mxy| $XX1 $YY1 ((MPLUS) $XX2 ((MMINUS) $XX1))
               ((MPLUS) $YY2 ((MMINUS) $YY1)))))
            ((MCOND) ((MGREATERP) $LQDA 3.)
             ((MPROGN) ((MSETQ) $PRB (($REST) $QDA 3.))
              ((MDO) $II NIL NIL NIL (($LENGTH) $PRB) NIL
               ((MPROGN) ((MSETQ) $TT (($PRB ARRAY) $II))
                ((MCOND) (($ATOM) $TT)
                 ((MRETURN)
                  (($DOERR)
                   "qdensity1 options: palette(args), pic(args) "))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $TTOP (($OP) $TT))
                ((MSETQ) $TTARGS (($ARGS) $TT))
                ((MCOND) ((MEQUAL) $TTOP $PALETTE)
                 ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                  ((MCOND) ((MEQUAL) (($TTARGS ARRAY) 1.) $GRAY)
                   ((MSETQ) $PALDEF ((MLIST) 3. 3. 3.)) T
                   ((MCOND) ((MEQUAL) (($TTARGS ARRAY) 1.) $COLOR)
                    ((MSETQ) $PALDEF ((MLIST) 7. 5. 15.)) T
                    ((MCOND) ((MEQUAL) (($TTARGS ARRAY) 1.) $BLUE)
                     ((MSETQ) $PALDEF ((MLIST) 1. 3. 8.)) T
                     ((MRETURN)
                      (($DOERR)
                       "palette(gray,color,blue,or n1,n2,n3 ) ")))))
                  T
                  ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 3.)
                   ((MSETQ) $PALDEF
                    ((MLIST) (($TTARGS ARRAY) 1.) (($TTARGS ARRAY) 2.)
                     (($TTARGS ARRAY) 3.)))
                   T
                   ((MRETURN)
                    (($DOERR) "palette(gray,color,blue,or n1,n2,n3 ) "))))
                 T
                 ((MCOND) ((MEQUAL) $TTOP $PIC)
                  ((MPROGN)
                   ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 2.)
                    ((MRETURN)
                     (($DOERR) "pic(type,flname) requires two args"))
                    T $FALSE)
                   ((MSETQ) $PICTYPE (($TTARGS ARRAY) 1.))
                   ((MCOND) ((MEQUAL) $PICTYPE $EPS)
                    ((MSETQ) $PICTYPE $EPS_COLOR) T $FALSE)
                   ((MSETQ) $FNAMESTR (($TTARGS ARRAY) 2.))
                   ((MCOND) ((MNOT) (($STRINGP) $FNAMESTR))
                    ((MRETURN)
                     (($DOERR)
                      "pic file name must be in double quotes "))
                    T $FALSE)
                   ((MSETQ) $FNAMELST (($CHARLIST) $FNAMESTR))
                   ((MDO) $KK NIL NIL NIL (($LENGTH) $FNAMELST) NIL
                    ((MCOND) ((MEQUAL) (($FNAMELST ARRAY) $KK) ".")
                     ((MRETURN)
                      (($DOERR)
                       "pic file name string cannot contain a period"))
                     T $FALSE))
                   ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                   ((MSETQ) $DRLIST
                    (($APPEND) $DRLIST
                     ((MLIST) ((MEQUAL) $TERMINAL $PICTYPE)
                      ((MEQUAL) $FILE_NAME $FNAMESTR)))))
                  T
                  ((MRETURN)
                   (($DOERR)
                    "qdensity1 options: palette(args), pic(args) ")))))))
             T $FALSE)
            ((MSETQ) $DRLIST
             (($CONS) ((MEQUAL) $PALETTE $PALDEF) $DRLIST))
            $DRLIST))) 
(ADDLABEL '$%I22) 
(DSKSETQ $%O22
         '((MDEFINE SIMP) (($QDENSITY1) ((MLIST) $QDA))
           ((MPROG)
            ((MLIST) $ANERR $XLIM $YLIM $XX1 $XX2 $YY1 $YY2 $DRLIST
             $FNAMELST $FNAMESTR $LQDA $PALDEF |$Mxy| $PRB $PICTYPE $TT
             $TTOP $TTARGS $FNAMESTR $FNAMELST)
            (($LOCAL) $DOERR)
            ((MDEFINE) (($DOERR) $MSG)
             ((MPROGN) ((MSETQ) $ANERR T) (($PRINT) "...syntax error")
              (($PRINT) $MSG) NIL))
            ((MSETQ) $PALDEF ((MLIST) 1. 3. 8.)) ((MSETQ) $ANERR NIL)
            ((MSETQ) $LQDA (($LENGTH) $QDA))
            ((MCOND) ((MGREATERP) $LQDA 5.)
             ((MRETURN)
              (($DOERR)
               "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)), palette and pic are optional"))
             T $FALSE)
            ((MCOND) ((MLESSP) $LQDA 3.)
             ((MRETURN)
              (($DOERR)
               "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)), palette and pic are optional"))
             T $FALSE)
            ((MSETQ) |$Mxy| (($QDA ARRAY) 1.))
            ((MCOND) ((MNOT) (($MATRIXP) |$Mxy|))
             ((MRETURN)
              (($DOERR)
               "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)),palette and pic are optional "))
             T $FALSE)
            ((MSETQ) $XLIM (($FLOAT) (($QDA ARRAY) 2.)))
            ((MCOND) ((MNOT) (($LISTP) $XLIM))
             ((MRETURN)
              (($DOERR)
               "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)),palette and pic are optional "))
             T $FALSE)
            ((MSETQ) $XX1 (($XLIM ARRAY) 1.))
            ((MSETQ) $XX2 (($XLIM ARRAY) 2.))
            ((MSETQ) $YLIM (($FLOAT) (($QDA ARRAY) 3.)))
            ((MCOND) ((MNOT) (($LISTP) $YLIM))
             ((MRETURN)
              (($DOERR)
               "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)),palette and pic are optional "))
             T $FALSE)
            ((MSETQ) $YY1 (($YLIM ARRAY) 1.))
            ((MSETQ) $YY2 (($YLIM ARRAY) 2.))
            ((MSETQ) $DRLIST
             ((MLIST)
              (($IMAGE) |$Mxy| $XX1 $YY1 ((MPLUS) $XX2 ((MMINUS) $XX1))
               ((MPLUS) $YY2 ((MMINUS) $YY1)))))
            ((MCOND) ((MGREATERP) $LQDA 3.)
             ((MPROGN) ((MSETQ) $PRB (($REST) $QDA 3.))
              ((MDO) $II NIL NIL NIL (($LENGTH) $PRB) NIL
               ((MPROGN) ((MSETQ) $TT (($PRB ARRAY) $II))
                ((MCOND) (($ATOM) $TT)
                 ((MRETURN)
                  (($DOERR)
                   "qdensity1 options: palette(args), pic(args) "))
                 T $FALSE)
                ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                ((MSETQ) $TTOP (($OP) $TT))
                ((MSETQ) $TTARGS (($ARGS) $TT))
                ((MCOND) ((MEQUAL) $TTOP $PALETTE)
                 ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                  ((MCOND) ((MEQUAL) (($TTARGS ARRAY) 1.) $GRAY)
                   ((MSETQ) $PALDEF ((MLIST) 3. 3. 3.)) T
                   ((MCOND) ((MEQUAL) (($TTARGS ARRAY) 1.) $COLOR)
                    ((MSETQ) $PALDEF ((MLIST) 7. 5. 15.)) T
                    ((MCOND) ((MEQUAL) (($TTARGS ARRAY) 1.) $BLUE)
                     ((MSETQ) $PALDEF ((MLIST) 1. 3. 8.)) T
                     ((MRETURN)
                      (($DOERR)
                       "palette(gray,color,blue,or n1,n2,n3 ) ")))))
                  T
                  ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 3.)
                   ((MSETQ) $PALDEF
                    ((MLIST) (($TTARGS ARRAY) 1.) (($TTARGS ARRAY) 2.)
                     (($TTARGS ARRAY) 3.)))
                   T
                   ((MRETURN)
                    (($DOERR) "palette(gray,color,blue,or n1,n2,n3 ) "))))
                 T
                 ((MCOND) ((MEQUAL) $TTOP $PIC)
                  ((MPROGN)
                   ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 2.)
                    ((MRETURN)
                     (($DOERR) "pic(type,flname) requires two args"))
                    T $FALSE)
                   ((MSETQ) $PICTYPE (($TTARGS ARRAY) 1.))
                   ((MCOND) ((MEQUAL) $PICTYPE $EPS)
                    ((MSETQ) $PICTYPE $EPS_COLOR) T $FALSE)
                   ((MSETQ) $FNAMESTR (($TTARGS ARRAY) 2.))
                   ((MCOND) ((MNOT) (($STRINGP) $FNAMESTR))
                    ((MRETURN)
                     (($DOERR)
                      "pic file name must be in double quotes "))
                    T $FALSE)
                   ((MSETQ) $FNAMELST (($CHARLIST) $FNAMESTR))
                   ((MDO) $KK NIL NIL NIL (($LENGTH) $FNAMELST) NIL
                    ((MCOND) ((MEQUAL) (($FNAMELST ARRAY) $KK) ".")
                     ((MRETURN)
                      (($DOERR)
                       "pic file name string cannot contain a period"))
                     T $FALSE))
                   ((MCOND) $ANERR ((MRETURN)) T $FALSE)
                   ((MSETQ) $DRLIST
                    (($APPEND) $DRLIST
                     ((MLIST) ((MEQUAL) $TERMINAL $PICTYPE)
                      ((MEQUAL) $FILE_NAME $FNAMESTR)))))
                  T
                  ((MRETURN)
                   (($DOERR)
                    "qdensity1 options: palette(args), pic(args) ")))))))
             T $FALSE)
            ((MSETQ) $DRLIST
             (($CONS) ((MEQUAL) $PALETTE $PALDEF) $DRLIST))
            $DRLIST))) 
(ADDLABEL '$%O22) 
(DSKSETQ $%I23
         '((MDEFINE) (($QDENSITY_MAT) ((MLIST) |$qda|))
           ((MPROGN) (($APPLY) ((MQUOTE) $QDENSITY1) |$qda|)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $DRAW2D) $%%) T
             $FALSE)))) 
(ADDLABEL '$%I23) 
(DSKSETQ $%O23
         '((MDEFINE SIMP) (($QDENSITY_MAT) ((MLIST) |$qda|))
           ((MPROGN) (($APPLY) ((MQUOTE) $QDENSITY1) |$qda|)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $DRAW2D) $%%) T
             $FALSE)))) 
(ADDLABEL '$%O23) 
(DSKSETQ $%I24
         '((MDEFINE) (($WXQDENSITY_MAT) ((MLIST) |$qda|))
           ((MPROGN) (($APPLY) ((MQUOTE) $QDENSITY1) |$qda|)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $WXDRAW2D) $%%)
             T $FALSE)))) 
(ADDLABEL '$%I24) 
(DSKSETQ $%O24
         '((MDEFINE SIMP) (($WXQDENSITY_MAT) ((MLIST) |$qda|))
           ((MPROGN) (($APPLY) ((MQUOTE) $QDENSITY1) |$qda|)
            ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $WXDRAW2D) $%%)
             T $FALSE)))) 
(ADDLABEL '$%O24) 
(DSKSETQ $%I25
         '((MDEFINE) (($SHOW_COLORS) $COLOR_LIST $NLW)
           ((MPROG) ((MLIST) |$Nl| $QLIST $XI $VI)
            (($PRINT) " show color list = " $COLOR_LIST)
            ((MSETQ) |$Nl| (($LENGTH) $COLOR_LIST))
            ((MSETQ) $XMAX ((MQUOTIENT) ((MPLUS) 1. |$Nl|) 2.))
            ((MSETQ) $QLIST ((MLIST) (($XR) ((MMINUS) $XMAX) $XMAX)))
            ((MDO) $I NIL NIL NIL |$Nl| NIL
             ((MPROGN) ((MSETQ) $XI ((MPLUS) $I ((MMINUS) $XMAX)))
              ((MSETQ) $VI
               (($LINE) $XI ((MMINUS) 1.) $XI 1.
                (($LC) (($COLOR_LIST ARRAY) $I)) (($LW) $NLW)))
              ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VI)))))
            ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) (($CUT) $ALL))))
            (($APPLY) ((MQUOTE) $QDRAW) $QLIST)))) 
(ADDLABEL '$%I25) 
(DSKSETQ $%O25
         '((MDEFINE SIMP) (($SHOW_COLORS) $COLOR_LIST $NLW)
           ((MPROG) ((MLIST) |$Nl| $QLIST $XI $VI)
            (($PRINT) " show color list = " $COLOR_LIST)
            ((MSETQ) |$Nl| (($LENGTH) $COLOR_LIST))
            ((MSETQ) $XMAX ((MQUOTIENT) ((MPLUS) 1. |$Nl|) 2.))
            ((MSETQ) $QLIST ((MLIST) (($XR) ((MMINUS) $XMAX) $XMAX)))
            ((MDO) $I NIL NIL NIL |$Nl| NIL
             ((MPROGN) ((MSETQ) $XI ((MPLUS) $I ((MMINUS) $XMAX)))
              ((MSETQ) $VI
               (($LINE) $XI ((MMINUS) 1.) $XI 1.
                (($LC) (($COLOR_LIST ARRAY) $I)) (($LW) $NLW)))
              ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VI)))))
            ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) (($CUT) $ALL))))
            (($APPLY) ((MQUOTE) $QDRAW) $QLIST)))) 
(ADDLABEL '$%O25) 
(DSKSETQ $%I26
         '((MDEFINE) (($DEFAULT_COLORS) $NLW)
           (($SHOW_COLORS)
            ((MLIST) $BLUE $RED $TURQUOISE $BROWN $MAGENTA $GREEN
             $BLACK)
            $NLW))) 
(ADDLABEL '$%I26) 
(DSKSETQ $%O26
         '((MDEFINE SIMP) (($DEFAULT_COLORS) $NLW)
           (($SHOW_COLORS)
            ((MLIST) $BLUE $RED $TURQUOISE $BROWN $MAGENTA $GREEN
             $BLACK)
            $NLW))) 
(ADDLABEL '$%O26) 
(DSKSETQ $%I27
         '((MDEFINE) (($DOPLOT1) $NLW)
           (($SHOW_COLORS)
            ((MLIST) $AQUAMARINE $BEIGE $BLUE $BROWN $CYAN $GOLD
             $GOLDENROD $GREEN $KHAKI $MAGENTA $ORANGE $PINK $PLUM
             $PURPLE $RED $SALMON $SKYBLUE $TURQUOISE $VIOLET $YELLOW)
            $NLW))) 
(ADDLABEL '$%I27) 
(DSKSETQ $%O27
         '((MDEFINE SIMP) (($DOPLOT1) $NLW)
           (($SHOW_COLORS)
            ((MLIST) $AQUAMARINE $BEIGE $BLUE $BROWN $CYAN $GOLD
             $GOLDENROD $GREEN $KHAKI $MAGENTA $ORANGE $PINK $PLUM
             $PURPLE $RED $SALMON $SKYBLUE $TURQUOISE $VIOLET $YELLOW)
            $NLW))) 
(ADDLABEL '$%O27) 
(DSKSETQ $%I28
         '((MDEFINE) (($DOPLOT2))
           ((MPROG) ((MLIST) $CC $QLIST $X1 $X2 $Y1 $Y2 $I $VAL)
            ((MSETQ) $CC
             ((MLIST) $AQUAMARINE $BEIGE $BLUE $BROWN $CYAN $GOLD
              $GOLDENROD $GREEN $KHAKI $MAGENTA $ORANGE $PINK $PLUM
              $PURPLE $RED $SALMON $SKYBLUE $TURQUOISE $VIOLET $YELLOW))
            (($PRINT) "this is doplot2 ")
            ((MSETQ) $QLIST
             ((MLIST) (($XR) ((MMINUS) 3.3) 3.3)
              (($YR) ((MMINUS) 3.3) 3.3)))
            ((MSETQ) $Y1 1.) ((MSETQ) $Y2 3.)
            ((MDO) $I 0. NIL NIL 5. NIL
             ((MPROGN) ((MSETQ) $X1 ((MPLUS) ((MMINUS) 3.) $I))
              ((MSETQ) $X2 ((MPLUS) $X1 1.))
              ((MSETQ) $VAL
               (($POLY)
                ((MLIST) ((MLIST) $X1 $Y1) ((MLIST) $X2 $Y1)
                 ((MLIST) $X1 $Y2))
                (($FILL) (($CC ARRAY) ((MPLUS) $I 1.)))))
              ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VAL)))))
            ((MSETQ) $Y1 ((MMINUS) 1.)) ((MSETQ) $Y2 1.)
            ((MDO) $I 0. NIL NIL 5. NIL
             ((MPROGN) ((MSETQ) $X1 ((MPLUS) ((MMINUS) 3.) $I))
              ((MSETQ) $X2 ((MPLUS) $X1 1.))
              ((MSETQ) $VAL
               (($POLY)
                ((MLIST) ((MLIST) $X1 $Y1) ((MLIST) $X1 $Y2)
                 ((MLIST) $X2 $Y2))
                (($FILL) (($CC ARRAY) ((MPLUS) $I 7.)))))
              ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VAL)))))
            ((MSETQ) $Y1 ((MMINUS) 3.)) ((MSETQ) $Y2 ((MMINUS) 1.))
            ((MDO) $I 0. NIL NIL 5. NIL
             ((MPROGN) ((MSETQ) $X1 ((MPLUS) ((MMINUS) 3.) $I))
              ((MSETQ) $X2 ((MPLUS) $X1 1.))
              ((MSETQ) $VAL
               (($POLY)
                ((MLIST) ((MLIST) $X1 $Y1) ((MLIST) $X2 $Y1)
                 ((MLIST) $X1 $Y2))
                (($FILL) (($CC ARRAY) ((MPLUS) $I 13.)))))
              ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VAL)))))
            ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) (($CUT) $ALL))))
            (($APPLY) ((MQUOTE) $QDRAW) $QLIST)))) 
(ADDLABEL '$%I28) 
(DSKSETQ $%O28
         '((MDEFINE SIMP) (($DOPLOT2))
           ((MPROG) ((MLIST) $CC $QLIST $X1 $X2 $Y1 $Y2 $I $VAL)
            ((MSETQ) $CC
             ((MLIST) $AQUAMARINE $BEIGE $BLUE $BROWN $CYAN $GOLD
              $GOLDENROD $GREEN $KHAKI $MAGENTA $ORANGE $PINK $PLUM
              $PURPLE $RED $SALMON $SKYBLUE $TURQUOISE $VIOLET $YELLOW))
            (($PRINT) "this is doplot2 ")
            ((MSETQ) $QLIST
             ((MLIST) (($XR) ((MMINUS) 3.3) 3.3)
              (($YR) ((MMINUS) 3.3) 3.3)))
            ((MSETQ) $Y1 1.) ((MSETQ) $Y2 3.)
            ((MDO) $I 0. NIL NIL 5. NIL
             ((MPROGN) ((MSETQ) $X1 ((MPLUS) ((MMINUS) 3.) $I))
              ((MSETQ) $X2 ((MPLUS) $X1 1.))
              ((MSETQ) $VAL
               (($POLY)
                ((MLIST) ((MLIST) $X1 $Y1) ((MLIST) $X2 $Y1)
                 ((MLIST) $X1 $Y2))
                (($FILL) (($CC ARRAY) ((MPLUS) $I 1.)))))
              ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VAL)))))
            ((MSETQ) $Y1 ((MMINUS) 1.)) ((MSETQ) $Y2 1.)
            ((MDO) $I 0. NIL NIL 5. NIL
             ((MPROGN) ((MSETQ) $X1 ((MPLUS) ((MMINUS) 3.) $I))
              ((MSETQ) $X2 ((MPLUS) $X1 1.))
              ((MSETQ) $VAL
               (($POLY)
                ((MLIST) ((MLIST) $X1 $Y1) ((MLIST) $X1 $Y2)
                 ((MLIST) $X2 $Y2))
                (($FILL) (($CC ARRAY) ((MPLUS) $I 7.)))))
              ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VAL)))))
            ((MSETQ) $Y1 ((MMINUS) 3.)) ((MSETQ) $Y2 ((MMINUS) 1.))
            ((MDO) $I 0. NIL NIL 5. NIL
             ((MPROGN) ((MSETQ) $X1 ((MPLUS) ((MMINUS) 3.) $I))
              ((MSETQ) $X2 ((MPLUS) $X1 1.))
              ((MSETQ) $VAL
               (($POLY)
                ((MLIST) ((MLIST) $X1 $Y1) ((MLIST) $X2 $Y1)
                 ((MLIST) $X1 $Y2))
                (($FILL) (($CC ARRAY) ((MPLUS) $I 13.)))))
              ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VAL)))))
            ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) (($CUT) $ALL))))
            (($APPLY) ((MQUOTE) $QDRAW) $QLIST)))) 
(ADDLABEL '$%O28) 
(DSKSETQ $%I29
         '((MDEFINE) (($POINT_TYPES))
           (($QDRAW) (($XR) ((MMINUS) 2.) 2.) (($YR) ((MMINUS) 4.) 4.)
            (($LABEL_ALIGN) $C)
            (($LABEL) ((MLIST) "1" ((MMINUS) 1.5) 3.5)
             ((MLIST) "2" ((MMINUS) 0.5) 3.5) ((MLIST) "3" 0.5 3.5)
             ((MLIST) "4" 1.5 3.5))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) 2.5)) (($PT) 1.))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) 2.5)) (($PT) 2.))
            (($PTS) ((MLIST) ((MLIST) 0.5 2.5)) (($PT) 3.))
            (($PTS) ((MLIST) ((MLIST) 1.5 2.5)) (($PT) 4.))
            (($LABEL) ((MLIST) "5" ((MMINUS) 1.5) 1.5)
             ((MLIST) "6" ((MMINUS) 0.5) 1.5) ((MLIST) "7" 0.5 1.5)
             ((MLIST) "8" 1.5 1.5))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) 0.5)) (($PT) 5.))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) 0.5)) (($PT) 6.))
            (($PTS) ((MLIST) ((MLIST) 0.5 0.5)) (($PT) 7.))
            (($PTS) ((MLIST) ((MLIST) 1.5 0.5)) (($PT) 8.))
            (($LABEL) ((MLIST) "9" ((MMINUS) 1.5) ((MMINUS) 0.5))
             ((MLIST) "10" ((MMINUS) 0.5) ((MMINUS) 0.5))
             ((MLIST) "11" 0.5 ((MMINUS) 0.5))
             ((MLIST) "12" 1.5 ((MMINUS) 0.5)))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) ((MMINUS) 1.5)))
             (($PT) 9.))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) ((MMINUS) 1.5)))
             (($PT) 10.))
            (($PTS) ((MLIST) ((MLIST) 0.5 ((MMINUS) 1.5))) (($PT) 11.))
            (($PTS) ((MLIST) ((MLIST) 1.5 ((MMINUS) 1.5))) (($PT) 12.))
            (($LABEL) ((MLIST) "13" ((MMINUS) 1.5) ((MMINUS) 2.5))
             ((MLIST) "14" ((MMINUS) 0.5) ((MMINUS) 2.5))
             ((MLIST) "15" 0.5 ((MMINUS) 2.5))
             ((MLIST) "16" 1.5 ((MMINUS) 2.5)))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) ((MMINUS) 3.5)))
             (($PT) 13.))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) ((MMINUS) 3.5)))
             (($PT) 14.))
            (($PTS) ((MLIST) ((MLIST) 0.5 ((MMINUS) 3.5))) (($PT) 15.))
            (($PTS) ((MLIST) ((MLIST) 1.5 ((MMINUS) 3.5))) (($PT) 16.))
            (($CUT) $ALL)))) 
(ADDLABEL '$%I29) 
(DSKSETQ $%O29
         '((MDEFINE SIMP) (($POINT_TYPES))
           (($QDRAW) (($XR) ((MMINUS) 2.) 2.) (($YR) ((MMINUS) 4.) 4.)
            (($LABEL_ALIGN) $C)
            (($LABEL) ((MLIST) "1" ((MMINUS) 1.5) 3.5)
             ((MLIST) "2" ((MMINUS) 0.5) 3.5) ((MLIST) "3" 0.5 3.5)
             ((MLIST) "4" 1.5 3.5))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) 2.5)) (($PT) 1.))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) 2.5)) (($PT) 2.))
            (($PTS) ((MLIST) ((MLIST) 0.5 2.5)) (($PT) 3.))
            (($PTS) ((MLIST) ((MLIST) 1.5 2.5)) (($PT) 4.))
            (($LABEL) ((MLIST) "5" ((MMINUS) 1.5) 1.5)
             ((MLIST) "6" ((MMINUS) 0.5) 1.5) ((MLIST) "7" 0.5 1.5)
             ((MLIST) "8" 1.5 1.5))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) 0.5)) (($PT) 5.))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) 0.5)) (($PT) 6.))
            (($PTS) ((MLIST) ((MLIST) 0.5 0.5)) (($PT) 7.))
            (($PTS) ((MLIST) ((MLIST) 1.5 0.5)) (($PT) 8.))
            (($LABEL) ((MLIST) "9" ((MMINUS) 1.5) ((MMINUS) 0.5))
             ((MLIST) "10" ((MMINUS) 0.5) ((MMINUS) 0.5))
             ((MLIST) "11" 0.5 ((MMINUS) 0.5))
             ((MLIST) "12" 1.5 ((MMINUS) 0.5)))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) ((MMINUS) 1.5)))
             (($PT) 9.))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) ((MMINUS) 1.5)))
             (($PT) 10.))
            (($PTS) ((MLIST) ((MLIST) 0.5 ((MMINUS) 1.5))) (($PT) 11.))
            (($PTS) ((MLIST) ((MLIST) 1.5 ((MMINUS) 1.5))) (($PT) 12.))
            (($LABEL) ((MLIST) "13" ((MMINUS) 1.5) ((MMINUS) 2.5))
             ((MLIST) "14" ((MMINUS) 0.5) ((MMINUS) 2.5))
             ((MLIST) "15" 0.5 ((MMINUS) 2.5))
             ((MLIST) "16" 1.5 ((MMINUS) 2.5)))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) ((MMINUS) 3.5)))
             (($PT) 13.))
            (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) ((MMINUS) 3.5)))
             (($PT) 14.))
            (($PTS) ((MLIST) ((MLIST) 0.5 ((MMINUS) 3.5))) (($PT) 15.))
            (($PTS) ((MLIST) ((MLIST) 1.5 ((MMINUS) 3.5))) (($PT) 16.))
            (($CUT) $ALL)))) 
(ADDLABEL '$%O29) 
(DSKSETQ $%I30
         '((MDEFINE)
           (($MAKE_XYGRID) |$Xfunc| |$Yfunc| |$Th0| |$Thf| |$Num|)
           ((MPROG) ((MLIST) |$dTh| |$Xgrid| |$Ygrid|)
            ((MSETQ) $NUMER T)
            ((MSETQ) |$dTh|
             (($FLOAT)
              ((MQUOTIENT) ((MPLUS) |$Thf| ((MMINUS) |$Th0|)) |$Num|)))
            ((MSETQ) |$Xgrid|
             (($MAKELIST)
              ((|$Xfunc|) ((MPLUS) |$Th0| ((MTIMES) $N |$dTh|))) $N 0.
              |$Num|))
            ((MSETQ) |$Ygrid|
             (($MAKELIST)
              ((|$Yfunc|) ((MPLUS) |$Th0| ((MTIMES) $N |$dTh|))) $N 0.
              |$Num|))
            (($MAKELIST)
             ((MLIST) ((|$Xgrid| ARRAY) $N) ((|$Ygrid| ARRAY) $N)) $N
             1. ((MPLUS) |$Num| 1.))))) 
(ADDLABEL '$%I30) 
(DSKSETQ $%O30
         '((MDEFINE SIMP)
           (($MAKE_XYGRID) |$Xfunc| |$Yfunc| |$Th0| |$Thf| |$Num|)
           ((MPROG) ((MLIST) |$dTh| |$Xgrid| |$Ygrid|)
            ((MSETQ) $NUMER T)
            ((MSETQ) |$dTh|
             (($FLOAT)
              ((MQUOTIENT) ((MPLUS) |$Thf| ((MMINUS) |$Th0|)) |$Num|)))
            ((MSETQ) |$Xgrid|
             (($MAKELIST)
              ((|$Xfunc|) ((MPLUS) |$Th0| ((MTIMES) $N |$dTh|))) $N 0.
              |$Num|))
            ((MSETQ) |$Ygrid|
             (($MAKELIST)
              ((|$Yfunc|) ((MPLUS) |$Th0| ((MTIMES) $N |$dTh|))) $N 0.
              |$Num|))
            (($MAKELIST)
             ((MLIST) ((|$Xgrid| ARRAY) $N) ((|$Ygrid| ARRAY) $N)) $N
             1. ((MPLUS) |$Num| 1.))))) 
(ADDLABEL '$%O30) 
(DSKSETQ $%I31
         '((MDEFINE) (($FLL) $X)
           ((MLIST) (($FIRST) $X) (($LAST) $X) (($LENGTH) $X)))) 
(ADDLABEL '$%I31) 
(DSKSETQ $%O31
         '((MDEFINE SIMP) (($FLL) $X)
           ((MLIST) (($FIRST) $X) (($LAST) $X) (($LENGTH) $X)))) 
(ADDLABEL '$%O31) 
(DSKSETQ $%I32
         '((MDEFINE) (($HEAD) $MYLIST)
           ((MPROG) ((MLIST) |$numL| ((MSETQ) $NLEFT 6.))
            ((MSETQ) |$numL| (($LENGTH) $MYLIST))
            (($REST) $MYLIST
             ((MMINUS) ((MPLUS) |$numL| ((MMINUS) $NLEFT))))))) 
(ADDLABEL '$%I32) 
(DSKSETQ $%O32
         '((MDEFINE SIMP) (($HEAD) $MYLIST)
           ((MPROG) ((MLIST) |$numL| ((MSETQ) $NLEFT 6.))
            ((MSETQ) |$numL| (($LENGTH) $MYLIST))
            (($REST) $MYLIST
             ((MMINUS) ((MPLUS) |$numL| ((MMINUS) $NLEFT))))))) 
(ADDLABEL '$%O32) 
(DSKSETQ $%I33
         '((MDEFINE) (($TAIL) $MYLIST)
           ((MPROG) ((MLIST) |$numL| ((MSETQ) $NLEFT 6.))
            ((MSETQ) |$numL| (($LENGTH) $MYLIST))
            (($REST) $MYLIST ((MPLUS) |$numL| ((MMINUS) $NLEFT)))))) 
(ADDLABEL '$%I33) 
(DSKSETQ $%O33
         '((MDEFINE SIMP) (($TAIL) $MYLIST)
           ((MPROG) ((MLIST) |$numL| ((MSETQ) $NLEFT 6.))
            ((MSETQ) |$numL| (($LENGTH) $MYLIST))
            (($REST) $MYLIST ((MPLUS) |$numL| ((MMINUS) $NLEFT)))))) 
(ADDLABEL '$%O33) 
(DSKSETQ $%I34 '(($DECLARE) $FLL $EVFUN)) 
(ADDLABEL '$%I34) 
(DSKSETQ $%O34 '$DONE) 
(ADDLABEL '$%O34) 
(DSKSETQ $%I35 '((MSETQ) $RATSIMP NIL)) 
(ADDLABEL '$%I35) 
(DSKSETQ $%O35 '"/home/fraser/projects/Math/maxima/qdraw.mac") 
(ADDLABEL '$%O35) 
(DSKSETQ $%I36
         '((MDEFINE) (($DV) $FN $VAR)
           ((MLIST) ((MQUOTE) $DIFF) $FN $VR))) 
(ADDLABEL '$%I36) 
(DSKSETQ $%O36
         '((MDEFINE SIMP) (($DV) $FN $VAR)
           ((MLIST) ((MQUOTE) $DIFF) $FN $VR))) 
(ADDLABEL '$%O36) 
(DSKSETQ $%I37 '((MDEFINE) (($F) $X) ((MEXPT) $X 2.))) 
(ADDLABEL '$%I37) 
(DSKSETQ $%O37 '((MDEFINE SIMP) (($F) $X) ((MEXPT) $X 2.))) 
(ADDLABEL '$%O37) 
(DSKSETQ $%I38 '(($DV) (($F) $X) $X)) 
(ADDLABEL '$%I38) 
(DSKSETQ $%O38 '((MLIST SIMP) $DIFF ((MEXPT SIMP) $X 2.) $VR)) 
(ADDLABEL '$%O38) 
(DSKSETQ $%I39 '(($EV) $%)) 
(ADDLABEL '$%I39) 
(DSKSETQ $%O39 '((MLIST SIMP) $DIFF ((MEXPT SIMP) $X 2.) $VR)) 
(ADDLABEL '$%O39) 
(DSKSETQ $%I40 '(($EV) (($EV) (($% ARRAY) 2.)) (($% ARRAY) 1.))) 
(ADDLABEL '$%I40) 
(DSKSETQ $%O40 '((MEXPT SIMP) $X 2.)) 
(ADDLABEL '$%O40) 
(DSKSETQ $%I41 '(($EV) (($EV) (($% ARRAY) 2.)) ((%% ARRAY) 1.))) 
(ADDLABEL '$%I41) 
(DSKSETQ $%I42
         '(($EV) (($EV) (($% ARRAY) 2.)) (($EV) (($% ARRAY) 1.)))) 
(ADDLABEL '$%I42) 
(DSKSETQ $%I43 '((MSETQ) $CV ((%DERIVATIVE) $FN $V 1.))) 
(ADDLABEL '$%I43) 
(DSKSETQ $%O43 '((%DERIVATIVE SIMP) $FN $V 1.)) 
(ADDLABEL '$%O43) 
(DSKSETQ $%I44
         '(($EV)
           (($SUBSTITUTE) ((MEQUAL) $FN (($F) $X)) ((MEQUAL) $V $X) $%))) 
(ADDLABEL '$%I44) 
(DSKSETQ $%O44 '((%DERIVATIVE SIMP) $FN $V 1.)) 
(ADDLABEL '$%O44) 
(DSKSETQ $%I45 '(($GRIND) $%)) 
(ADDLABEL '$%I45) 
(DSKSETQ $%O45 '$DONE) 
(ADDLABEL '$%O45) 
(DSKSETQ $%I46 '(($SUBSTITUTE) ((MEQUAL) $FN (($F) $X)) $%O44)) 
(ADDLABEL '$%I46) 
(DSKSETQ $%O46 '((%DERIVATIVE SIMP) ((MEXPT SIMP) $X 2.) $V 1.)) 
(ADDLABEL '$%O46) 
(DSKSETQ $%I47
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $FN (($F) $X)) ((MEQUAL) $V $X)) $%O44)) 
(ADDLABEL '$%I47) 
(DSKSETQ $%O47 '((%DERIVATIVE SIMP) ((MEXPT SIMP) $X 2.) $X 1.)) 
(ADDLABEL '$%O47) 
(DSKSETQ $%I48 '(($GRIND) $%)) 
(ADDLABEL '$%I48) 
(DSKSETQ $%O48 '$DONE) 
(ADDLABEL '$%O48) 
(DSKSETQ $%I49 '(($EV) $%O47)) 
(ADDLABEL '$%I49) 
(DSKSETQ $%O49 '((%DERIVATIVE SIMP) ((MEXPT SIMP) $X 2.) $X 1.)) 
(ADDLABEL '$%O49) 
(DSKSETQ $%I50 '(($EV) (($EV) $%O47) $DIFF)) 
(ADDLABEL '$%I50) 
(DSKSETQ $%O50 '((MTIMES SIMP) 2. $X)) 
(ADDLABEL '$%O50) 
(DSKSETQ $%I51
         '((MSETQ) $CM
           (($MATRIX) ((MLIST) $I $J $K)
            ((MLIST) ((%DERIVATIVE) $F01 $V01 1.)
             ((%DERIVATIVE) $F02 $V02 1.) ((%DERIVATIVE) $F03 $V03 1.))
            ((MLIST) $F01 $F02 $F03)))) 
(ADDLABEL '$%I51) 
(DSKSETQ $%O51
         '(($MATRIX SIMP) ((MLIST SIMP) $I $J $K)
           ((MLIST SIMP) ((%DERIVATIVE SIMP) $F01 $V01 1.)
            ((%DERIVATIVE SIMP) $F02 $V02 1.)
            ((%DERIVATIVE SIMP) $F03 $V03 1.))
           ((MLIST SIMP) $F01 $F02 $F03))) 
(ADDLABEL '$%O51) 
(DSKSETQ $%I52 '(($GRIND) $%)) 
(ADDLABEL '$%I52) 
(DSKSETQ $%O52 '$DONE) 
(ADDLABEL '$%O52) 
(DSKSETQ $%I53
         '((MDEFINE) (($F) $X $Y $Z)
           ((MPLUS) ((MTIMES) 3. ((MEXPT) $X 2.) ((MEXPT) $Y 3.))
            ((MTIMES) 5. ((MEXPT) $Y 4.) ((MEXPT) $Z 2.))
            ((MTIMES) ((MMINUS) 7.) ((MEXPT) $Z 3.) ((MEXPT) $X 9.))))) 
(ADDLABEL '$%I53) 
(DSKSETQ $%O53
         '((MDEFINE SIMP) (($F) $X $Y $Z)
           ((MPLUS) ((MTIMES) 3. ((MEXPT) $X 2.) ((MEXPT) $Y 3.))
            ((MTIMES) 5. ((MEXPT) $Y 4.) ((MEXPT) $Z 2.))
            ((MTIMES) ((MMINUS) 7.) ((MEXPT) $Z 3.) ((MEXPT) $X 9.))))) 
(ADDLABEL '$%O53) 
(DSKSETQ $%I54 '(($PICKAPART) (($F) $X $Y $Z))) 
(ADDLABEL '$%I54) 
(DSKSETQ $%I55 '(($PICKAPART) (($F) $X $Y $Z) 2.)) 
(ADDLABEL '$%I55) 
(DSKSETQ $%T55 '((MTIMES) 7. ((MEXPT) $X 9.) ((MEXPT) $Z 3.))) 
(ADDLABEL '$%T55) 
(DSKSETQ $%T56 '((MEXPT) $Y 4.)) 
(ADDLABEL '$%T56) 
(DSKSETQ $%T57 '((MEXPT) $Z 2.)) 
(ADDLABEL '$%T57) 
(DSKSETQ $%T58 '((MEXPT) $X 2.)) 
(ADDLABEL '$%T58) 
(DSKSETQ $%T59 '((MEXPT) $Y 3.)) 
(ADDLABEL '$%T59) 
(DSKSETQ $%O59
         '((MPLUS SIMP) ((MTIMES SIMP) -1. $%T55)
           ((MTIMES SIMP) 5. $%T56 $%T57)
           ((MTIMES SIMP) 3. $%T58 $%T59))) 
(ADDLABEL '$%O59) 
(DSKSETQ $%I60 '(($PICKAPART) (($F) $X $Y $Z) 1.)) 
(ADDLABEL '$%I60) 
(DSKSETQ $%T60
         '((MMINUS) ((MTIMES) 7. ((MEXPT) $X 9.) ((MEXPT) $Z 3.)))) 
(ADDLABEL '$%T60) 
(DSKSETQ $%T61 '((MTIMES) 5. ((MEXPT) $Y 4.) ((MEXPT) $Z 2.))) 
(ADDLABEL '$%T61) 
(DSKSETQ $%T62 '((MTIMES) 3. ((MEXPT) $X 2.) ((MEXPT) $Y 3.))) 
(ADDLABEL '$%T62) 
(DSKSETQ $%O62 '((MPLUS SIMP) $%T60 $%T61 $%T62)) 
(ADDLABEL '$%O62) 
(DSKSETQ $%I63 '$CM) 
(ADDLABEL '$%I63) 
(DSKSETQ $%O63
         '(($MATRIX SIMP) ((MLIST SIMP) $I $J $K)
           ((MLIST SIMP) ((%DERIVATIVE SIMP) $F01 $V01 1.)
            ((%DERIVATIVE SIMP) $F02 $V02 1.)
            ((%DERIVATIVE SIMP) $F03 $V03 1.))
           ((MLIST SIMP) $F01 $F02 $F03))) 
(ADDLABEL '$%O63) 
(DSKSETQ $%I64 '(($GRIND) $%)) 
(ADDLABEL '$%I64) 
(DSKSETQ $%O64 '$DONE) 
(ADDLABEL '$%O64) 
(DSKSETQ $%I65
         '((MSETQ) $CM
           (($MATRIX) ((MLIST) $I $J $K)
            ((MLIST) ((%DERIVATIVE) $FN $X 1.)
             ((%DERIVATIVE) $FN $Y 1.) ((%DERIVATIVE) $FN $Z 1.))
            ((MLIST) $FPX $FPY $FPZ)))) 
(ADDLABEL '$%I65) 
(DSKSETQ $%O65
         '(($MATRIX SIMP) ((MLIST SIMP) $I $J $K)
           ((MLIST SIMP) ((%DERIVATIVE SIMP) $FN $X 1.)
            ((%DERIVATIVE SIMP) $FN $Y 1.)
            ((%DERIVATIVE SIMP) $FN $Z 1.))
           ((MLIST SIMP) $FPX $FPY $FPZ))) 
(ADDLABEL '$%O65) 
(DSKSETQ $%I66 '(($F) $X $Y $Z)) 
(ADDLABEL '$%I66) 
(DSKSETQ $%O66
         '((MPLUS SIMP)
           ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.) ((MEXPT SIMP) $Y 3.))
           ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.) ((MEXPT SIMP) $Z 2.))
           ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
            ((MEXPT SIMP) $Z 3.)))) 
(ADDLABEL '$%O66) 
(DSKSETQ $%I67
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $FN (($F) $X $Y $Z))
            ((MEQUAL) $FPX $%T62) ((MEQUAL) $FPY $%T61)
            ((MEQUAL) $FPZ $%T60))
           $%O65)) 
(ADDLABEL '$%I67) 
(DSKSETQ $%O67
         '(($MATRIX SIMP) ((MLIST SIMP) $I $J $K)
           ((MLIST SIMP)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $X 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Y 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Z 1.))
           ((MLIST SIMP)
            ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
             ((MEXPT SIMP) $Y 3.))
            ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
             ((MEXPT SIMP) $Z 2.))
            ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
             ((MEXPT SIMP) $Z 3.))))) 
(ADDLABEL '$%O67) 
(DSKSETQ $%I68
         '(($SUBSTITUTE) ((MLIST) ((MEQUAL) $FN (($F) $X $Y $Z)))
           $%O65)) 
(ADDLABEL '$%I68) 
(DSKSETQ $%O68
         '(($MATRIX SIMP) ((MLIST SIMP) $I $J $K)
           ((MLIST SIMP)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $X 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Y 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Z 1.))
           ((MLIST SIMP) $FPX $FPY $FPZ))) 
(ADDLABEL '$%O68) 
(DSKSETQ $%I69
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $FN (($F) $X $Y $Z))
            ((MEQUAL) $FPX $%T60))
           $%O65)) 
(ADDLABEL '$%I69) 
(DSKSETQ $%O69
         '(($MATRIX SIMP) ((MLIST SIMP) $I $J $K)
           ((MLIST SIMP)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $X 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Y 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Z 1.))
           ((MLIST SIMP)
            ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
             ((MEXPT SIMP) $Z 3.))
            $FPY $FPZ))) 
(ADDLABEL '$%O69) 
(DSKSETQ $%I70
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $FN (($F) $X $Y $Z))
            ((MEQUAL) $FPX $%T60) ((MEQUAL) $FPY $%T61))
           $%O65)) 
(ADDLABEL '$%I70) 
(DSKSETQ $%O70
         '(($MATRIX SIMP) ((MLIST SIMP) $I $J $K)
           ((MLIST SIMP)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $X 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Y 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Z 1.))
           ((MLIST SIMP)
            ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
             ((MEXPT SIMP) $Z 3.))
            ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
             ((MEXPT SIMP) $Z 2.))
            $FPZ))) 
(ADDLABEL '$%O70) 
(DSKSETQ $%I71
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $FN (($F) $X $Y $Z))
            ((MEQUAL) $FPX $%T60) ((MEQUAL) $FPY $%T61)
            ((MEQUAL) $FPZ $%T62))
           $%O65)) 
(ADDLABEL '$%I71) 
(DSKSETQ $%O71
         '(($MATRIX SIMP) ((MLIST SIMP) $I $J $K)
           ((MLIST SIMP)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $X 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Y 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Z 1.))
           ((MLIST SIMP)
            ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
             ((MEXPT SIMP) $Z 3.))
            ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
             ((MEXPT SIMP) $Z 2.))
            ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
             ((MEXPT SIMP) $Y 3.))))) 
(ADDLABEL '$%O71) 
(DSKSETQ $%I72 '(($DETERMINANT) $%)) 
(ADDLABEL '$%I72) 
(DSKSETQ $%O72
         '((MPLUS SIMP)
           ((MTIMES SIMP) $K
            ((MPLUS SIMP)
             ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
              ((MEXPT SIMP) $Z 2.)
              ((%DERIVATIVE SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                 ((MEXPT SIMP) $Z 2.))
                ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 3.)))
               $X 1.))
             ((MTIMES SIMP) 7. ((MEXPT SIMP) $X 9.)
              ((MEXPT SIMP) $Z 3.)
              ((%DERIVATIVE SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                 ((MEXPT SIMP) $Z 2.))
                ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 3.)))
               $Y 1.))))
           ((MTIMES SIMP) $I
            ((MPLUS SIMP)
             ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
              ((MEXPT SIMP) $Y 3.)
              ((%DERIVATIVE SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                 ((MEXPT SIMP) $Z 2.))
                ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 3.)))
               $Y 1.))
             ((MTIMES SIMP) -5. ((MEXPT SIMP) $Y 4.)
              ((MEXPT SIMP) $Z 2.)
              ((%DERIVATIVE SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                 ((MEXPT SIMP) $Z 2.))
                ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 3.)))
               $Z 1.))))
           ((MTIMES SIMP) -1. $J
            ((MPLUS SIMP)
             ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
              ((MEXPT SIMP) $Y 3.)
              ((%DERIVATIVE SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                 ((MEXPT SIMP) $Z 2.))
                ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 3.)))
               $X 1.))
             ((MTIMES SIMP) 7. ((MEXPT SIMP) $X 9.)
              ((MEXPT SIMP) $Z 3.)
              ((%DERIVATIVE SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                 ((MEXPT SIMP) $Z 2.))
                ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 3.)))
               $Z 1.)))))) 
(ADDLABEL '$%O72) 
(DSKSETQ $%I73 '(($EV) (($EV) $%) $DIFF)) 
(ADDLABEL '$%I73) 
(DSKSETQ $%O73
         '((MPLUS SIMP)
           ((MTIMES SIMP) $I
            ((MPLUS SIMP)
             ((MTIMES SIMP) -5. ((MEXPT SIMP) $Y 4.)
              ((MEXPT SIMP) $Z 2.)
              ((MPLUS SIMP) ((MTIMES SIMP) 10. ((MEXPT SIMP) $Y 4.) $Z)
               ((MTIMES SIMP) -21. ((MEXPT SIMP) $X 9.)
                ((MEXPT SIMP) $Z 2.))))
             ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
              ((MEXPT SIMP) $Y 3.)
              ((MPLUS SIMP)
               ((MTIMES SIMP) 9. ((MEXPT SIMP) $X 2.)
                ((MEXPT SIMP) $Y 2.))
               ((MTIMES SIMP) 20. ((MEXPT SIMP) $Y 3.)
                ((MEXPT SIMP) $Z 2.))))))
           ((MTIMES SIMP) -1. $J
            ((MPLUS SIMP)
             ((MTIMES SIMP) 7. ((MEXPT SIMP) $X 9.)
              ((MEXPT SIMP) $Z 3.)
              ((MPLUS SIMP) ((MTIMES SIMP) 10. ((MEXPT SIMP) $Y 4.) $Z)
               ((MTIMES SIMP) -21. ((MEXPT SIMP) $X 9.)
                ((MEXPT SIMP) $Z 2.))))
             ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
              ((MEXPT SIMP) $Y 3.)
              ((MPLUS SIMP) ((MTIMES SIMP) 6. $X ((MEXPT SIMP) $Y 3.))
               ((MTIMES SIMP) -63. ((MEXPT SIMP) $X 8.)
                ((MEXPT SIMP) $Z 3.))))))
           ((MTIMES SIMP) $K
            ((MPLUS SIMP)
             ((MTIMES SIMP) 7. ((MEXPT SIMP) $X 9.)
              ((MEXPT SIMP) $Z 3.)
              ((MPLUS SIMP)
               ((MTIMES SIMP) 9. ((MEXPT SIMP) $X 2.)
                ((MEXPT SIMP) $Y 2.))
               ((MTIMES SIMP) 20. ((MEXPT SIMP) $Y 3.)
                ((MEXPT SIMP) $Z 2.))))
             ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
              ((MEXPT SIMP) $Z 2.)
              ((MPLUS SIMP) ((MTIMES SIMP) 6. $X ((MEXPT SIMP) $Y 3.))
               ((MTIMES SIMP) -63. ((MEXPT SIMP) $X 8.)
                ((MEXPT SIMP) $Z 3.)))))))) 
(ADDLABEL '$%O73) 
(DSKSETQ $%I74 '(($RATSIMP) $%)) 
(ADDLABEL '$%I74) 
(DSKSETQ $%O74
         '((MPLUS SIMP)
           ((MTIMES SIMP) 27. $I ((MEXPT SIMP RATSIMP) $X 4.)
            ((MEXPT SIMP RATSIMP) $Y 5.))
           ((MTIMES SIMP) -18. $J ((MEXPT SIMP RATSIMP) $X 3.)
            ((MEXPT SIMP RATSIMP) $Y 6.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 60. $I ((MEXPT SIMP RATSIMP) $X 2.)
              ((MEXPT SIMP RATSIMP) $Y 6.))
             ((MTIMES SIMP) 30. $K $X ((MEXPT SIMP RATSIMP) $Y 7.)))
            ((MEXPT SIMP RATSIMP) $Z 2.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 63. $K ((MEXPT SIMP RATSIMP) $X 11.)
              ((MEXPT SIMP RATSIMP) $Y 2.))
             ((MTIMES SIMP) 189. $J ((MEXPT SIMP RATSIMP) $X 10.)
              ((MEXPT SIMP RATSIMP) $Y 3.))
             ((MTIMES SIMP) -50. $I ((MEXPT SIMP RATSIMP) $Y 8.)))
            ((MEXPT SIMP RATSIMP) $Z 3.))
           ((MTIMES SIMP)
            ((MPLUS SIMP) ((MTIMES SIMP RATSIMP) 105. $I)
             ((MTIMES SIMP RATSIMP) -70. $J))
            ((MEXPT SIMP RATSIMP) $X 9.) ((MEXPT SIMP RATSIMP) $Y 4.)
            ((MEXPT SIMP RATSIMP) $Z 4.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 147. $J ((MEXPT SIMP RATSIMP) $X 18.))
             ((MTIMES SIMP) 140. $K ((MEXPT SIMP RATSIMP) $X 9.)
              ((MEXPT SIMP RATSIMP) $Y 3.))
             ((MTIMES SIMP) -315. $K ((MEXPT SIMP RATSIMP) $X 8.)
              ((MEXPT SIMP RATSIMP) $Y 4.)))
            ((MEXPT SIMP RATSIMP) $Z 5.)))) 
(ADDLABEL '$%O74) 
(DSKSETQ $%I75 '(($RATEXPAND) $%)) 
(ADDLABEL '$%I75) 
(DSKSETQ $%O75
         '((MPLUS SIMP)
           ((MTIMES SIMP) 27. $I ((MEXPT SIMP RATSIMP) $X 4.)
            ((MEXPT SIMP RATSIMP) $Y 5.))
           ((MTIMES SIMP) -18. $J ((MEXPT SIMP RATSIMP) $X 3.)
            ((MEXPT SIMP RATSIMP) $Y 6.))
           ((MTIMES SIMP) 60. $I ((MEXPT SIMP RATSIMP) $X 2.)
            ((MEXPT SIMP RATSIMP) $Y 6.) ((MEXPT SIMP RATSIMP) $Z 2.))
           ((MTIMES SIMP) 30. $K $X ((MEXPT SIMP RATSIMP) $Y 7.)
            ((MEXPT SIMP RATSIMP) $Z 2.))
           ((MTIMES SIMP) 63. $K ((MEXPT SIMP RATSIMP) $X 11.)
            ((MEXPT SIMP RATSIMP) $Y 2.) ((MEXPT SIMP RATSIMP) $Z 3.))
           ((MTIMES SIMP) 189. $J ((MEXPT SIMP RATSIMP) $X 10.)
            ((MEXPT SIMP RATSIMP) $Y 3.) ((MEXPT SIMP RATSIMP) $Z 3.))
           ((MTIMES SIMP) -50. $I ((MEXPT SIMP RATSIMP) $Y 8.)
            ((MEXPT SIMP RATSIMP) $Z 3.))
           ((MTIMES SIMP) 105. $I ((MEXPT SIMP RATSIMP) $X 9.)
            ((MEXPT SIMP RATSIMP) $Y 4.) ((MEXPT SIMP RATSIMP) $Z 4.))
           ((MTIMES SIMP) -70. $J ((MEXPT SIMP RATSIMP) $X 9.)
            ((MEXPT SIMP RATSIMP) $Y 4.) ((MEXPT SIMP RATSIMP) $Z 4.))
           ((MTIMES SIMP) 147. $J ((MEXPT SIMP RATSIMP) $X 18.)
            ((MEXPT SIMP RATSIMP) $Z 5.))
           ((MTIMES SIMP) 140. $K ((MEXPT SIMP RATSIMP) $X 9.)
            ((MEXPT SIMP RATSIMP) $Y 3.) ((MEXPT SIMP RATSIMP) $Z 5.))
           ((MTIMES SIMP) -315. $K ((MEXPT SIMP RATSIMP) $X 8.)
            ((MEXPT SIMP RATSIMP) $Y 4.) ((MEXPT SIMP RATSIMP) $Z 5.)))) 
(ADDLABEL '$%O75) 
(DSKSETQ $%I76 '(($RATSIMP) $%)) 
(ADDLABEL '$%I76) 
(DSKSETQ $%O76
         '((MPLUS SIMP)
           ((MTIMES SIMP) 27. $I ((MEXPT SIMP RATSIMP) $X 4.)
            ((MEXPT SIMP RATSIMP) $Y 5.))
           ((MTIMES SIMP) -18. $J ((MEXPT SIMP RATSIMP) $X 3.)
            ((MEXPT SIMP RATSIMP) $Y 6.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 60. $I ((MEXPT SIMP RATSIMP) $X 2.)
              ((MEXPT SIMP RATSIMP) $Y 6.))
             ((MTIMES SIMP) 30. $K $X ((MEXPT SIMP RATSIMP) $Y 7.)))
            ((MEXPT SIMP RATSIMP) $Z 2.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 63. $K ((MEXPT SIMP RATSIMP) $X 11.)
              ((MEXPT SIMP RATSIMP) $Y 2.))
             ((MTIMES SIMP) 189. $J ((MEXPT SIMP RATSIMP) $X 10.)
              ((MEXPT SIMP RATSIMP) $Y 3.))
             ((MTIMES SIMP) -50. $I ((MEXPT SIMP RATSIMP) $Y 8.)))
            ((MEXPT SIMP RATSIMP) $Z 3.))
           ((MTIMES SIMP)
            ((MPLUS SIMP) ((MTIMES SIMP RATSIMP) 105. $I)
             ((MTIMES SIMP RATSIMP) -70. $J))
            ((MEXPT SIMP RATSIMP) $X 9.) ((MEXPT SIMP RATSIMP) $Y 4.)
            ((MEXPT SIMP RATSIMP) $Z 4.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 147. $J ((MEXPT SIMP RATSIMP) $X 18.))
             ((MTIMES SIMP) 140. $K ((MEXPT SIMP RATSIMP) $X 9.)
              ((MEXPT SIMP RATSIMP) $Y 3.))
             ((MTIMES SIMP) -315. $K ((MEXPT SIMP RATSIMP) $X 8.)
              ((MEXPT SIMP RATSIMP) $Y 4.)))
            ((MEXPT SIMP RATSIMP) $Z 5.)))) 
(ADDLABEL '$%O76) 
(DSKSETQ $%I77 '(($EXPAND) $%)) 
(ADDLABEL '$%I77) 
(DSKSETQ $%O77
         '((MPLUS SIMP)
           ((MTIMES SIMP) 27. $I ((MEXPT SIMP RATSIMP) $X 4.)
            ((MEXPT SIMP RATSIMP) $Y 5.))
           ((MTIMES SIMP) -18. $J ((MEXPT SIMP RATSIMP) $X 3.)
            ((MEXPT SIMP RATSIMP) $Y 6.))
           ((MTIMES SIMP) 60. $I ((MEXPT SIMP RATSIMP) $X 2.)
            ((MEXPT SIMP RATSIMP) $Y 6.) ((MEXPT SIMP RATSIMP) $Z 2.))
           ((MTIMES SIMP) 30. $K $X ((MEXPT SIMP RATSIMP) $Y 7.)
            ((MEXPT SIMP RATSIMP) $Z 2.))
           ((MTIMES SIMP) 63. $K ((MEXPT SIMP RATSIMP) $X 11.)
            ((MEXPT SIMP RATSIMP) $Y 2.) ((MEXPT SIMP RATSIMP) $Z 3.))
           ((MTIMES SIMP) 189. $J ((MEXPT SIMP RATSIMP) $X 10.)
            ((MEXPT SIMP RATSIMP) $Y 3.) ((MEXPT SIMP RATSIMP) $Z 3.))
           ((MTIMES SIMP) -50. $I ((MEXPT SIMP RATSIMP) $Y 8.)
            ((MEXPT SIMP RATSIMP) $Z 3.))
           ((MTIMES SIMP) 105. $I ((MEXPT SIMP RATSIMP) $X 9.)
            ((MEXPT SIMP RATSIMP) $Y 4.) ((MEXPT SIMP RATSIMP) $Z 4.))
           ((MTIMES SIMP) -70. $J ((MEXPT SIMP RATSIMP) $X 9.)
            ((MEXPT SIMP RATSIMP) $Y 4.) ((MEXPT SIMP RATSIMP) $Z 4.))
           ((MTIMES SIMP) 147. $J ((MEXPT SIMP RATSIMP) $X 18.)
            ((MEXPT SIMP RATSIMP) $Z 5.))
           ((MTIMES SIMP) 140. $K ((MEXPT SIMP RATSIMP) $X 9.)
            ((MEXPT SIMP RATSIMP) $Y 3.) ((MEXPT SIMP RATSIMP) $Z 5.))
           ((MTIMES SIMP) -315. $K ((MEXPT SIMP RATSIMP) $X 8.)
            ((MEXPT SIMP RATSIMP) $Y 4.) ((MEXPT SIMP RATSIMP) $Z 5.)))) 
(ADDLABEL '$%O77) 
(DSKSETQ $%I78 '(($RATSIMP) $%)) 
(ADDLABEL '$%I78) 
(DSKSETQ $%O78
         '((MPLUS SIMP)
           ((MTIMES SIMP) 27. $I ((MEXPT SIMP RATSIMP) $X 4.)
            ((MEXPT SIMP RATSIMP) $Y 5.))
           ((MTIMES SIMP) -18. $J ((MEXPT SIMP RATSIMP) $X 3.)
            ((MEXPT SIMP RATSIMP) $Y 6.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 60. $I ((MEXPT SIMP RATSIMP) $X 2.)
              ((MEXPT SIMP RATSIMP) $Y 6.))
             ((MTIMES SIMP) 30. $K $X ((MEXPT SIMP RATSIMP) $Y 7.)))
            ((MEXPT SIMP RATSIMP) $Z 2.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 63. $K ((MEXPT SIMP RATSIMP) $X 11.)
              ((MEXPT SIMP RATSIMP) $Y 2.))
             ((MTIMES SIMP) 189. $J ((MEXPT SIMP RATSIMP) $X 10.)
              ((MEXPT SIMP RATSIMP) $Y 3.))
             ((MTIMES SIMP) -50. $I ((MEXPT SIMP RATSIMP) $Y 8.)))
            ((MEXPT SIMP RATSIMP) $Z 3.))
           ((MTIMES SIMP)
            ((MPLUS SIMP) ((MTIMES SIMP RATSIMP) 105. $I)
             ((MTIMES SIMP RATSIMP) -70. $J))
            ((MEXPT SIMP RATSIMP) $X 9.) ((MEXPT SIMP RATSIMP) $Y 4.)
            ((MEXPT SIMP RATSIMP) $Z 4.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 147. $J ((MEXPT SIMP RATSIMP) $X 18.))
             ((MTIMES SIMP) 140. $K ((MEXPT SIMP RATSIMP) $X 9.)
              ((MEXPT SIMP RATSIMP) $Y 3.))
             ((MTIMES SIMP) -315. $K ((MEXPT SIMP RATSIMP) $X 8.)
              ((MEXPT SIMP RATSIMP) $Y 4.)))
            ((MEXPT SIMP RATSIMP) $Z 5.)))) 
(ADDLABEL '$%O78) 
(DSKSETQ $%I79 '(($RATSIMP) $%)) 
(ADDLABEL '$%I79) 
(DSKSETQ $%O79
         '((MPLUS SIMP)
           ((MTIMES SIMP) 27. $I ((MEXPT SIMP RATSIMP) $X 4.)
            ((MEXPT SIMP RATSIMP) $Y 5.))
           ((MTIMES SIMP) -18. $J ((MEXPT SIMP RATSIMP) $X 3.)
            ((MEXPT SIMP RATSIMP) $Y 6.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 60. $I ((MEXPT SIMP RATSIMP) $X 2.)
              ((MEXPT SIMP RATSIMP) $Y 6.))
             ((MTIMES SIMP) 30. $K $X ((MEXPT SIMP RATSIMP) $Y 7.)))
            ((MEXPT SIMP RATSIMP) $Z 2.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 63. $K ((MEXPT SIMP RATSIMP) $X 11.)
              ((MEXPT SIMP RATSIMP) $Y 2.))
             ((MTIMES SIMP) 189. $J ((MEXPT SIMP RATSIMP) $X 10.)
              ((MEXPT SIMP RATSIMP) $Y 3.))
             ((MTIMES SIMP) -50. $I ((MEXPT SIMP RATSIMP) $Y 8.)))
            ((MEXPT SIMP RATSIMP) $Z 3.))
           ((MTIMES SIMP)
            ((MPLUS SIMP) ((MTIMES SIMP RATSIMP) 105. $I)
             ((MTIMES SIMP RATSIMP) -70. $J))
            ((MEXPT SIMP RATSIMP) $X 9.) ((MEXPT SIMP RATSIMP) $Y 4.)
            ((MEXPT SIMP RATSIMP) $Z 4.))
           ((MTIMES SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 147. $J ((MEXPT SIMP RATSIMP) $X 18.))
             ((MTIMES SIMP) 140. $K ((MEXPT SIMP RATSIMP) $X 9.)
              ((MEXPT SIMP RATSIMP) $Y 3.))
             ((MTIMES SIMP) -315. $K ((MEXPT SIMP RATSIMP) $X 8.)
              ((MEXPT SIMP RATSIMP) $Y 4.)))
            ((MEXPT SIMP RATSIMP) $Z 5.)))) 
(ADDLABEL '$%O79) 
(DSKSETQ $%I80
         '(($EV) $% ((MEQUAL) $X 5.) ((MEQUAL) $Y 3.) ((MEQUAL) $Z 2.))) 
(ADDLABEL '$%I80) 
(DSKSETQ $%O80
         '((MPLUS SIMP) ((MTIMES SIMP) 4100625. $I)
           ((MTIMES SIMP) 2531250000.
            ((MPLUS SIMP) ((MTIMES SIMP RATSIMP) 105. $I)
             ((MTIMES SIMP RATSIMP) -70. $J)))
           ((MTIMES SIMP) -1640250. $J)
           ((MTIMES SIMP) 32.
            ((MPLUS SIMP) ((MTIMES SIMP) 560760498046875. $J)
             ((MTIMES SIMP) -2583984375. $K)))
           ((MTIMES SIMP) 4.
            ((MPLUS SIMP) ((MTIMES SIMP) 1093500. $I)
             ((MTIMES SIMP) 328050. $K)))
           ((MTIMES SIMP) 8.
            ((MPLUS SIMP) ((MTIMES SIMP) -328050. $I)
             ((MTIMES SIMP) 49833984375. $J)
             ((MTIMES SIMP) 27685546875. $K))))) 
(ADDLABEL '$%O80) 
(DSKSETQ $%I81 '((MSETQ) $I ((MLIST) 1. 0. 0.))) 
(ADDLABEL '$%I81) 
(DSKSETQ $%O81 '((MLIST SIMP) 1. 0. 0.)) 
(ADDLABEL '$%O81) 
(DSKSETQ $%I82 '((MSETQ) $J ((MLIST) 0. 1. 0.))) 
(ADDLABEL '$%I82) 
(DSKSETQ $%O82 '((MLIST SIMP) 0. 1. 0.)) 
(ADDLABEL '$%O82) 
(DSKSETQ $%I83 '((MSETQ) $K ((MLIST) 0. 0. 1.))) 
(ADDLABEL '$%I83) 
(DSKSETQ $%O83 '((MLIST SIMP) 0. 0. 1.)) 
(ADDLABEL '$%O83) 
(DSKSETQ $%I84
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $I $I) ((MEQUAL) $J $J) ((MEQUAL) $K $K))
           $%)) 
(ADDLABEL '$%I84) 
(DSKSETQ $%O84 '((MLIST SIMP) 0. 0. 1.)) 
(ADDLABEL '$%O84) 
(DSKSETQ $%I85
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $I $I) ((MEQUAL) $J $J) ((MEQUAL) $K $K))
           $%O80)) 
(ADDLABEL '$%I85) 
(DSKSETQ $%O85
         '((MPLUS SIMP) ((MTIMES SIMP) 4100625. $I)
           ((MTIMES SIMP) 2531250000.
            ((MPLUS SIMP) ((MTIMES SIMP RATSIMP) 105. $I)
             ((MTIMES SIMP RATSIMP) -70. $J)))
           ((MTIMES SIMP) -1640250. $J)
           ((MTIMES SIMP) 32.
            ((MPLUS SIMP) ((MTIMES SIMP) 560760498046875. $J)
             ((MTIMES SIMP) -2583984375. $K)))
           ((MTIMES SIMP) 4.
            ((MPLUS SIMP) ((MTIMES SIMP) 1093500. $I)
             ((MTIMES SIMP) 328050. $K)))
           ((MTIMES SIMP) 8.
            ((MPLUS SIMP) ((MTIMES SIMP) -328050. $I)
             ((MTIMES SIMP) 49833984375. $J)
             ((MTIMES SIMP) 27685546875. $K))))) 
(ADDLABEL '$%O85) 
(DSKSETQ $%I86 '(($LOAD) $EIGEN)) 
(ADDLABEL '$%I86) 
(DSKSETQ $%O86 '"/usr/share/maxima/5.41.0/share/matrix/eigen.mac") 
(ADDLABEL '$%O86) 
(DSKSETQ $%I87 '((MSETQ) $IV (($COLVEC) ((MLIST) 1. 0. 0.)))) 
(ADDLABEL '$%I87) 
(DSKSETQ $%O87 '(($COLVEC SIMP) ((MLIST SIMP) 1. 0. 0.))) 
(ADDLABEL '$%O87) 
(DSKSETQ $%I88 '((MSETQ) $IV (($COLVECT) ((MLIST) 1. 0. 0.)))) 
(ADDLABEL '$%I88) 
(DSKSETQ $%O88 '(($COLVECT SIMP) ((MLIST SIMP) 1. 0. 0.))) 
(ADDLABEL '$%O88) 
(DSKSETQ $%I89 '((MSETQ) $IV (($COVECT) ((MLIST) 1. 0. 0.)))) 
(ADDLABEL '$%I89) 
(DSKSETQ $%O89
         '(($MATRIX SIMP) ((MLIST SIMP) 1.) ((MLIST SIMP) 0.)
           ((MLIST SIMP) 0.))) 
(ADDLABEL '$%O89) 
(DSKSETQ $%I90 '((MSETQ) $JV (($COVECT) ((MLIST) 0. 1. 0.)))) 
(ADDLABEL '$%I90) 
(DSKSETQ $%O90
         '(($MATRIX SIMP) ((MLIST SIMP) 0.) ((MLIST SIMP) 1.)
           ((MLIST SIMP) 0.))) 
(ADDLABEL '$%O90) 
(DSKSETQ $%I91 '((MSETQ) $KV (($COVECT) ((MLIST) 0. 0. 1.)))) 
(ADDLABEL '$%I91) 
(DSKSETQ $%O91
         '(($MATRIX SIMP) ((MLIST SIMP) 0.) ((MLIST SIMP) 0.)
           ((MLIST SIMP) 1.))) 
(ADDLABEL '$%O91) 
(DSKSETQ $%I92
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $I $IV) ((MEQUAL) $J $JV)
            ((MEQUAL) $K $KV))
           $%O80)) 
(ADDLABEL '$%I92) 
(DSKSETQ $%O92
         '((MPLUS SIMP) ((MTIMES SIMP) 4100625. $I)
           ((MTIMES SIMP) 2531250000.
            ((MPLUS SIMP) ((MTIMES SIMP RATSIMP) 105. $I)
             ((MTIMES SIMP RATSIMP) -70. $J)))
           ((MTIMES SIMP) -1640250. $J)
           ((MTIMES SIMP) 32.
            ((MPLUS SIMP) ((MTIMES SIMP) 560760498046875. $J)
             ((MTIMES SIMP) -2583984375. $K)))
           ((MTIMES SIMP) 4.
            ((MPLUS SIMP) ((MTIMES SIMP) 1093500. $I)
             ((MTIMES SIMP) 328050. $K)))
           ((MTIMES SIMP) 8.
            ((MPLUS SIMP) ((MTIMES SIMP) -328050. $I)
             ((MTIMES SIMP) 49833984375. $J)
             ((MTIMES SIMP) 27685546875. $K))))) 
(ADDLABEL '$%O92) 
(DSKSETQ $%I93 '$IV) 
(ADDLABEL '$%I93) 
(DSKSETQ $%O93
         '(($MATRIX SIMP) ((MLIST SIMP) 1.) ((MLIST SIMP) 0.)
           ((MLIST SIMP) 0.))) 
(ADDLABEL '$%O93) 
(DSKSETQ $%I94 '(($GRIND) $%O80)) 
(ADDLABEL '$%I94) 
(DSKSETQ $%O94 '$DONE) 
(ADDLABEL '$%O94) 
(DSKSETQ $%I95 '(($SUBSTITUTE) ((MEQUAL) $I $IV) $%O80)) 
(ADDLABEL '$%I95) 
(DSKSETQ $%O95
         '((MPLUS SIMP) ((MTIMES SIMP) 4100625. $I)
           ((MTIMES SIMP) 2531250000.
            ((MPLUS SIMP) ((MTIMES SIMP RATSIMP) 105. $I)
             ((MTIMES SIMP RATSIMP) -70. $J)))
           ((MTIMES SIMP) -1640250. $J)
           ((MTIMES SIMP) 32.
            ((MPLUS SIMP) ((MTIMES SIMP) 560760498046875. $J)
             ((MTIMES SIMP) -2583984375. $K)))
           ((MTIMES SIMP) 4.
            ((MPLUS SIMP) ((MTIMES SIMP) 1093500. $I)
             ((MTIMES SIMP) 328050. $K)))
           ((MTIMES SIMP) 8.
            ((MPLUS SIMP) ((MTIMES SIMP) -328050. $I)
             ((MTIMES SIMP) 49833984375. $J)
             ((MTIMES SIMP) 27685546875. $K))))) 
(ADDLABEL '$%O95) 
(DSKSETQ $%I96
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $FN (($F) $X $Y $Z))
            ((MEQUAL) $FPX $%T60) ((MEQUAL) $FPY $%T61)
            ((MEQUAL) $FPZ $%T62))
           $%O65)) 
(ADDLABEL '$%I96) 
(DSKSETQ $%O96
         '(($MATRIX SIMP) ((MLIST SIMP) $I $J $K)
           ((MLIST SIMP)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $X 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Y 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Z 1.))
           ((MLIST SIMP)
            ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
             ((MEXPT SIMP) $Z 3.))
            ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
             ((MEXPT SIMP) $Z 2.))
            ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
             ((MEXPT SIMP) $Y 3.))))) 
(ADDLABEL '$%O96) 
(DSKSETQ $%I97 '(($SUBSTITUTE) ((MEQUAL) $I $IV) $%)) 
(ADDLABEL '$%I97) 
(DSKSETQ $%O97
         '(($MATRIX SIMP) ((MLIST SIMP) $I $J $K)
           ((MLIST SIMP)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $X 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Y 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Z 1.))
           ((MLIST SIMP)
            ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
             ((MEXPT SIMP) $Z 3.))
            ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
             ((MEXPT SIMP) $Z 2.))
            ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
             ((MEXPT SIMP) $Y 3.))))) 
(ADDLABEL '$%O97) 
(DSKSETQ $%I98 '$IV) 
(ADDLABEL '$%I98) 
(DSKSETQ $%O98
         '(($MATRIX SIMP) ((MLIST SIMP) 1.) ((MLIST SIMP) 0.)
           ((MLIST SIMP) 0.))) 
(ADDLABEL '$%O98) 
(DSKSETQ $%I99 '((MEQUAL) (($%O97 ARRAY) 1. 1.) $IV)) 
(ADDLABEL '$%I99) 
(DSKSETQ $%O99
         '((MEQUAL SIMP) $I
           (($MATRIX SIMP) ((MLIST SIMP) 1.) ((MLIST SIMP) 0.)
            ((MLIST SIMP) 0.)))) 
(ADDLABEL '$%O99) 
(DSKSETQ $%I100
         '(($SUBSTITUTE) ((MEQUAL) (($%O97 ARRAY) 1. 1.) $IV) $%O97)) 
(ADDLABEL '$%I100) 
(DSKSETQ $%O100
         '(($MATRIX SIMP)
           ((MLIST SIMP)
            (($MATRIX SIMP) ((MLIST SIMP) 1.) ((MLIST SIMP) 0.)
             ((MLIST SIMP) 0.))
            $J $K)
           ((MLIST SIMP)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $X 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Y 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Z 1.))
           ((MLIST SIMP)
            ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
             ((MEXPT SIMP) $Z 3.))
            ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
             ((MEXPT SIMP) $Z 2.))
            ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
             ((MEXPT SIMP) $Y 3.))))) 
(ADDLABEL '$%O100) 
(DSKSETQ $%I101
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) (($%O97 ARRAY) 1. 2.) $JV)
            ((MEQUAL) (($%O97 ARRAY) 1. 3.) $KV))
           $%O97)) 
(ADDLABEL '$%I101) 
(DSKSETQ $%O101
         '(($MATRIX SIMP)
           ((MLIST SIMP) $I
            (($MATRIX SIMP) ((MLIST SIMP) 0.) ((MLIST SIMP) 1.)
             ((MLIST SIMP) 0.))
            (($MATRIX SIMP) ((MLIST SIMP) 0.) ((MLIST SIMP) 0.)
             ((MLIST SIMP) 1.)))
           ((MLIST SIMP)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $X 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Y 1.)
            ((%DERIVATIVE SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)))
             $Z 1.))
           ((MLIST SIMP)
            ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
             ((MEXPT SIMP) $Z 3.))
            ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
             ((MEXPT SIMP) $Z 2.))
            ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
             ((MEXPT SIMP) $Y 3.))))) 
(ADDLABEL '$%O101) 
(DSKSETQ $%I102 '(($DETERMINANT) $%)) 
(ADDLABEL '$%I102) 
(DSKSETQ $%O102
         '(($MATRIX SIMP)
           ((MLIST SIMP)
            ((MTIMES SIMP) $I
             ((MPLUS SIMP)
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.)
               ((%DERIVATIVE SIMP)
                ((MPLUS SIMP)
                 ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                  ((MEXPT SIMP) $Y 3.))
                 ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                  ((MEXPT SIMP) $Z 2.))
                 ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                  ((MEXPT SIMP) $Z 3.)))
                $Y 1.))
              ((MTIMES SIMP) -5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.)
               ((%DERIVATIVE SIMP)
                ((MPLUS SIMP)
                 ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                  ((MEXPT SIMP) $Y 3.))
                 ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                  ((MEXPT SIMP) $Z 2.))
                 ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                  ((MEXPT SIMP) $Z 3.)))
                $Z 1.)))))
           ((MLIST SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) -3. ((MEXPT SIMP) $X 2.)
              ((MEXPT SIMP) $Y 3.)
              ((%DERIVATIVE SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                 ((MEXPT SIMP) $Z 2.))
                ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 3.)))
               $X 1.))
             ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
              ((MEXPT SIMP) $Z 3.)
              ((%DERIVATIVE SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                 ((MEXPT SIMP) $Z 2.))
                ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 3.)))
               $Z 1.))
             ((MTIMES SIMP) $I
              ((MPLUS SIMP)
               ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                ((MEXPT SIMP) $Y 3.)
                ((%DERIVATIVE SIMP)
                 ((MPLUS SIMP)
                  ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                   ((MEXPT SIMP) $Y 3.))
                  ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                   ((MEXPT SIMP) $Z 2.))
                  ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                   ((MEXPT SIMP) $Z 3.)))
                 $Y 1.))
               ((MTIMES SIMP) -5. ((MEXPT SIMP) $Y 4.)
                ((MEXPT SIMP) $Z 2.)
                ((%DERIVATIVE SIMP)
                 ((MPLUS SIMP)
                  ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                   ((MEXPT SIMP) $Y 3.))
                  ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                   ((MEXPT SIMP) $Z 2.))
                  ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                   ((MEXPT SIMP) $Z 3.)))
                 $Z 1.))))))
           ((MLIST SIMP)
            ((MPLUS SIMP)
             ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
              ((MEXPT SIMP) $Z 2.)
              ((%DERIVATIVE SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                 ((MEXPT SIMP) $Z 2.))
                ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 3.)))
               $X 1.))
             ((MTIMES SIMP) 7. ((MEXPT SIMP) $X 9.)
              ((MEXPT SIMP) $Z 3.)
              ((%DERIVATIVE SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                 ((MEXPT SIMP) $Z 2.))
                ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 3.)))
               $Y 1.))
             ((MTIMES SIMP) $I
              ((MPLUS SIMP)
               ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                ((MEXPT SIMP) $Y 3.)
                ((%DERIVATIVE SIMP)
                 ((MPLUS SIMP)
                  ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                   ((MEXPT SIMP) $Y 3.))
                  ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                   ((MEXPT SIMP) $Z 2.))
                  ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                   ((MEXPT SIMP) $Z 3.)))
                 $Y 1.))
               ((MTIMES SIMP) -5. ((MEXPT SIMP) $Y 4.)
                ((MEXPT SIMP) $Z 2.)
                ((%DERIVATIVE SIMP)
                 ((MPLUS SIMP)
                  ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
                   ((MEXPT SIMP) $Y 3.))
                  ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
                   ((MEXPT SIMP) $Z 2.))
                  ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
                   ((MEXPT SIMP) $Z 3.)))
                 $Z 1.)))))))) 
(ADDLABEL '$%O102) 
(DSKSETQ $%I103 '(($EV) (($EV) $%) $DIFF)) 
(ADDLABEL '$%I103) 
(DSKSETQ $%O103
         '(($MATRIX SIMP)
           ((MLIST SIMP)
            ((MLIST SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) -5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 10. ((MEXPT SIMP) $Y 4.) $Z)
                ((MTIMES SIMP) -21. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 2.))))
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 9. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 2.))
                ((MTIMES SIMP) 20. ((MEXPT SIMP) $Y 3.)
                 ((MEXPT SIMP) $Z 2.)))))
             0. 0.))
           ((MLIST SIMP)
            ((MLIST SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) -5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 10. ((MEXPT SIMP) $Y 4.) $Z)
                ((MTIMES SIMP) -21. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 2.))))
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 10. ((MEXPT SIMP) $Y 4.) $Z)
                ((MTIMES SIMP) -21. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 2.))))
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 9. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 2.))
                ((MTIMES SIMP) 20. ((MEXPT SIMP) $Y 3.)
                 ((MEXPT SIMP) $Z 2.))))
              ((MTIMES SIMP) -3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.)
               ((MPLUS SIMP) ((MTIMES SIMP) 6. $X ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) -63. ((MEXPT SIMP) $X 8.)
                 ((MEXPT SIMP) $Z 3.)))))
             ((MPLUS SIMP)
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 10. ((MEXPT SIMP) $Y 4.) $Z)
                ((MTIMES SIMP) -21. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 2.))))
              ((MTIMES SIMP) -3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.)
               ((MPLUS SIMP) ((MTIMES SIMP) 6. $X ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) -63. ((MEXPT SIMP) $X 8.)
                 ((MEXPT SIMP) $Z 3.)))))
             ((MPLUS SIMP)
              ((MTIMES SIMP) -7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 10. ((MEXPT SIMP) $Y 4.) $Z)
                ((MTIMES SIMP) -21. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 2.))))
              ((MTIMES SIMP) -3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.)
               ((MPLUS SIMP) ((MTIMES SIMP) 6. $X ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) -63. ((MEXPT SIMP) $X 8.)
                 ((MEXPT SIMP) $Z 3.)))))))
           ((MLIST SIMP)
            ((MLIST SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) -5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 10. ((MEXPT SIMP) $Y 4.) $Z)
                ((MTIMES SIMP) -21. ((MEXPT SIMP) $X 9.)
                 ((MEXPT SIMP) $Z 2.))))
              ((MTIMES SIMP) 3. ((MEXPT SIMP) $X 2.)
               ((MEXPT SIMP) $Y 3.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 9. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 2.))
                ((MTIMES SIMP) 20. ((MEXPT SIMP) $Y 3.)
                 ((MEXPT SIMP) $Z 2.))))
              ((MTIMES SIMP) 7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 9. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 2.))
                ((MTIMES SIMP) 20. ((MEXPT SIMP) $Y 3.)
                 ((MEXPT SIMP) $Z 2.))))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.)
               ((MPLUS SIMP) ((MTIMES SIMP) 6. $X ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) -63. ((MEXPT SIMP) $X 8.)
                 ((MEXPT SIMP) $Z 3.)))))
             ((MPLUS SIMP)
              ((MTIMES SIMP) 7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 9. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 2.))
                ((MTIMES SIMP) 20. ((MEXPT SIMP) $Y 3.)
                 ((MEXPT SIMP) $Z 2.))))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.)
               ((MPLUS SIMP) ((MTIMES SIMP) 6. $X ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) -63. ((MEXPT SIMP) $X 8.)
                 ((MEXPT SIMP) $Z 3.)))))
             ((MPLUS SIMP)
              ((MTIMES SIMP) 7. ((MEXPT SIMP) $X 9.)
               ((MEXPT SIMP) $Z 3.)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 9. ((MEXPT SIMP) $X 2.)
                 ((MEXPT SIMP) $Y 2.))
                ((MTIMES SIMP) 20. ((MEXPT SIMP) $Y 3.)
                 ((MEXPT SIMP) $Z 2.))))
              ((MTIMES SIMP) 5. ((MEXPT SIMP) $Y 4.)
               ((MEXPT SIMP) $Z 2.)
               ((MPLUS SIMP) ((MTIMES SIMP) 6. $X ((MEXPT SIMP) $Y 3.))
                ((MTIMES SIMP) -63. ((MEXPT SIMP) $X 8.)
                 ((MEXPT SIMP) $Z 3.))))))))) 
(ADDLABEL '$%O103) 
(DSKSETQ $%I104 '(($RATSIMP) $%)) 
(ADDLABEL '$%I104) 
(DSKSETQ $%O104
         '(($MATRIX SIMP)
           ((MLIST SIMP)
            ((MLIST SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 27. ((MEXPT SIMP RATSIMP) $X 4.)
               ((MEXPT SIMP RATSIMP) $Y 5.))
              ((MTIMES SIMP) 60. ((MEXPT SIMP RATSIMP) $X 2.)
               ((MEXPT SIMP RATSIMP) $Y 6.)
               ((MEXPT SIMP RATSIMP) $Z 2.))
              ((MTIMES SIMP) -50. ((MEXPT SIMP RATSIMP) $Y 8.)
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP) 105. ((MEXPT SIMP RATSIMP) $X 9.)
               ((MEXPT SIMP RATSIMP) $Y 4.)
               ((MEXPT SIMP RATSIMP) $Z 4.)))
             0. 0.))
           ((MLIST SIMP)
            ((MLIST SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 27. ((MEXPT SIMP RATSIMP) $X 4.)
               ((MEXPT SIMP RATSIMP) $Y 5.))
              ((MTIMES SIMP) -18. ((MEXPT SIMP RATSIMP) $X 3.)
               ((MEXPT SIMP RATSIMP) $Y 6.))
              ((MTIMES SIMP) 60. ((MEXPT SIMP RATSIMP) $X 2.)
               ((MEXPT SIMP RATSIMP) $Y 6.)
               ((MEXPT SIMP RATSIMP) $Z 2.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 189. ((MEXPT SIMP RATSIMP) $X 10.)
                 ((MEXPT SIMP RATSIMP) $Y 3.))
                ((MTIMES SIMP) -50. ((MEXPT SIMP RATSIMP) $Y 8.)))
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP) 35. ((MEXPT SIMP RATSIMP) $X 9.)
               ((MEXPT SIMP RATSIMP) $Y 4.)
               ((MEXPT SIMP RATSIMP) $Z 4.))
              ((MTIMES SIMP) 147. ((MEXPT SIMP RATSIMP) $X 18.)
               ((MEXPT SIMP RATSIMP) $Z 5.)))
             ((MPLUS SIMP)
              ((MTIMES SIMP) -18. ((MEXPT SIMP RATSIMP) $X 3.)
               ((MEXPT SIMP RATSIMP) $Y 6.))
              ((MTIMES SIMP) 189. ((MEXPT SIMP RATSIMP) $X 10.)
               ((MEXPT SIMP RATSIMP) $Y 3.)
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP) -70. ((MEXPT SIMP RATSIMP) $X 9.)
               ((MEXPT SIMP RATSIMP) $Y 4.)
               ((MEXPT SIMP RATSIMP) $Z 4.))
              ((MTIMES SIMP) 147. ((MEXPT SIMP RATSIMP) $X 18.)
               ((MEXPT SIMP RATSIMP) $Z 5.)))
             ((MPLUS SIMP)
              ((MTIMES SIMP) -18. ((MEXPT SIMP RATSIMP) $X 3.)
               ((MEXPT SIMP RATSIMP) $Y 6.))
              ((MTIMES SIMP) 189. ((MEXPT SIMP RATSIMP) $X 10.)
               ((MEXPT SIMP RATSIMP) $Y 3.)
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP) -70. ((MEXPT SIMP RATSIMP) $X 9.)
               ((MEXPT SIMP RATSIMP) $Y 4.)
               ((MEXPT SIMP RATSIMP) $Z 4.))
              ((MTIMES SIMP) 147. ((MEXPT SIMP RATSIMP) $X 18.)
               ((MEXPT SIMP RATSIMP) $Z 5.)))))
           ((MLIST SIMP)
            ((MLIST SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 27. ((MEXPT SIMP RATSIMP) $X 4.)
               ((MEXPT SIMP RATSIMP) $Y 5.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 60. ((MEXPT SIMP RATSIMP) $X 2.)
                 ((MEXPT SIMP RATSIMP) $Y 6.))
                ((MTIMES SIMP) 30. $X ((MEXPT SIMP RATSIMP) $Y 7.)))
               ((MEXPT SIMP RATSIMP) $Z 2.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 63. ((MEXPT SIMP RATSIMP) $X 11.)
                 ((MEXPT SIMP RATSIMP) $Y 2.))
                ((MTIMES SIMP) -50. ((MEXPT SIMP RATSIMP) $Y 8.)))
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP) 105. ((MEXPT SIMP RATSIMP) $X 9.)
               ((MEXPT SIMP RATSIMP) $Y 4.)
               ((MEXPT SIMP RATSIMP) $Z 4.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 140. ((MEXPT SIMP RATSIMP) $X 9.)
                 ((MEXPT SIMP RATSIMP) $Y 3.))
                ((MTIMES SIMP) -315. ((MEXPT SIMP RATSIMP) $X 8.)
                 ((MEXPT SIMP RATSIMP) $Y 4.)))
               ((MEXPT SIMP RATSIMP) $Z 5.)))
             ((MPLUS SIMP)
              ((MTIMES SIMP) 30. $X ((MEXPT SIMP RATSIMP) $Y 7.)
               ((MEXPT SIMP RATSIMP) $Z 2.))
              ((MTIMES SIMP) 63. ((MEXPT SIMP RATSIMP) $X 11.)
               ((MEXPT SIMP RATSIMP) $Y 2.)
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 140. ((MEXPT SIMP RATSIMP) $X 9.)
                 ((MEXPT SIMP RATSIMP) $Y 3.))
                ((MTIMES SIMP) -315. ((MEXPT SIMP RATSIMP) $X 8.)
                 ((MEXPT SIMP RATSIMP) $Y 4.)))
               ((MEXPT SIMP RATSIMP) $Z 5.)))
             ((MPLUS SIMP)
              ((MTIMES SIMP) 30. $X ((MEXPT SIMP RATSIMP) $Y 7.)
               ((MEXPT SIMP RATSIMP) $Z 2.))
              ((MTIMES SIMP) 63. ((MEXPT SIMP RATSIMP) $X 11.)
               ((MEXPT SIMP RATSIMP) $Y 2.)
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 140. ((MEXPT SIMP RATSIMP) $X 9.)
                 ((MEXPT SIMP RATSIMP) $Y 3.))
                ((MTIMES SIMP) -315. ((MEXPT SIMP RATSIMP) $X 8.)
                 ((MEXPT SIMP RATSIMP) $Y 4.)))
               ((MEXPT SIMP RATSIMP) $Z 5.))))))) 
(ADDLABEL '$%O104) 
(DSKSETQ $%I105 '(($GRIND) $%)) 
(ADDLABEL '$%I105) 
(DSKSETQ $%O105 '$DONE) 
(ADDLABEL '$%O105) 
(DSKSETQ $%I106 '(($%O104 ARRAY) 1. 1.)) 
(ADDLABEL '$%I106) 
(DSKSETQ $%O106
         '((MLIST SIMP)
           ((MPLUS SIMP)
            ((MTIMES SIMP) 27. ((MEXPT SIMP RATSIMP) $X 4.)
             ((MEXPT SIMP RATSIMP) $Y 5.))
            ((MTIMES SIMP) 60. ((MEXPT SIMP RATSIMP) $X 2.)
             ((MEXPT SIMP RATSIMP) $Y 6.) ((MEXPT SIMP RATSIMP) $Z 2.))
            ((MTIMES SIMP) -50. ((MEXPT SIMP RATSIMP) $Y 8.)
             ((MEXPT SIMP RATSIMP) $Z 3.))
            ((MTIMES SIMP) 105. ((MEXPT SIMP RATSIMP) $X 9.)
             ((MEXPT SIMP RATSIMP) $Y 4.) ((MEXPT SIMP RATSIMP) $Z 4.)))
           0. 0.)) 
(ADDLABEL '$%O106) 
(DSKSETQ $%I107
         '(($EV) ((MEQUAL) $X 1.) ((MEQUAL) $Y 2.) ((MEQUAL) $Z 3.)
           (($%104 ARRAY) 1. 1.))) 
(ADDLABEL '$%I107) 
(DSKSETQ $%I108
         '(($SUBSTITUTE) ((MEQUAL) $X 1.) ((MEQUAL) $Y 2.)
           ((MEQUAL) $Z 3.) (($%104 ARRAY) 1. 1.))) 
(ADDLABEL '$%I108) 
(DSKSETQ $%O108 '((MEQUAL SIMP) $Z 3.)) 
(ADDLABEL '$%O108) 
(DSKSETQ $%I109
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $X 1.) ((MEQUAL) $Y 2.) ((MEQUAL) $Z 3.))
           (($%104 ARRAY) 1. 1.))) 
(ADDLABEL '$%I109) 
(DSKSETQ $%O109 '(($%104 SIMP ARRAY) 1. 1.)) 
(ADDLABEL '$%O109) 
(DSKSETQ $%I110 '(($%104 ARRAY) 1. 1.)) 
(ADDLABEL '$%I110) 
(DSKSETQ $%O110 '(($%104 SIMP ARRAY) 1. 1.)) 
(ADDLABEL '$%O110) 
(DSKSETQ $%I111 '$%104) 
(ADDLABEL '$%I111) 
(DSKSETQ $%O111 '$%104) 
(ADDLABEL '$%O111) 
(DSKSETQ $%I112 '$%O104) 
(ADDLABEL '$%I112) 
(DSKSETQ $%O112
         '(($MATRIX SIMP)
           ((MLIST SIMP)
            ((MLIST SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 27. ((MEXPT SIMP RATSIMP) $X 4.)
               ((MEXPT SIMP RATSIMP) $Y 5.))
              ((MTIMES SIMP) 60. ((MEXPT SIMP RATSIMP) $X 2.)
               ((MEXPT SIMP RATSIMP) $Y 6.)
               ((MEXPT SIMP RATSIMP) $Z 2.))
              ((MTIMES SIMP) -50. ((MEXPT SIMP RATSIMP) $Y 8.)
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP) 105. ((MEXPT SIMP RATSIMP) $X 9.)
               ((MEXPT SIMP RATSIMP) $Y 4.)
               ((MEXPT SIMP RATSIMP) $Z 4.)))
             0. 0.))
           ((MLIST SIMP)
            ((MLIST SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 27. ((MEXPT SIMP RATSIMP) $X 4.)
               ((MEXPT SIMP RATSIMP) $Y 5.))
              ((MTIMES SIMP) -18. ((MEXPT SIMP RATSIMP) $X 3.)
               ((MEXPT SIMP RATSIMP) $Y 6.))
              ((MTIMES SIMP) 60. ((MEXPT SIMP RATSIMP) $X 2.)
               ((MEXPT SIMP RATSIMP) $Y 6.)
               ((MEXPT SIMP RATSIMP) $Z 2.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 189. ((MEXPT SIMP RATSIMP) $X 10.)
                 ((MEXPT SIMP RATSIMP) $Y 3.))
                ((MTIMES SIMP) -50. ((MEXPT SIMP RATSIMP) $Y 8.)))
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP) 35. ((MEXPT SIMP RATSIMP) $X 9.)
               ((MEXPT SIMP RATSIMP) $Y 4.)
               ((MEXPT SIMP RATSIMP) $Z 4.))
              ((MTIMES SIMP) 147. ((MEXPT SIMP RATSIMP) $X 18.)
               ((MEXPT SIMP RATSIMP) $Z 5.)))
             ((MPLUS SIMP)
              ((MTIMES SIMP) -18. ((MEXPT SIMP RATSIMP) $X 3.)
               ((MEXPT SIMP RATSIMP) $Y 6.))
              ((MTIMES SIMP) 189. ((MEXPT SIMP RATSIMP) $X 10.)
               ((MEXPT SIMP RATSIMP) $Y 3.)
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP) -70. ((MEXPT SIMP RATSIMP) $X 9.)
               ((MEXPT SIMP RATSIMP) $Y 4.)
               ((MEXPT SIMP RATSIMP) $Z 4.))
              ((MTIMES SIMP) 147. ((MEXPT SIMP RATSIMP) $X 18.)
               ((MEXPT SIMP RATSIMP) $Z 5.)))
             ((MPLUS SIMP)
              ((MTIMES SIMP) -18. ((MEXPT SIMP RATSIMP) $X 3.)
               ((MEXPT SIMP RATSIMP) $Y 6.))
              ((MTIMES SIMP) 189. ((MEXPT SIMP RATSIMP) $X 10.)
               ((MEXPT SIMP RATSIMP) $Y 3.)
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP) -70. ((MEXPT SIMP RATSIMP) $X 9.)
               ((MEXPT SIMP RATSIMP) $Y 4.)
               ((MEXPT SIMP RATSIMP) $Z 4.))
              ((MTIMES SIMP) 147. ((MEXPT SIMP RATSIMP) $X 18.)
               ((MEXPT SIMP RATSIMP) $Z 5.)))))
           ((MLIST SIMP)
            ((MLIST SIMP)
             ((MPLUS SIMP)
              ((MTIMES SIMP) 27. ((MEXPT SIMP RATSIMP) $X 4.)
               ((MEXPT SIMP RATSIMP) $Y 5.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 60. ((MEXPT SIMP RATSIMP) $X 2.)
                 ((MEXPT SIMP RATSIMP) $Y 6.))
                ((MTIMES SIMP) 30. $X ((MEXPT SIMP RATSIMP) $Y 7.)))
               ((MEXPT SIMP RATSIMP) $Z 2.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 63. ((MEXPT SIMP RATSIMP) $X 11.)
                 ((MEXPT SIMP RATSIMP) $Y 2.))
                ((MTIMES SIMP) -50. ((MEXPT SIMP RATSIMP) $Y 8.)))
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP) 105. ((MEXPT SIMP RATSIMP) $X 9.)
               ((MEXPT SIMP RATSIMP) $Y 4.)
               ((MEXPT SIMP RATSIMP) $Z 4.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 140. ((MEXPT SIMP RATSIMP) $X 9.)
                 ((MEXPT SIMP RATSIMP) $Y 3.))
                ((MTIMES SIMP) -315. ((MEXPT SIMP RATSIMP) $X 8.)
                 ((MEXPT SIMP RATSIMP) $Y 4.)))
               ((MEXPT SIMP RATSIMP) $Z 5.)))
             ((MPLUS SIMP)
              ((MTIMES SIMP) 30. $X ((MEXPT SIMP RATSIMP) $Y 7.)
               ((MEXPT SIMP RATSIMP) $Z 2.))
              ((MTIMES SIMP) 63. ((MEXPT SIMP RATSIMP) $X 11.)
               ((MEXPT SIMP RATSIMP) $Y 2.)
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 140. ((MEXPT SIMP RATSIMP) $X 9.)
                 ((MEXPT SIMP RATSIMP) $Y 3.))
                ((MTIMES SIMP) -315. ((MEXPT SIMP RATSIMP) $X 8.)
                 ((MEXPT SIMP RATSIMP) $Y 4.)))
               ((MEXPT SIMP RATSIMP) $Z 5.)))
             ((MPLUS SIMP)
              ((MTIMES SIMP) 30. $X ((MEXPT SIMP RATSIMP) $Y 7.)
               ((MEXPT SIMP RATSIMP) $Z 2.))
              ((MTIMES SIMP) 63. ((MEXPT SIMP RATSIMP) $X 11.)
               ((MEXPT SIMP RATSIMP) $Y 2.)
               ((MEXPT SIMP RATSIMP) $Z 3.))
              ((MTIMES SIMP)
               ((MPLUS SIMP)
                ((MTIMES SIMP) 140. ((MEXPT SIMP RATSIMP) $X 9.)
                 ((MEXPT SIMP RATSIMP) $Y 3.))
                ((MTIMES SIMP) -315. ((MEXPT SIMP RATSIMP) $X 8.)
                 ((MEXPT SIMP RATSIMP) $Y 4.)))
               ((MEXPT SIMP RATSIMP) $Z 5.))))))) 
(ADDLABEL '$%O112) 
(DSKSETQ $%I113
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $X 1.) ((MEQUAL) $Y 2.) ((MEQUAL) $Z 3.))
           (($%O104 ARRAY) 1. 1.))) 
(ADDLABEL '$%I113) 
(DSKSETQ $%O113 '((MLIST SIMP) -174096. 0. 0.)) 
(ADDLABEL '$%O113) 
(DSKSETQ $%I114
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $X 1.) ((MEQUAL) $Y 2.) ((MEQUAL) $Z 3.))
           (($%O104 ARRAY) 1. 1.))) 
(ADDLABEL '$%I114) 
(DSKSETQ $%O114 '((MLIST SIMP) -174096. 0. 0.)) 
(ADDLABEL '$%O114) 
(DSKSETQ $%I115
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $X 1.) ((MEQUAL) $Y 2.) ((MEQUAL) $Z 3.))
           (($%O104 ARRAY) 1. 2.))) 
(ADDLABEL '$%I115) 
(DSKSETQ $%I116
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $X 1.) ((MEQUAL) $Y 2.) ((MEQUAL) $Z 3.))
           (($%O104 ARRAY) 2. 1.))) 
(ADDLABEL '$%I116) 
(DSKSETQ $%O116 '((MLIST SIMP) -189423. -15327. -15327.)) 
(ADDLABEL '$%O116) 
(DSKSETQ $%I117
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $X 1.) ((MEQUAL) $Y 2.) ((MEQUAL) $Z 3.))
           (($%O104 ARRAY) 3. 1.))) 
(ADDLABEL '$%I117) 
(DSKSETQ $%O117 '((MLIST SIMP) -1085292. -911196. -911196.)) 
(ADDLABEL '$%O117) 
(DSKSETQ $%I118 '(($FIRST) (($%O104 ARRAY) 1. 1.))) 
(ADDLABEL '$%I118) 
(DSKSETQ $%O118
         '((MPLUS SIMP)
           ((MTIMES SIMP) 27. ((MEXPT SIMP RATSIMP) $X 4.)
            ((MEXPT SIMP RATSIMP) $Y 5.))
           ((MTIMES SIMP) 60. ((MEXPT SIMP RATSIMP) $X 2.)
            ((MEXPT SIMP RATSIMP) $Y 6.) ((MEXPT SIMP RATSIMP) $Z 2.))
           ((MTIMES SIMP) -50. ((MEXPT SIMP RATSIMP) $Y 8.)
            ((MEXPT SIMP RATSIMP) $Z 3.))
           ((MTIMES SIMP) 105. ((MEXPT SIMP RATSIMP) $X 9.)
            ((MEXPT SIMP RATSIMP) $Y 4.) ((MEXPT SIMP RATSIMP) $Z 4.)))) 
(ADDLABEL '$%O118) 
(DSKSETQ $%I119
         '(($SUBSTITUTE) ((MEQUAL) $X 2.) ((MEQUAL) $Y ((MMINUS) 1.))
           ((MEQUAL) $Z 3.) $%)) 
(ADDLABEL '$%I119) 
(DSKSETQ $%O119 '((MEQUAL SIMP) $Z 3.)) 
(ADDLABEL '$%O119) 
(DSKSETQ $%I120
         '(($SUBSTITUTE)
           ((MLIST) ((MEQUAL) $X 2.) ((MEQUAL) $Y ((MMINUS) 1.))
            ((MEQUAL) $Z 3.))
           $%O118)) 
(ADDLABEL '$%I120) 
(DSKSETQ $%O120 '4354938.) 
(ADDLABEL '$%O120) 
(DSKSETQ $BESTLENGTH '0.) 
(ADD2LNC '$BESTLENGTH $VALUES) 
(DEFPROP $BESTLENGTH ASSIGN-MODE-CHECK ASSIGN) 
(ADD2LNC '$BESTLENGTH $PROPS) 
(DEFPROP $BESTLENGTH $FIXNUM MODE) 
(ADD2LNC '$BESTLENGTH $PROPS) 
(DSKSETQ $TRYLENGTH '0.) 
(ADD2LNC '$TRYLENGTH $VALUES) 
(DEFPROP $TRYLENGTH ASSIGN-MODE-CHECK ASSIGN) 
(ADD2LNC '$TRYLENGTH $PROPS) 
(DEFPROP $TRYLENGTH $FIXNUM MODE) 
(ADD2LNC '$TRYLENGTH $PROPS) 
(DSKSETQ $RATSIMP 'NIL) 
(ADD2LNC '$RATSIMP $VALUES) 
(DSKSETQ $CV '((%DERIVATIVE SIMP) $FN $V 1.)) 
(ADD2LNC '$CV $VALUES) 
(DSKSETQ $CM
         '(($MATRIX SIMP) ((MLIST SIMP) $I $J $K)
           ((MLIST SIMP) ((%DERIVATIVE SIMP) $FN $X 1.)
            ((%DERIVATIVE SIMP) $FN $Y 1.)
            ((%DERIVATIVE SIMP) $FN $Z 1.))
           ((MLIST SIMP) $FPX $FPY $FPZ))) 
(ADD2LNC '$CM $VALUES) 
(DSKSETQ $I '((MLIST SIMP) 1. 0. 0.)) 
(ADD2LNC '$I $VALUES) 
(DSKSETQ $J '((MLIST SIMP) 0. 1. 0.)) 
(ADD2LNC '$J $VALUES) 
(DSKSETQ $K '((MLIST SIMP) 0. 0. 1.)) 
(ADD2LNC '$K $VALUES) 
(DSKSETQ $HERMITIANMATRIX 'NIL) 
(ADD2LNC '$HERMITIANMATRIX $VALUES) 
(DEFPROP $HERMITIANMATRIX ASSIGN-MODE-CHECK ASSIGN) 
(ADD2LNC '$HERMITIANMATRIX $PROPS) 
(DEFPROP $HERMITIANMATRIX $BOOLEAN MODE) 
(ADD2LNC '$HERMITIANMATRIX $PROPS) 
(DSKSETQ $NONDIAGONALIZABLE 'NIL) 
(ADD2LNC '$NONDIAGONALIZABLE $VALUES) 
(DEFPROP $NONDIAGONALIZABLE ASSIGN-MODE-CHECK ASSIGN) 
(ADD2LNC '$NONDIAGONALIZABLE $PROPS) 
(DEFPROP $NONDIAGONALIZABLE $BOOLEAN MODE) 
(ADD2LNC '$NONDIAGONALIZABLE $PROPS) 
(DSKSETQ $KNOWNEIGVALS 'NIL) 
(ADD2LNC '$KNOWNEIGVALS $VALUES) 
(DEFPROP $KNOWNEIGVALS ASSIGN-MODE-CHECK ASSIGN) 
(ADD2LNC '$KNOWNEIGVALS $PROPS) 
(DEFPROP $KNOWNEIGVALS $BOOLEAN MODE) 
(ADD2LNC '$KNOWNEIGVALS $PROPS) 
(DSKSETQ $KNOWNEIGVECTS 'NIL) 
(ADD2LNC '$KNOWNEIGVECTS $VALUES) 
(DEFPROP $KNOWNEIGVECTS ASSIGN-MODE-CHECK ASSIGN) 
(ADD2LNC '$KNOWNEIGVECTS $PROPS) 
(DEFPROP $KNOWNEIGVECTS $BOOLEAN MODE) 
(ADD2LNC '$KNOWNEIGVECTS $PROPS) 
(DSKSETQ $LISTEIGVECTS '((MLIST SIMP))) 
(ADD2LNC '$LISTEIGVECTS $VALUES) 
(DEFPROP $LISTEIGVECTS ASSIGN-MODE-CHECK ASSIGN) 
(ADD2LNC '$LISTEIGVECTS $PROPS) 
(DEFPROP $LISTEIGVECTS $LIST MODE) 
(ADD2LNC '$LISTEIGVECTS $PROPS) 
(DSKSETQ $LISTEIGVALS '((MLIST SIMP))) 
(ADD2LNC '$LISTEIGVALS $VALUES) 
(DEFPROP $LISTEIGVALS ASSIGN-MODE-CHECK ASSIGN) 
(ADD2LNC '$LISTEIGVALS $PROPS) 
(DEFPROP $LISTEIGVALS $LIST MODE) 
(ADD2LNC '$LISTEIGVALS $PROPS) 
(DSKSETQ $RIGHTMATRIX '((MLIST SIMP))) 
(ADD2LNC '$RIGHTMATRIX $VALUES) 
(DEFPROP $RIGHTMATRIX $ANY MODE) 
(ADD2LNC '$RIGHTMATRIX $PROPS) 
(DSKSETQ $LEFTMATRIX '((MLIST SIMP))) 
(ADD2LNC '$LEFTMATRIX $VALUES) 
(DEFPROP $LEFTMATRIX $ANY MODE) 
(ADD2LNC '$LEFTMATRIX $PROPS) 
(DSKSETQ $IV
         '(($MATRIX SIMP) ((MLIST SIMP) 1.) ((MLIST SIMP) 0.)
           ((MLIST SIMP) 0.))) 
(ADD2LNC '$IV $VALUES) 
(DSKSETQ $JV
         '(($MATRIX SIMP) ((MLIST SIMP) 0.) ((MLIST SIMP) 1.)
           ((MLIST SIMP) 0.))) 
(ADD2LNC '$JV $VALUES) 
(DSKSETQ $KV
         '(($MATRIX SIMP) ((MLIST SIMP) 0.) ((MLIST SIMP) 0.)
           ((MLIST SIMP) 1.))) 
(ADD2LNC '$KV $VALUES) 
(MDEFPROP $TRIGONOMETRICP
    ((LAMBDA) ((MLIST) %EXP)
     (($IS)
      ((MOR)
       ((MEQUAL) (($GET) (($INPART) %EXP 0.) ((MQUOTE) $TYPE))
        ((MQUOTE) $TRIGONOMETRIC))
       ((MEQUAL) (($GET) $PIECE ((MQUOTE) $TYPE))
        ((MQUOTE) $HYPER_TRIGONOMETRIC)))))
    MEXPR) 
(ADD2LNC '(($TRIGONOMETRICP) %EXP) $FUNCTIONS) 
(MDEFPROP $TRIGSIMP
    ((LAMBDA) ((MLIST) $X%)
     (($TRIGSIMP3)
      (($RATSIMP)
       (($APPLY1) $X% $TRIGRULE1 $TRIGRULE2 $TRIGRULE3 $TRIGRULE4
        $HTRIGRULE1 $HTRIGRULE2 $HTRIGRULE3 $HTRIGRULE4))))
    MEXPR) 
(ADD2LNC '(($TRIGSIMP) $X%) $FUNCTIONS) 
(MDEFPROP $TRIGSIMP3
    ((LAMBDA) ((MLIST) $EXPN)
     ((MCOND) (($LISTP) $EXPN)
      ((MCOND) ((MEQUAL) $EXPN ((MLIST))) ((MLIST)) T
       (($CONS)
        (($RATSIMP)
         ((MQUOTIENT) (($TRIGSIMP1) (($NUM) (($EXPN ARRAY) 1.)))
          (($TRIGSIMP1) (($DENOM) (($EXPN ARRAY) 1.)))))
        (($TRIGSIMP3) (($REST) $EXPN))))
      T
      (($RATSIMP)
       ((MQUOTIENT) (($TRIGSIMP1) (($NUM) $EXPN))
        (($TRIGSIMP1) (($DENOM) $EXPN))))))
    MEXPR) 
(ADD2LNC '(($TRIGSIMP3) $EXPN) $FUNCTIONS) 
(MDEFPROP $TRIGSIMP1
    ((LAMBDA) ((MLIST) $EXPN)
     ((MPROG) ((MLIST) $LISTOFTRIGSQ $BESTLENGTH $TRYLENGTH)
      ((MSETQ) $LISTOFTRIGSQ (($LISTOFTRIGSQ) $EXPN))
      ((MSETQ) $BESTLENGTH 999999.)
      ((MCOND) ((MNOTEQUAL) $LISTOFTRIGSQ ((MLIST)))
       (($IMPROVE) $EXPN $EXPN $LISTOFTRIGSQ) T $EXPN)))
    MEXPR) 
(ADD2LNC '(($TRIGSIMP1) $EXPN) $FUNCTIONS) 
(MDEFPROP $IMPROVE
    ((LAMBDA) ((MLIST) $EXPN $SUBSOFAR $LISTOFTRIGSQ)
     ((MCOND) ((MEQUAL) $LISTOFTRIGSQ ((MLIST)))
      ((MCOND)
       ((MLESSP) ((MSETQ) $TRYLENGTH (($EXPNLENGTH) $SUBSOFAR))
        $BESTLENGTH)
       ((MPROGN) ((MSETQ) $BESTLENGTH $TRYLENGTH) $SUBSOFAR) T $EXPN)
      T
      ((MPROGN)
       ((MSETQ) $SUBSOFAR
        (($IMPROVE) $EXPN $SUBSOFAR (($REST) $LISTOFTRIGSQ)))
       ((MDOIN) $ALT (($FIRST) $LISTOFTRIGSQ) NIL NIL NIL NIL
        ((MSETQ) $SUBSOFAR
         (($IMPROVE) $SUBSOFAR
          (($RATSUBST)
           ((MPLUS) (($GET) (($INPART) $ALT 0.) ((MQUOTE) $UNITCOF))
            ((MTIMES) (($GET) $PIECE ((MQUOTE) $COMPLEMENT_COF))
             ((MEXPT)
              ((MQAPPLY)
               (($GET) $PIECE ((MQUOTE) $COMPLEMENT_FUNCTION))
               (($FIRST) $ALT))
              2.)))
           ((MEXPT) $ALT 2.) $SUBSOFAR)
          (($REST) $LISTOFTRIGSQ))))
       $SUBSOFAR)))
    MEXPR) 
(ADD2LNC '(($IMPROVE) $EXPN $SUBSOFAR $LISTOFTRIGSQ) $FUNCTIONS) 
(MDEFPROP $LISTOFTRIGSQ
    ((LAMBDA) ((MLIST) $EXPN)
     ((MCOND) (($ATOM) $EXPN) ((MLIST)) T
      ((MPROG) ((MLIST) $INFLAG ((MSETQ) $ANS ((MLIST))))
       ((MCOND)
        ((MAND) ((MEQUAL) (($INPART) $EXPN 0.) "^")
         (($INTEGERP) (($INPART) $EXPN 2.)) ((MGEQP) $PIECE 2.))
        ((MCOND) (($ATOM) ((MSETQ) $EXPN (($INPART) $EXPN 1.)))
         ((MRETURN) ((MLIST))) T
         ((MCOND) (($TRIGONOMETRICP) $EXPN)
          ((MRETURN) ((MLIST) ((MLIST) $EXPN))) T $FALSE))
        T $FALSE)
       ((MSETQ) $INFLAG T)
       ((MDOIN) $ARG $EXPN NIL NIL NIL NIL
        ((MSETQ) $ANS (($SPECIALUNION) (($LISTOFTRIGSQ) $ARG) $ANS)))
       $ANS)))
    MEXPR) 
(ADD2LNC '(($LISTOFTRIGSQ) $EXPN) $FUNCTIONS) 
(MDEFPROP $SPECIALUNION
    ((LAMBDA) ((MLIST) $LIST1 $LIST2)
     ((MCOND) ((MEQUAL) $LIST1 ((MLIST))) $LIST2 T
      ((MCOND) ((MEQUAL) $LIST2 ((MLIST))) $LIST1 T
       ((MPROG) ((MLIST) ((MSETQ) $ALTERNATES (($FIRST) $LIST1)))
        ((MDOIN) $ALT $ALTERNATES NIL NIL NIL NIL
         ((MSETQ) $LIST2
          (($UPDATE) $ALT
           (($GET) (($INPART) $ALT 0.) ((MQUOTE) $COMPLEMENT_FUNCTION)))))
        (($SPECIALUNION) (($REST) $LIST1) $LIST2)))))
    MEXPR) 
(ADD2LNC '(($SPECIALUNION) $LIST1 $LIST2) $FUNCTIONS) 
(MDEFPROP $UPDATE
    ((LAMBDA) ((MLIST) $FORM $COMPLEMENT)
     ((MPROG) ((MLIST) $ANS)
      ((MSETQ) $COMPLEMENT
       (($APPLY) $COMPLEMENT ((MLIST) (($INPART) $FORM 1.))))
      ((MSETQ) $ANS
       ((MDOIN) $ELEMENT $LIST2 NIL NIL NIL NIL
        ((MCOND) (($MEMBER) $FORM $ELEMENT)
         ((MRETURN) ((MQUOTE) $FOUND)) T
         ((MCOND) (($MEMBER) $COMPLEMENT $ELEMENT)
          ((MRETURN)
           (($CONS) ((MLIST) $FORM $COMPLEMENT)
            (($DELETE) $ELEMENT $LIST2)))
          T $FALSE))))
      ((MCOND) ((MEQUAL) $ANS ((MQUOTE) $FOUND)) $LIST2 T
       ((MCOND) ((MEQUAL) $ANS ((MQUOTE) $DONE))
        (($CONS) ((MLIST) $FORM) $LIST2) T $ANS))))
    MEXPR) 
(ADD2LNC '(($UPDATE) $FORM $COMPLEMENT) $FUNCTIONS) 
(MDEFPROP $EXPNLENGTH
    ((LAMBDA) ((MLIST) $EXPR)
     ((MPROG) ((MLIST) ((MSETQ) $INFLAG NIL))
      ((MCOND) (($ATOM) $EXPR) 1. T
       ((MPLUS) 1. (($ARGSLENGTH) (($ARGS) $EXPR))))))
    MEXPR) 
(ADD2LNC '(($EXPNLENGTH) $EXPR) $FUNCTIONS) 
(MDEFPROP $ARGSLENGTH
    ((LAMBDA) ((MLIST) $ARGS)
     (($APPLY) "+" (($MAP) ((MQUOTE) $EXPNLENGTH) $ARGS)))
    MEXPR) 
(ADD2LNC '(($ARGSLENGTH) $ARGS) $FUNCTIONS) 
(MDEFPROP $QDRAW_USAGE
    ((LAMBDA) ((MLIST))
     (($PRINT)
      "


 -------------QDRAW SYNTAX------------------------------

 All arguments to qdraw are optional and can be entered in any order.
 
 You can have no more than one xr(..) argument.  Likewise,
  no more than one yr(..), one cut(..), one lw(n) (as an arg of
   qdraw), one nticks(n) and one ipgrid(n).
 
 You can have an arbitrary number of the other args in any order.
 
 The complete set of possible arguments (in alphabetic order) with the
    maximum number and type of arguments follow. In general, arguments
    with names lc,lw,lk,fill,pc,ps,pt,pk,pj,ha,hb,hl,and ht are optional.

    qdraw( arrowhead(x,y,theta-degrees,s,lc(c),lw(n) ),
           circle(x,y,radius,lc(c),lw(n),fill(cc) ),
           contour(expr,x,x1,x2,y,y1,y2,crange(n,min,max),options )
              or contour(expr,x,x1,x2,y,y1,y2, cvals(v1,v2,...), options ),
              contour options are lc(c),lw(n), add( add-options );
                 add-options are grid,xaxis,yaxis,and xyaxes,
           cut(cut-options);
              cut-options are key,grid,xaxis,yaxis,xyaxes,edge,all,
           ellipse(xc,yc,xsma,ysma,th0-deg,dth-deg,lw(n),lc(c),fill(cc) ),
           errorbars(ptlist,dylist,lc(c),lw(n) ),
           ex(exprlist,x,x1,x2),
           ex1(expr,x,x1,x2,lc(c),lw(n),lk(string) ),
           imp(eqnlist,x,xx1,xx2,y,yy1,yy2),
           imp1(eqn,x,x1,x2,y,y1,y2,lc(c),lw(n),lk(string) ),
           ipgrid(n),
           key(bottom) or key(top),
           label( [string1,x1,y1],[string2,x2,y2],...),
           label_align(p-options); p-options are l, r, or c,
           line(x1,y1,x2,y2,lc(c),lw(n),lk(string) ),
           log(log-options); log-options are x, y, or xy,
           lw(n),
           more( any legal draw2d arguments),
           nticks(n),
           para( xofu,yofu,u,u1,u2,lc(c),lw(n),lk(string) ),
           polar( roftheta,theta,th1,th2,lc(c),lw(n),lk(string) );
                       theta, th1, and th2 must be in radians,
           poly([ [x1,y1],[x2,y2],.,[xN,yN] ], lc(c),lw(n),fill(cc) ),
           pts( [ [x1,y1],[x2,y2],.,[xN,yN] ],pc(c),ps(s),pt(t),pk(string) ),
           pic( type(t), fname(string), font(string,size)  );
                      font(..) is optional,
           rect( x1,y1,x2,y2, lc(c),lw(n),fill(cc) ),
           vector( [x,y],[dx,dy],lw(n),lc(c),lk(string),
                                   ha(deg),hb(v),hl(v),ht(t) ),
                type vector_use(); to see vector option details,
           xr(xa,xb), 
           yr(ya,yb),            
           );
           
  ...................................................
  QUICK PLOT FEATURES:
               
  For quick plots, use ex(...) and imp(...). These
  two functions ex(...) and imp(...) use default colors, line widths,
  and simple legend key numbers. The function ex(...) can be used either
  with a single expression, as in ex( u^3,u,-2,2), or with a list
  of expressions as in ex([u,u^2,u^3],u,-2,2).
  
  You can use any other letter instead of 'u', such as 'x', etc.
  
  Like wise the function imp(...), used for the implicit plots of equations,
  can be used for one equation, as in imp(v^3=u^2,u,-2,2,v,-2,2) or for a 
  list of equations as in imp([v=u,v^2=u,v^3=u],u,-2,2,v,-2,2).
  
  You can use any other letters instead of 'u' and 'v', such as 'x' and 'y'.
   
  The top level qdraw argument lw(n) overrides the default line_width
   setting used for ex(...) and imp(...).
  
  You can have multiple ex and imp arguments.
  ....................................................
  
  You recover more control, although limited to either one expression
  or one equation, if you use ex1(...), or imp1(...), using the options
  indicated.
 
===========================================================
the functions qdensity(expr,[x,x1,x2,dx],[y,y1,y2,dy], palette(p-options),pic(..) )
          and wxqdensity( same args), in which
       palette(p) and pic(type,filename) are optional;
       palette(blue), palette(gray), palette(color), or palette(n1,n2,n3), 
   can be used to produce a density plot. qdensity or wxqdensity is called by itself and
   is not 'wrapped' by qdraw. 
================================================================

   To see the above again, type qdraw();
     
  "))
    MEXPR) 
(ADD2LNC '(($QDRAW_USAGE)) $FUNCTIONS) 
(MDEFPROP $VECTOR_USE
    ((LAMBDA) ((MLIST))
     (($DISP)
      "vector([x,y],[dx,dy],ha(thdeg),hb(v),hl(v),ht(t),lw(n),lc(c),lk(string) )
 draws a vector with components [dx,dy] starting at [x,y]. The first two
 list arguments are required, all others are optional and can be entered in
 any order after the first two required arguments.
 The default head angle is 30 deg, change to 45 deg using 
               ha(45) for example.
 The default 'head both' value is f for false, use hb(t) to set
      it to true,and hb(f) to return to false.
 The default 'head length' is 0.5, use hl(0.7) to change to 0.7.
 The default 'head type' is 'nofilled'; use ht(e) for 'empty',
       ht(f) for 'filled',and ht(n) to change back to 'nofilled'.           
 The default line width is 3, use lw(5) to change to 5.
 The default line color is black, use lc(brown) to change to brown.
 The default is no key string. use lk(string) for example to create
     a text string for the key."))
    MEXPR) 
(ADD2LNC '(($VECTOR_USE)) $FUNCTIONS) 
(MDEFPROP $QDRAW1
    ((LAMBDA) ((MLIST) ((MLIST) $QDA))
     ((MPROG)
      ((MLIST) $ACOLOR $ANERR $ARG $AX $AY $BX $BY $CC $CDV $CLIST
       $CNUM $COLDEF $CT $CTOP $CTARGS $CVAL $DRLIST $DY $DYL $EEX
       $ELIST $EQE $ERRBLW $FNAMELST $FNAMESTR $FNTSIZE $FNTSTR $HLIM
       $HVLIM $IPGRIDDEF $IQ $JQ $KK $KLIST $LABADEF $LAB_ARGS $LE
       $LENDR $LL $LP $LQDA $LWA $LWDEF $LWVAL $MKEDGE $MKGRID
       $LABELLIST $MKKEY $MKXAXIS $MKXYAXIS $MKYAXIS $MORELIST $MSG $NN
       $NARGS $NDEF $NLABEL $NLW $NPIC $NPS $NTICKSDEF $NXR $NYR $PHI
       $PICLIST $PICTYPE $PL $PL1 $PR $PRLIST $PSTR $PTL $PTSDEF
       $PTTDEF $PTSL $PTSLIST $QT $RL $RNGLIST $SA $TARGS $TH $TLIST
       $QTOP $TP $TT $TTARGS $TTOP $TVAL $ULIM $XX $X1RR $X2RR $YY
       $Y1RR $Y2RR)
      (($LOCAL) $GOODARGS $EQNCHECK $DOERR $QVAL $SETNFILL $SETNLK
       $SETNLW $SETNPC $SETOPTIONS $INLISTP)
      ((MSETQ) $STRINGDISP T) ((MSETQ) $RATPRINT NIL)
      ((MSETQ) $LWDEF 3.) ((MSETQ) $LWVAL $LWDEF)
      ((MSETQ) $COLDEF $BLUE) ((MSETQ) $PTSDEF 3.) ((MSETQ) $PTTDEF 7.)
      ((MSETQ) $LABADEF $LEFT) ((MSETQ) $NTICKSDEF 100.)
      ((MSETQ) $IPGRIDDEF 10.) ((MSETQ) $NDEF NIL) ((MSETQ) $NPIC NIL)
      ((MSETQ) $NLABEL NIL) ((MSETQ) $MORELIST ((MLIST)))
      ((MSETQ) $PICLIST ((MLIST))) ((MSETQ) $PTSLIST ((MLIST)))
      ((MSETQ) $LABELLIST ((MLIST))) ((MSETQ) $DRLIST ((MLIST)))
      ((MSETQ) $RNGLIST ((MLIST))) ((MSETQ) $NXR 0.) ((MSETQ) $NYR 0.)
      ((MSETQ) $MKKEY T) ((MSETQ) $MKGRID T) ((MSETQ) $MKXYAXES T)
      ((MSETQ) $MKEDGE T) ((MSETQ) $MKXAXIS T) ((MSETQ) $MKYAXIS T)
      ((MDEFINE) (($GOODARGS) $ARGLIST $MSG $GOODARGLIST)
       ((MPROG) ((MLIST) $AA $II $JJ $NCHK)
        ((MDO) $II NIL NIL NIL (($LENGTH) $ARGLIST) NIL
         ((MPROGN) ((MSETQ) $AA (($ARGLIST ARRAY) $II))
          ((MCOND) (($ATOM) $AA)
           ((MPROGN) ((MSETQ) $NCHK NIL)
            (($PRINT) " arg " $AA " must itself have args ")
            ((MRETURN) (($DOERR) $MSG)))
           T $FALSE)
          ((MSETQ) $NCHK NIL)
          ((MDO) $JJ NIL NIL NIL (($LENGTH) $GOODARGLIST) NIL
           ((MCOND) ((MEQUAL) (($OP) $AA) (($GOODARGLIST ARRAY) $JJ))
            ((MPROGN) ((MSETQ) $NCHK T) ((MRETURN))) T $FALSE))
          ((MCOND) ((MNOT) $NCHK)
           ((MPROGN) (($PRINT) " arg " $AA " problem")
            ((MRETURN) (($DOERR) $MSG)))
           T $FALSE)))
        ((MRETURN) $NCHK)))
      ((MSETQ) $ANERR NIL)
      ((MSETQ) $CC
       ((MLIST) $BLUE $RED $TURQUOISE $BROWN $MAGENTA $GREEN $BLACK))
      ((MDEFINE) (($EQNCHECK) $EQE)
       ((MCOND) (($ATOM) $EQE) NIL T
        ((MCOND) ((MEQUAL) (($OP) $EQE) "=") T T NIL)))
      ((MDEFINE) (($DOERR) $MSG)
       ((MPROGN) ((MSETQ) $ANERR T) (($PRINT) "...syntax error")
        (($PRINT) $MSG) NIL))
      ((MDEFINE) (($QVAL) $NN)
       ((MCOND) ((MEQUAL) (($MOD) $NN 7.) 0.) 7. T (($MOD) $NN 7.)))
      ((MDEFINE) (($SETNPC) $LL)
       ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
        ((MPROGN)
         ((MSETQ) $PTSL
          (($CONS) ((MEQUAL) $COLOR (($LL ARRAY) 1.)) $PTSL))
         ((MSETQ) $PTSL
          (($APPEND) $PTSL ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
        T ((MRETURN) (($DOERR) "use lc(red) for example "))))
      ((MDEFINE) (($SETNLW) $LL)
       ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
        ((MPROGN)
         ((MSETQ) $PTSL
          (($CONS) ((MEQUAL) $LINE_WIDTH (($LL ARRAY) 1.)) $PTSL))
         ((MSETQ) $PTSL
          (($APPEND) $PTSL ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)))))
        T ((MRETURN) (($DOERR) "use lw(5) for example "))))
      ((MDEFINE) (($SETNLK) $LL)
       ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
        ((MPROGN)
         ((MSETQ) $PTSL
          (($CONS) ((MEQUAL) $KEY (($LL ARRAY) 1.)) $PTSL))
         ((MSETQ) $PTSL (($APPEND) $PTSL ((MLIST) ((MEQUAL) $KEY "")))))
        T ((MRETURN) (($DOERR) " use lk(\"case 1\") for example "))))
      ((MDEFINE) (($SETNFILL) $LL)
       ((MCOND) ((MEQUAL) (($LENGTH) $LL) 1.)
        ((MPROGN)
         ((MSETQ) $PTSL
          (($CONS) ((MEQUAL) $FILL_COLOR (($LL ARRAY) 1.)) $PTSL))
         ((MSETQ) $PTSL (($CONS) ((MEQUAL) $TRANSPARENT NIL) $PTSL))
         ((MSETQ) $PTSL
          (($APPEND) $PTSL ((MLIST) ((MEQUAL) $TRANSPARENT T)))))
        T ((MRETURN) (($DOERR) "use fill(blue) for example"))))
      ((MDEFINE) (($SETOPTIONS) $PRLIST)
       ((MPROG) ((MLIST) $JJ $TT $TTOP $TTARGS)
        ((MDO) $JJ NIL NIL NIL (($LENGTH) $PRLIST) NIL
         ((MPROGN) ((MSETQ) $TT (($PRLIST ARRAY) $JJ))
          ((MSETQ) $TTOP (($OP) $TT)) ((MSETQ) $TTARGS (($ARGS) $TT))
          ((MCOND) ((MEQUAL) $TTOP $LC) (($SETNPC) $TTARGS) T $FALSE)
          ((MCOND) ((MEQUAL) $TTOP $LW) (($SETNLW) $TTARGS) T $FALSE)
          ((MCOND) ((MEQUAL) $TTOP $LK) (($SETNLK) $TTARGS) T $FALSE)
          ((MCOND) ((MEQUAL) $TTOP $FILL) (($SETNFILL) $TTARGS) T
           $FALSE)))))
      ((MDEFINE) (($INLISTP) $AAA $LLL)
       ((MPROG) ((MLIST) $FFF $XXX) ((MSETQ) $FFF NIL)
        ((MDOIN) $XXX $LLL NIL NIL NIL NIL
         ((MCOND) ((MEQUAL) $XXX $AAA) ((MSETQ) $FFF T) T $FALSE))
        $FFF))
      ((MSETQ) $LQDA (($LENGTH) $QDA))
      ((MCOND) ((MEQUAL) $LQDA 0.)
       ((MPROGN) (($QDRAW_USAGE)) ((MRETURN) NIL)) T $FALSE)
      ((MCOND)
       ((MNOT)
        (($GOODARGS) $QDA
         "qdraw args:arrowhead(), circle(), contour(), cut(), ellipse(), errorbars(), ex(), ex1(), imp(), imp1(),ipgrid(),key(),label(),label_align(), line(), log(), lw(n), more(),nticks(),para(),pic(),polar(), poly(), pts(), rect(),vector(), xr(), yr() "
         ((MLIST) $ARROWHEAD $CIRCLE $CONTOUR $CUT $ELLIPSE $ERRORBARS
          $PIC $EX $EX1 $IMP $IMP1 $IPGRID $KEY $LABEL $LABEL_ALIGN
          $LINE %LOG $LW $MORE $NTICKS $PARA $PIC $POLAR $POLY $PTS
          $RECT $VECTOR $XR $YR)))
       ((MRETURN) NIL) T $FALSE)
      ((MDO) $IQ NIL NIL NIL $LQDA NIL
       ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
        ((MSETQ) $QT (($QDA ARRAY) $IQ)) ((MSETQ) $QTOP (($OP) $QT))
        ((MSETQ) $TARGS (($ARGS) $QT))
        ((MCOND) ((MEQUAL) $QTOP $LW)
         ((MPROGN)
          ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
           ((MRETURN)
            (($DOERR) "lw  must have one and only one argument"))
           T $FALSE)
          ((MSETQ) $LWA (($TARGS ARRAY) 1.))
          ((MCOND) (($INTEGERP) $LWA) ((MSETQ) $LWVAL $LWA) T
           ((MRETURN)
            (($DOERR) "lw arg must be a literal integer like 2"))))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP %LOG)
         ((MPROGN)
          ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
           ((MRETURN) (($DOERR) " use log(a) where a is x, y, or xy "))
           T $FALSE)
          ((MSETQ) $PL (($TARGS ARRAY) 1.))
          ((MCOND) ((MNOT) (($INLISTP) $PL ((MLIST) $X $Y $XY)))
           ((MRETURN) (($DOERR) " use log(a) where a is x, y, or xy "))
           T $FALSE)
          ((MCOND) ((MEQUAL) $PL $X)
           ((MSETQ) $LOGLIST ((MLIST) ((MEQUAL) $LOGX T))) T
           ((MCOND) ((MEQUAL) $PL $Y)
            ((MSETQ) $LOGLIST ((MLIST) ((MEQUAL) $LOGY T))) T
            ((MCOND) ((MEQUAL) $PL $XY)
             ((MSETQ) $LOGLIST
              ((MLIST) ((MEQUAL) $LOGX T) ((MEQUAL) $LOGY T)))
             T
             ((MRETURN)
              (($DOERR) " use log(a) where a is x, y, or xy")))))
          ((MSETQ) $DRLIST (($APPEND) $DRLIST $LOGLIST)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $NTICKS)
         ((MPROGN)
          ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
           ((MRETURN) (($DOERR) "nticks ex: nticks(200) ")) T $FALSE)
          ((MSETQ) $NTICKSDEF (($TARGS ARRAY) 1.)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $IPGRID)
         ((MPROGN)
          ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 1.)
           ((MRETURN) (($DOERR) "ipgrid ex: ipgrid(15) ")) T $FALSE)
          ((MSETQ) $IPGRIDDEF (($TARGS ARRAY) 1.)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $CUT)
         ((MPROGN) ((MSETQ) $EEX $TARGS) ((MSETQ) $LE (($LENGTH) $EEX))
          ((MDO) $JQ NIL NIL NIL $LE NIL
           ((MPROGN) ((MSETQ) $PL (($EEX ARRAY) $JQ))
            ((MCOND)
             ((MNOT)
              (($INLISTP) $PL
               ((MLIST) $ALL $EDGE $GRID $KEY $XAXIS $XYAXES $YAXIS)))
             ((MRETURN)
              (($DOERR)
               "cut: valid args: all,key,grid,xyaxes,xaxis,yaxis,edge "))
             T $FALSE)
            ((MCOND) ((MEQUAL) $PL $ALL)
             ((MPROGN) ((MSETQ) $MKKEY NIL) ((MSETQ) $MKGRID NIL)
              ((MSETQ) $MKXYAXES NIL) ((MSETQ) $MKEDGE NIL))
             T $FALSE)
            ((MCOND) ((MEQUAL) $PL $KEY) ((MSETQ) $MKKEY NIL) T $FALSE)
            ((MCOND) ((MEQUAL) $PL $GRID) ((MSETQ) $MKGRID NIL) T
             $FALSE)
            ((MCOND) ((MEQUAL) $PL $XYAXES) ((MSETQ) $MKXYAXES NIL) T
             $FALSE)
            ((MCOND) ((MEQUAL) $PL $XAXIS) ((MSETQ) $MKXAXIS NIL) T
             $FALSE)
            ((MCOND) ((MEQUAL) $PL $YAXIS) ((MSETQ) $MKYAXIS NIL) T
             $FALSE)
            ((MCOND) ((MEQUAL) $PL $EDGE) ((MSETQ) $MKEDGE NIL) T
             $FALSE))))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $XR)
         ((MPROGN) ((MSETQ) $NXR ((MPLUS) $NXR 1.))
          ((MCOND) ((MEQUAL) $NXR 2.)
           ((MRETURN)
            (($DOERR) "only one xr(xa,xb) item allowed in qdraw"))
           T $FALSE)
          ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 2.)
           ((MRETURN) (($DOERR) "xr must be of form xr(xa, xb)")) T
           $FALSE)
          ((MSETQ) $X1RR (($FLOAT) (($TARGS ARRAY) 1.)))
          ((MCOND) ((MNOT) (($NUMBERP) $X1RR))
           ((MRETURN) (($DOERR) "xr(x1,x2): x1 is not a number")) T
           $FALSE)
          ((MSETQ) $X2RR (($FLOAT) (($TARGS ARRAY) 2.)))
          ((MCOND) ((MNOT) (($NUMBERP) $X2RR))
           ((MRETURN) (($DOERR) "xr(x1,x2): x2 is not a number")) T
           $FALSE)
          ((MSETQ) $TVAL ((MEQUAL) $XRANGE ((MLIST) $X1RR $X2RR)))
          ((MSETQ) $RNGLIST (($CONS) $TVAL $RNGLIST)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $YR)
         ((MPROGN) ((MSETQ) $NYR ((MPLUS) $NYR 1.))
          ((MCOND) ((MEQUAL) $NYR 2.)
           ((MRETURN)
            (($DOERR) "only one yr(ya,yb) item allowed in qdraw"))
           T $FALSE)
          ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 2.)
           ((MRETURN) (($DOERR) "yr must be of form yr(ya, yb)")) T
           $FALSE)
          ((MSETQ) $Y1RR (($FLOAT) (($TARGS ARRAY) 1.)))
          ((MCOND) ((MNOT) (($NUMBERP) $Y1RR))
           ((MRETURN) (($DOERR) "yr(y1,y2): y1 is not a number")) T
           $FALSE)
          ((MSETQ) $Y2RR (($FLOAT) (($TARGS ARRAY) 2.)))
          ((MCOND) ((MNOT) (($NUMBERP) $Y2RR))
           ((MRETURN) (($DOERR) "yr(y1,y2): y2 is not a number")) T
           $FALSE)
          ((MSETQ) $TVAL ((MEQUAL) $YRANGE ((MLIST) $Y1RR $Y2RR)))
          ((MSETQ) $RNGLIST (($APPEND) $RNGLIST ((MLIST) $TVAL))))
         T $FALSE)))
      ((MCOND) $ANERR ((MRETURN)) T $FALSE)
      ((MDO) $IQ NIL NIL NIL $LQDA NIL
       ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
        ((MSETQ) $QT (($QDA ARRAY) $IQ)) ((MSETQ) $QTOP (($OP) $QT))
        ((MSETQ) $TARGS (($ARGS) $QT))
        ((MCOND) ((MEQUAL) $QTOP $EX)
         ((MPROGN) ((MSETQ) $NDEF T)
          ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 4.)
           ((MRETURN)
            (($DOERR) "ex() should have exactly four arguments"))
           T $FALSE)
          ((MSETQ) $EEX (($TARGS ARRAY) 1.))
          ((MCOND) ((MNOT) (($LISTP) $EEX))
           ((MSETQ) $EEX ((MLIST) $EEX)) T $FALSE)
          ((MSETQ) $HLIM (($FLOAT) (($REST) $TARGS 1.)))
          ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
           ((MRETURN) (($DOERR) "ex: hlim=[x,x1,x2]: x is a number")) T
           $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
           ((MRETURN)
            (($DOERR) "ex: hlim=[x,x1,x2]: x1 is not a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
           ((MRETURN)
            (($DOERR) "ex: hlim=[x,x1,x2]: x2 is not a number"))
           T $FALSE)
          ((MSETQ) $LE (($LENGTH) $EEX))
          ((MDO) $JQ NIL NIL NIL $LE NIL
           ((MPROGN)
            ((MCOND) (($EQNCHECK) (($EEX ARRAY) $JQ))
             ((MRETURN) (($DOERR) "you have an equation in ex() ")) T
             $FALSE)
            ((MSETQ) $TLIST (($CONS) (($EEX ARRAY) $JQ) $HLIM))
            ((MSETQ) $TVAL (($APPLY) ((MQUOTE) $EXPLICIT) $TLIST))
            ((MSETQ) $DRLIST (($APPEND) $DRLIST ((MLIST) $TVAL))))))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $IMP)
         ((MPROGN) ((MSETQ) $NDEF T)
          ((MCOND) ((MNOTEQUAL) (($LENGTH) $TARGS) 7.)
           ((MRETURN)
            (($DOERR) "imp() should have exactly seven arguments"))
           T $FALSE)
          ((MSETQ) $EEX (($TARGS ARRAY) 1.))
          ((MCOND) ((MNOT) (($LISTP) $EEX))
           ((MSETQ) $EEX ((MLIST) $EEX)) T $FALSE)
          ((MSETQ) $HVLIM (($FLOAT) (($REST) $TARGS 1.)))
          ((MCOND) (($NUMBERP) (($HVLIM ARRAY) 1.))
           ((MRETURN)
            (($DOERR) "imp: hvlim=[x,x1,x2,y,y1,y2]: x is a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 2.)))
           ((MRETURN)
            (($DOERR)
             "imp: hvlim=[x,x1,x2,y,y1,y2]: x1 is not a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 3.)))
           ((MRETURN)
            (($DOERR)
             "imp: hvlim=[x,x1,x2,y,y1,y2]: x2 is not a number"))
           T $FALSE)
          ((MCOND) (($NUMBERP) (($HVLIM ARRAY) 4.))
           ((MRETURN)
            (($DOERR) "imp: hvlim=[x,x1,x2,y,y1,y2]: y is a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 5.)))
           ((MRETURN)
            (($DOERR)
             "imp: hvlim=[x,x1,x2,y,y1,y2]: y1 is not a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HVLIM ARRAY) 6.)))
           ((MRETURN)
            (($DOERR)
             "imp: hvlim=[x,x1,x2,y,y1,y2]: y2 is not a number"))
           T $FALSE)
          ((MSETQ) $LE (($LENGTH) $EEX))
          ((MDO) $JQ NIL NIL NIL $LE NIL
           ((MPROGN)
            ((MCOND) ((MNOT) (($EQNCHECK) (($EEX ARRAY) $JQ)))
             ((MRETURN) (($DOERR) "one imp() arg is not an equation "))
             T $FALSE)
            ((MSETQ) $TLIST (($CONS) (($EEX ARRAY) $JQ) $HVLIM))
            ((MSETQ) $TVAL (($APPLY) ((MQUOTE) $IMPLICIT) $TLIST))
            ((MSETQ) $DRLIST (($APPEND) $DRLIST ((MLIST) $TVAL))))))
         T $FALSE)))
      ((MCOND) $ANERR ((MRETURN)) T $FALSE)
      ((MCOND) $NDEF
       ((MPROGN) ((MSETQ) $LENDR (($LENGTH) $DRLIST))
        ((MSETQ) $CLIST
         (($MAKELIST) ((MEQUAL) $COLOR (($CC ARRAY) (($QVAL) $KK))) $KK
          1. $LENDR))
        ((MCOND) $MKKEY
         ((MPROGN)
          ((MSETQ) $KLIST
           (($MAKELIST) ((MEQUAL) $KEY (($STRING) $KK)) $KK 1. $LENDR))
          ((MSETQ) $DRLIST
           (($FLATTEN)
            (($MAKELIST)
             ((MLIST) (($CLIST ARRAY) $KK) (($KLIST ARRAY) $KK)
              (($DRLIST ARRAY) $KK))
             $KK 1. $LENDR))))
         T ((MSETQ) $DRLIST (($JOIN) $CLIST $DRLIST)))
        ((MSETQ) $DRLIST
         (($CONS) ((MEQUAL) $LINE_WIDTH $LWVAL) $DRLIST))
        ((MSETQ) $DRLIST
         (($APPEND) $DRLIST ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
       T $FALSE)
      ((MCOND) $MKKEY
       ((MSETQ) $DRLIST
        (($APPEND) $DRLIST ((MLIST) ((MEQUAL) $KEY ""))))
       T $FALSE)
      ((MSETQ) $DRLIST
       (($APPEND) $DRLIST
        ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)
         ((MEQUAL) $TRANSPARENT T) ((MEQUAL) $POINT_SIZE $PTSDEF)
         ((MEQUAL) $POINT_TYPE $PTTDEF)
         ((MEQUAL) $LABEL_ALIGNMENT $LABADEF)
         ((MEQUAL) $HEAD_TYPE $NOFILLED) ((MEQUAL) $HEAD_ANGLE 30.)
         ((MEQUAL) $HEAD_LENGTH 0.5))))
      ((MDO) $IQ NIL NIL NIL $LQDA NIL
       ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
        ((MSETQ) $QT (($QDA ARRAY) $IQ)) ((MSETQ) $QTOP (($OP) $QT))
        ((MSETQ) $TARGS (($ARGS) $QT))
        ((MCOND) ((MEQUAL) $QTOP $KEY)
         ((MPROGN)
          ((MCOND) ((MGREATERP) (($LENGTH) $TARGS) 1.)
           ((MRETURN) (($DOERR) "use key(bottom) or key(top) ")) T
           $FALSE)
          ((MSETQ) $TT (($TARGS ARRAY) 1.))
          ((MCOND) ((MEQUAL) $TT $BOTTOM)
           ((MSETQ) $PTSLIST
            (($APPEND) $PTSLIST
             ((MLIST) ((MEQUAL) $USER_PREAMBLE "set key bottom"))))
           T
           ((MCOND) ((MEQUAL) $TT $TOP)
            ((MSETQ) $PTSLIST
             (($APPEND) $PTSLIST
              ((MLIST) ((MEQUAL) $USER_PREAMBLE "set key top"))))
            T ((MRETURN) (($DOERR) "use key(bottom) or key(top) ")))))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $LABEL)
         ((MPROGN) ((MSETQ) $NLABEL T)
          ((MDO) $KL NIL NIL NIL (($LENGTH) $TARGS) NIL
           ((MPROGN) ((MSETQ) $LAB_ARGS (($TARGS ARRAY) $KL))
            ((MCOND) ((MEQUAL) (($LENGTH) $LAB_ARGS) 3.)
             ((MSETQ) $LABELLIST
              (($APPEND) $LABELLIST
               ((MLIST)
                (($APPLY) ((MQUOTE) $LABEL) ((MLIST) $LAB_ARGS)))))
             T
             ((MPROGN)
              ((MSETQ) $ACOLOR
               ((MQAPPLY ARRAY) (($ARGS) (($LAB_ARGS ARRAY) 4.)) 1.))
              ((MSETQ) $LABELLIST
               (($APPEND) $LABELLIST
                ((MLIST) ((MEQUAL) $COLOR $ACOLOR))))
              ((MSETQ) $LABELLIST
               (($APPEND) $LABELLIST
                ((MLIST)
                 (($APPLY) ((MQUOTE) $LABEL)
                  ((MLIST) (($REST) $LAB_ARGS ((MMINUS) 1.)))))))
              ((MSETQ) $LABELLIST
               (($APPEND) $LABELLIST
                ((MLIST) ((MEQUAL) $COLOR $BLACK)))))))))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $LABEL_ALIGN)
         ((MPROGN)
          ((MCOND) ((MGREATERP) (($LENGTH) $TARGS) 1.)
           ((MRETURN)
            (($DOERR) " use label_align(p) where p is l, r, or c "))
           T $FALSE)
          ((MSETQ) $PL (($TARGS ARRAY) 1.))
          ((MCOND) ((MNOT) (($INLISTP) $PL ((MLIST) $L $R $C)))
           ((MRETURN)
            (($DOERR) " use label_align(p) where p is l, r, or c "))
           T $FALSE)
          ((MCOND) ((MEQUAL) $PL $L) ((MSETQ) $LABADEF $LEFT) T $FALSE)
          ((MCOND) ((MEQUAL) $PL $R) ((MSETQ) $LABADEF $RIGHT) T
           $FALSE)
          ((MCOND) ((MEQUAL) $PL $C) ((MSETQ) $LABADEF $CENTER) T
           $FALSE)
          ((MSETQ) $LABELLIST
           (($APPEND) $LABELLIST
            ((MLIST) ((MEQUAL) $LABEL_ALIGNMENT $LABADEF)))))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $EX1)
         ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MLESSP) $NARGS 4.)
           ((MPROGN)
            (($PRINT)
             "ex1 syntax: ex1(expr,x,x1,x2,lc(c),lw(n),lk(string) ) ")
            (($PRINT) "first four args required")
            ((MRETURN)
             (($DOERR)
              "only lc(c), lw(n), and lk(string) options can be included")))
           T $FALSE)
          ((MCOND) ((MGREATERP) $NARGS 7.)
           ((MRETURN)
            (($DOERR)
             "ex1: only lc(c), lw(n), and lk(string) options allowed "))
           T $FALSE)
          ((MSETQ) $ELIST
           (($REST) $TARGS ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
          ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
           ((MRETURN) (($DOERR) "ex1: first arg should not be a list"))
           T $FALSE)
          ((MSETQ) $HLIM (($FLOAT) (($REST) $ELIST 1.)))
          ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
           ((MRETURN) (($DOERR) "ex1: hlim=[x,x1,x2]: x is a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
           ((MRETURN)
            (($DOERR) "ex1: hlim=[x,x1,x2]: x1 is not a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
           ((MRETURN)
            (($DOERR) "ex1: hlim=[x,x1,x2]: x2 is not a number"))
           T $FALSE)
          ((MSETQ) $PTSL
           ((MLIST) (($APPLY) ((MQUOTE) $EXPLICIT) $ELIST)))
          ((MSETQ) $PR (($REST) $TARGS 4.))
          ((MSETQ) $LP (($LENGTH) $PR))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "ex1 options: lc(color), lw(n), lk(string) "
               ((MLIST) $LC $LW $LK)))
             ((MRETURN)) T $FALSE)
            (($SETOPTIONS) $PR))
           T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $IMP1)
         ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MLESSP) $NARGS 7.)
           ((MRETURN)
            (($DOERR) "imp1 syntax: imp1(eqn,x,x1,x2,y,y1,y2,options)"))
           T $FALSE)
          ((MCOND) ((MGREATERP) $NARGS 10.)
           ((MRETURN)
            (($DOERR)
             "imp1: only lc(c), lw(n), and lk(string) options allowed "))
           T $FALSE)
          ((MSETQ) $ELIST
           (($REST) $TARGS ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 7.)))))
          ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
           ((MRETURN)
            (($DOERR) "imp1: first arg should not be a list"))
           T $FALSE)
          ((MCOND) ((MNOT) (($EQNCHECK) (($ELIST ARRAY) 1.)))
           ((MRETURN)
            (($DOERR) "imp1: first arg should be an equation "))
           T $FALSE)
          ((MSETQ) $HLIM (($FLOAT) (($REST) $ELIST 1.)))
          ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
           ((MRETURN)
            (($DOERR)
             "imp1(eqn,x,x1,x2,y,y1,y2,options): x must be a symbol"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
           ((MRETURN)
            (($DOERR)
             "imp1(eqn,x,x1,x2,y,y1,y2,options): x1 must be a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
           ((MRETURN)
            (($DOERR)
             "imp1(eqn,x,x1,x2,y,y1,y2,options): x2 must be a number"))
           T $FALSE)
          ((MCOND) (($NUMBERP) (($HLIM ARRAY) 4.))
           ((MRETURN)
            (($DOERR)
             "imp1(eqn,x,x1,x2,y,y1,y2,options): y must be a symbol"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 5.)))
           ((MRETURN)
            (($DOERR)
             "imp1(eqn,x,x1,x2,y,y1,y2,options): y1 must be a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 6.)))
           ((MRETURN)
            (($DOERR)
             "imp1(eqn,x,x1,x2,y,y1,y2,options): y2 must be a number"))
           T $FALSE)
          ((MSETQ) $PTSL
           ((MLIST) (($APPLY) ((MQUOTE) $IMPLICIT) $ELIST)))
          ((MSETQ) $PR (($REST) $TARGS 7.))
          ((MSETQ) $LP (($LENGTH) $PR))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "imp1 options: lc(color), lw(n), lk(string) "
               ((MLIST) $LC $LW $LK)))
             ((MRETURN)) T $FALSE)
            (($SETOPTIONS) $PR))
           T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $CONTOUR)
         ((MPROGN) (($PRINT) "   contour working... ")
          ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MLESSP) $NARGS 8.)
           ((MRETURN)
            (($DOERR)
             "contour syntax: contour(expr,x,x1,x2,y,y1,y2,cvals(v1,v2,...),options )
                            or contour(expr,x,x1,x2,y,y1,y2, crange(n,min,max),options )"))
           T $FALSE)
          ((MSETQ) $ELIST (($MAKELIST) (($TARGS ARRAY) $JJ) $JJ 1. 7.))
          ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
           ((MRETURN)
            (($DOERR)
             "contour: first arg should be an expression depending on
                            two variables "))
           T $FALSE)
          ((MCOND) (($EQNCHECK) (($ELIST ARRAY) 1.))
           ((MRETURN)
            (($DOERR) "contour: first arg should be an expression "))
           T $FALSE)
          ((MSETQ) $HLIM (($FLOAT) (($REST) $ELIST 1.)))
          ((MCOND) (($NUMBERP) (($HLIM ARRAY) 1.))
           ((MRETURN)
            (($DOERR)
             "contour(expr,x,x1,x2,y,y1,y2,options): x must be a symbol"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 2.)))
           ((MRETURN)
            (($DOERR)
             "contour(expr,x,x1,x2,y,y1,y2,options): x1 must be a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 3.)))
           ((MRETURN)
            (($DOERR)
             "contour(expr,x,x1,x2,y,y1,y2,options): x2 must be a number"))
           T $FALSE)
          ((MCOND) (($NUMBERP) (($HLIM ARRAY) 4.))
           ((MRETURN)
            (($DOERR)
             "contour(expr,x,x1,x2,y,y1,y2,options): y must be a symbol"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 5.)))
           ((MRETURN)
            (($DOERR)
             "contour(expr,x,x1,x2,y,y1,y2,options): y1 must be a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($HLIM ARRAY) 6.)))
           ((MRETURN)
            (($DOERR)
             "contour(expr,x,x1,x2,y,y1,y2,options): y2 must be a number"))
           T $FALSE)
          ((MSETQ) $PL (($TARGS ARRAY) 8.))
          ((MCOND) (($ATOM) $PL)
           ((MRETURN)
            (($DOERR)
             "contour eighth arg: cvals(v1,v2,...) or crange(n,min,max)"))
           T $FALSE)
          ((MSETQ) $PTSL ((MLIST)))
          ((MCOND) ((MEQUAL) (($OP) $PL) $CVALS)
           ((MPROGN) ((MSETQ) $TT (($ARGS) $PL))
            ((MDOIN) $CVAL $TT NIL NIL NIL NIL
             ((MPROGN) ((MSETQ) $PTL $HLIM)
              ((MSETQ) $PTL
               (($CONS) ((MEQUAL) (($FIRST) $ELIST) $CVAL) $PTL))
              ((MSETQ) $PTSL
               (($APPEND) $PTSL
                ((MLIST) (($APPLY) ((MQUOTE) $IMPLICIT) $PTL)))))))
           T
           ((MCOND) ((MEQUAL) (($OP) $PL) $CRANGE)
            ((MPROGN) ((MSETQ) $TT (($ARGS) $PL))
             ((MCOND) ((MNOTEQUAL) (($LENGTH) $TT) 3.)
              ((MRETURN)
               (($DOERR)
                "contour last arg: cvals(v1,...) or crange(n,min,max)"))
              T $FALSE)
             ((MSETQ) $CNUM (($FIRST) $TT))
             ((MCOND) ((MNOT) (($INTEGERP) $CNUM))
              ((MRETURN)
               (($DOERR)
                "crange(n,min,max): n must be literal integer, like 10"))
              T $FALSE)
             ((MCOND) ((MEQUAL) $CNUM 0.)
              ((MRETURN)
               (($DOERR) "crange(n,min,max): n cannot be zero "))
              T $FALSE)
             ((MCOND) ((MNOT) (($NUMBERP) (($TT ARRAY) 2.)))
              ((MRETURN)
               (($DOERR) "crange(n,min,max): min must be a number"))
              T $FALSE)
             ((MCOND) ((MNOT) (($NUMBERP) (($TT ARRAY) 3.)))
              ((MRETURN)
               (($DOERR) "crange(n,min,max): max must be a number"))
              T $FALSE)
             ((MCOND) ((MLESSP) (($TT ARRAY) 3.) (($TT ARRAY) 2.))
              ((MRETURN)
               (($DOERR)
                "crange(n,min,max): max must be greater than min "))
              T $FALSE)
             ((MSETQ) $CDV
              (($FLOAT)
               ((MABS)
                ((MQUOTIENT)
                 ((MPLUS) (($TT ARRAY) 3.) ((MMINUS) (($TT ARRAY) 2.)))
                 $CNUM))))
             ((MDO) $KK NIL NIL NIL $CNUM NIL
              ((MPROGN) ((MSETQ) $PTL $HLIM)
               ((MSETQ) $CVAL
                ((MPLUS) (($TT ARRAY) 2.)
                 ((MTIMES) ((MPLUS) $KK ((MMINUS) 1.)) $CDV)))
               ((MSETQ) $PTL
                (($CONS) ((MEQUAL) (($FIRST) $ELIST) $CVAL) $PTL))
               ((MSETQ) $PTSL
                (($APPEND) $PTSL
                 ((MLIST) (($APPLY) ((MQUOTE) $IMPLICIT) $PTL)))))))
            T
            ((MRETURN)
             (($DOERR)
              "contour last arg: cvals(v1,...) or crange(n,min,max)"))))
          ((MSETQ) $MKGRID NIL) ((MSETQ) $MKXAXIS NIL)
          ((MSETQ) $MKYAXIS NIL) ((MSETQ) $PR (($REST) $TARGS 8.))
          ((MSETQ) $LP (($LENGTH) $PR)) ((MSETQ) $NLW NIL)
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "contour options: lc(color), lw(n), add(options) "
               ((MLIST) $LC $LW $ADD)))
             ((MRETURN)) T $FALSE)
            ((MDO) $KK NIL NIL NIL $LP NIL
             ((MPROGN) ((MSETQ) $CT (($PR ARRAY) $KK))
              ((MSETQ) $CTOP (($OP) $CT))
              ((MSETQ) $CTARGS (($ARGS) $CT))
              ((MCOND) ((MEQUAL) $CTOP $LC) (($SETNPC) $CTARGS) T
               $FALSE)
              ((MCOND) ((MEQUAL) $CTOP $LW)
               ((MCOND) ((MEQUAL) (($LENGTH) $CTARGS) 1.)
                ((MPROGN) ((MSETQ) $NLW T)
                 ((MSETQ) $PTSL
                  (($CONS) ((MEQUAL) $LINE_WIDTH (($CTARGS ARRAY) 1.))
                   $PTSL))
                 ((MSETQ) $PTSL
                  (($APPEND) $PTSL
                   ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)))))
                T ((MRETURN) (($DOERR) "use lw(5) for example ")))
               T $FALSE)
              ((MCOND) ((MEQUAL) $CTOP $ADD)
               ((MDO) $LL NIL NIL NIL (($LENGTH) $CTARGS) NIL
                ((MCOND) ((MEQUAL) (($CTARGS ARRAY) $LL) $GRID)
                 ((MSETQ) $MKGRID T) T
                 ((MCOND) ((MEQUAL) (($CTARGS ARRAY) $LL) $XAXIS)
                  ((MSETQ) $MKXAXIS T) T
                  ((MCOND) ((MEQUAL) (($CTARGS ARRAY) $LL) $YAXIS)
                   ((MSETQ) $MKYAXIS T) T
                   ((MCOND) ((MEQUAL) (($CTARGS ARRAY) $LL) $XYAXES)
                    ((MPROGN) ((MSETQ) $MKXAXIS T)
                     ((MSETQ) $MKYAXIS T))
                    T
                    ((MRETURN)
                     (($DOERR)
                      "contour: add(grid,xaxis,yaxis,xyaxes) ")))))))
               T $FALSE))))
           T $FALSE)
          ((MCOND) ((MNOT) $NLW)
           ((MPROGN)
            ((MSETQ) $PTSL (($CONS) ((MEQUAL) $LINE_WIDTH 1.) $PTSL))
            ((MSETQ) $PTSL
             (($APPEND) $PTSL ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF)))))
           T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $PARA)
         ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MLESSP) $NARGS 5.)
           ((MPROGN)
            (($PRINT)
             "para syntax: para(xofu,yofu,u,u1,u2,lc(c),lw(n),lk(string) ) ")
            (($PRINT) "first five args are required")
            ((MRETURN)
             (($DOERR)
              "only lc(c), lw(n), and lk(string) options can be included")))
           T $FALSE)
          ((MCOND) ((MGREATERP) $NARGS 8.)
           ((MRETURN)
            (($DOERR)
             "para: only lc(c), lw(n), and lk(string) options allowed "))
           T $FALSE)
          ((MSETQ) $ELIST
           (($REST) $TARGS ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 5.)))))
          ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
           ((MRETURN)
            (($DOERR) "para: first arg should not be a list"))
           T $FALSE)
          ((MSETQ) $ULIM (($FLOAT) (($REST) $ELIST 2.)))
          ((MCOND) (($NUMBERP) (($ULIM ARRAY) 1.))
           ((MRETURN)
            (($DOERR) "para: ulim=[var,var1,var2]: var is a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 2.)))
           ((MRETURN)
            (($DOERR)
             "para: ulim=[var,var1,var2]: var1 is not a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 3.)))
           ((MRETURN)
            (($DOERR)
             "para: ulim=[var,var1,var2]: var2 is not a number"))
           T $FALSE)
          ((MSETQ) $PTSL
           ((MLIST) (($APPLY) ((MQUOTE) $PARAMETRIC) $ELIST)))
          ((MSETQ) $PR (($REST) $TARGS 5.))
          ((MSETQ) $LP (($LENGTH) $PR))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "para options: lc(color), lw(n), lk(string) "
               ((MLIST) $LC $LW $LK)))
             ((MRETURN)) T $FALSE)
            (($SETOPTIONS) $PR))
           T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $POLAR)
         ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MLESSP) $NARGS 4.)
           ((MPROGN)
            (($PRINT)
             "polar syntax: polar(roftheta,theta,thetamin,thetamax,lc(c),lw(w),lk(string) ) ")
            (($PRINT) "first four args are required")
            ((MRETURN)
             (($DOERR)
              "only lc(c), lw(n), and lk(string) options can be included")))
           T $FALSE)
          ((MCOND) ((MGREATERP) $NARGS 7.)
           ((MRETURN)
            (($DOERR)
             "polar: only lc(c), lw(n), and lk(string) options allowed "))
           T $FALSE)
          ((MSETQ) $ELIST
           (($REST) $TARGS ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
          ((MCOND) (($LISTP) (($ELIST ARRAY) 1.))
           ((MRETURN)
            (($DOERR) "polar: first arg should not be a list"))
           T $FALSE)
          ((MSETQ) $ULIM (($FLOAT) (($REST) $ELIST 1.)))
          ((MCOND) (($NUMBERP) (($ULIM ARRAY) 1.))
           ((MRETURN)
            (($DOERR) "polar: ulim=[var,var1,var2]: var is a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 2.)))
           ((MRETURN)
            (($DOERR)
             "polar: ulim=[var,var1,var2]: var1 is not a number"))
           T $FALSE)
          ((MCOND) ((MNOT) (($NUMBERP) (($ULIM ARRAY) 3.)))
           ((MRETURN)
            (($DOERR)
             "polar: ulim=[var,var1,var2]: var2 is not a number"))
           T $FALSE)
          ((MSETQ) $PTSL ((MLIST) (($APPLY) ((MQUOTE) $POLAR) $ELIST)))
          ((MSETQ) $PR (($REST) $TARGS 4.))
          ((MSETQ) $LP (($LENGTH) $PR))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "polar options: lc(color), lw(n), lk(string) "
               ((MLIST) $LC $LW $LK)))
             ((MRETURN)) T $FALSE)
            (($SETOPTIONS) $PR))
           T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $CIRCLE)
         ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MLESSP) $NARGS 3.)
           ((MRETURN) (($DOERR) "circle: at least three args needed"))
           T $FALSE)
          ((MSETQ) $ELIST
           (($REST) $TARGS ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 3.)))))
          ((MSETQ) $PR (($REST) $TARGS 3.))
          ((MSETQ) $LP (($LENGTH) $PR))
          ((MSETQ) $PTSL
           ((MLIST)
            (($ELLIPSE) (($ELIST ARRAY) 1.) (($ELIST ARRAY) 2.)
             (($ELIST ARRAY) 3.) (($ELIST ARRAY) 3.) 0. 360.)))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "circle options: lc(color), lw(n), fill(color) "
               ((MLIST) $LC $LW $FILL)))
             ((MRETURN)) T $FALSE)
            (($SETOPTIONS) $PR))
           T $FALSE)
          ((MCOND) $ANERR ((MRETURN)) T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $ELLIPSE)
         ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MLESSP) $NARGS 6.)
           ((MRETURN) (($DOERR) "ellipse: at least six args needed")) T
           $FALSE)
          ((MSETQ) $ELIST
           (($REST) $TARGS ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 6.)))))
          ((MSETQ) $PR (($REST) $TARGS 6.))
          ((MSETQ) $LP (($LENGTH) $PR))
          ((MSETQ) $PTSL
           ((MLIST) (($APPLY) ((MQUOTE) $ELLIPSE) $ELIST)))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "ellipse options: lc(color), lw(n), fill(color) "
               ((MLIST) $LC $LW $FILL)))
             ((MRETURN)) T $FALSE)
            (($SETOPTIONS) $PR))
           T $FALSE)
          ((MCOND) $ANERR ((MRETURN)) T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $LINE)
         ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MLESSP) $NARGS 4.)
           ((MRETURN) (($DOERR) "line: at least four args needed")) T
           $FALSE)
          ((MSETQ) $ELIST
           (($REST) $TARGS ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
          ((MCOND) ((MNOTEQUAL) (($LENGTH) $ELIST) 4.)
           ((MRETURN) (($DOERR) "line: at least four args needed")) T
           $FALSE)
          ((MSETQ) $PTSL
           ((MLIST)
            (($POINTS)
             ((MLIST) (($REST) $ELIST ((MMINUS) 2.))
              (($REST) $ELIST 2.)))))
          ((MSETQ) $PR (($REST) $TARGS 4.))
          ((MSETQ) $LP (($LENGTH) $PR))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "line options: lc(color), lw(n), lk(string) "
               ((MLIST) $LC $LW $LK)))
             ((MRETURN)) T $FALSE)
            (($SETOPTIONS) $PR))
           T $FALSE)
          ((MSETQ) $PTSL (($CONS) ((MEQUAL) $POINTS_JOINED T) $PTSL))
          ((MSETQ) $PTSL
           (($CONS) ((MEQUAL) $POINT_TYPE ((MMINUS) 1.)) $PTSL))
          ((MSETQ) $PTSL
           (($APPEND) $PTSL
            ((MLIST) ((MEQUAL) $POINTS_JOINED NIL)
             ((MEQUAL) $POINT_TYPE $PTTDEF))))
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $VECTOR)
         ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MLESSP) $NARGS 2.)
           ((MRETURN) (($DOERR) "vector: at least two args needed")) T
           $FALSE)
          ((MSETQ) $ELIST
           (($REST) $TARGS ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 2.)))))
          ((MDO) $JQ NIL NIL NIL 2. NIL
           ((MCOND) ((MNOT) (($LISTP) (($ELIST ARRAY) $JQ)))
            ((MRETURN) (($DOERR) "vector([x,y],[dx,dy],options )")) T
            $FALSE))
          ((MSETQ) $PTSL
           ((MLIST) (($APPLY) ((MQUOTE) $VECTOR) $ELIST)))
          ((MSETQ) $PR (($REST) $TARGS 2.))
          ((MSETQ) $LP (($LENGTH) $PR))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "vector options: lc(color), lw(n), lk(string), 
                            ha(thdeg), hb(v), hl(v), ht(v) "
               ((MLIST) $LC $LW $LK $HA $HB $HL $HT)))
             ((MRETURN)) T $FALSE)
            (($SETOPTIONS) $PR)
            ((MDO) $JQ NIL NIL NIL $LP NIL
             ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
              ((MSETQ) $TT (($PR ARRAY) $JQ))
              ((MSETQ) $TTOP (($OP) $TT))
              ((MSETQ) $TTARGS (($ARGS) $TT))
              ((MCOND) ((MEQUAL) $TTOP $HA)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                 ((MRETURN)
                  (($DOERR) "vector: use ha(45) for example "))
                 T $FALSE)
                ((MSETQ) $PL (($FLOAT) (($TTARGS ARRAY) 1.)))
                ((MCOND) ((MNOT) (($NUMBERP) $PL))
                 ((MRETURN)
                  (($DOERR) "vector: use ha(45) for example "))
                 T $FALSE)
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $HEAD_ANGLE $PL) $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $TTOP $HB)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                 ((MRETURN) (($DOERR) "vector: use hb(t) or hb(f) ")) T
                 $FALSE)
                ((MSETQ) $PL (($TTARGS ARRAY) 1.))
                ((MCOND) ((MNOT) (($INLISTP) $PL ((MLIST) $T $F)))
                 ((MRETURN) (($DOERR) "vector: use hb(t) or hb(f) ")) T
                 $FALSE)
                ((MCOND) ((MEQUAL) $PL $T)
                 ((MSETQ) $PTSL
                  (($CONS) ((MEQUAL) $HEAD_BOTH T) $PTSL))
                 T $FALSE)
                ((MCOND) ((MEQUAL) $PL $F)
                 ((MSETQ) $PTSL
                  (($CONS) ((MEQUAL) $HEAD_BOTH NIL) $PTSL))
                 T $FALSE))
               T $FALSE)
              ((MCOND) ((MEQUAL) $TTOP $HL)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                 ((MRETURN)
                  (($DOERR) "vector: use hl(0.7) for example "))
                 T $FALSE)
                ((MSETQ) $PL (($FLOAT) (($TTARGS ARRAY) 1.)))
                ((MCOND) ((MNOT) (($NUMBERP) $PL))
                 ((MRETURN)
                  (($DOERR) "vector: use hl(0.7) for example "))
                 T $FALSE)
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $HEAD_LENGTH $PL) $PTSL)))
               T $FALSE)
              ((MCOND) ((MEQUAL) $TTOP $HT)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                 ((MRETURN)
                  (($DOERR) "vector: use ht(e), ht(f), or ht(n) "))
                 T $FALSE)
                ((MSETQ) $PL (($TTARGS ARRAY) 1.))
                ((MCOND) ((MNOT) (($INLISTP) $PL ((MLIST) $E $F $N)))
                 ((MRETURN)
                  (($DOERR) "vector: use ht(e), ht(f), or ht(n) "))
                 T $FALSE)
                ((MCOND) ((MEQUAL) $PL $E)
                 ((MSETQ) $PTSL
                  (($CONS) ((MEQUAL) $HEAD_TYPE $EMPTY) $PTSL))
                 T $FALSE)
                ((MCOND) ((MEQUAL) $PL $F)
                 ((MSETQ) $PTSL
                  (($CONS) ((MEQUAL) $HEAD_TYPE $FILLED) $PTSL))
                 T $FALSE)
                ((MCOND) ((MEQUAL) $PL $N)
                 ((MSETQ) $PTSL
                  (($CONS) ((MEQUAL) $HEAD_TYPE $NOFILLED) $PTSL))
                 T $FALSE))
               T $FALSE))))
           T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $ARROWHEAD)
         ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MLESSP) $NARGS 4.)
           ((MRETURN)
            (($DOERR) "try arrowhead(0,0,45,0.3) for example "))
           T $FALSE)
          ((MSETQ) $ELIST
           (($FLOAT)
            (($REST) $TARGS ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.))))))
          ((MDO) $JQ NIL NIL NIL 4. NIL
           ((MCOND) ((MNOT) (($NUMBERP) (($ELIST ARRAY) $JQ)))
            ((MRETURN)
             (($DOERR) "arrowhead: first 4 args must be numbers"))
            T $FALSE))
          ((MCOND) $ANERR ((MRETURN)) T $FALSE) ((MSETQ) $PHI 0.44)
          ((MSETQ) $XX (($ELIST ARRAY) 1.))
          ((MSETQ) $YY (($ELIST ARRAY) 2.))
          ((MSETQ) $TH
           (($FLOAT)
            ((MQUOTIENT) ((MTIMES) $%PI (($ELIST ARRAY) 3.)) 180.)))
          ((MSETQ) $SA (($ELIST ARRAY) 4.))
          ((MSETQ) $AX
           ((MTIMES) $SA ((%COS) ((MPLUS) $TH ((MMINUS) $PHI)))))
          ((MSETQ) $AY
           ((MTIMES) $SA ((%SIN) ((MPLUS) $TH ((MMINUS) $PHI)))))
          ((MSETQ) $BX ((MTIMES) $SA ((%COS) ((MPLUS) $TH $PHI))))
          ((MSETQ) $BY ((MTIMES) $SA ((%SIN) ((MPLUS) $TH $PHI))))
          ((MSETQ) $PTSL
           ((MLIST)
            (($POINTS)
             ((MLIST)
              ((MLIST) ((MPLUS) $XX ((MMINUS) $AX))
               ((MPLUS) $YY ((MMINUS) $AY)))
              ((MLIST) $XX $YY)))
            (($POINTS)
             ((MLIST)
              ((MLIST) ((MPLUS) $XX ((MMINUS) $BX))
               ((MPLUS) $YY ((MMINUS) $BY)))
              ((MLIST) $XX $YY)))))
          ((MSETQ) $PR (($REST) $TARGS 4.))
          ((MSETQ) $LP (($LENGTH) $PR))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR "arrowhead options: lc(color), lw(n)  "
               ((MLIST) $LC $LW)))
             ((MRETURN)) T $FALSE)
            (($SETOPTIONS) $PR))
           T $FALSE)
          ((MSETQ) $PTSL (($CONS) ((MEQUAL) $POINTS_JOINED T) $PTSL))
          ((MSETQ) $PTSL
           (($CONS) ((MEQUAL) $POINT_TYPE ((MMINUS) 1.)) $PTSL))
          ((MSETQ) $PTSL
           (($APPEND) $PTSL
            ((MLIST) ((MEQUAL) $POINTS_JOINED NIL)
             ((MEQUAL) $POINT_TYPE $PTTDEF))))
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $RECT)
         ((MPROGN) ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MLESSP) $NARGS 4.)
           ((MRETURN) (($DOERR) "rect: at least four args needed")) T
           $FALSE)
          ((MSETQ) $ELIST
           (($REST) $TARGS ((MMINUS) ((MPLUS) $NARGS ((MMINUS) 4.)))))
          ((MCOND) ((MNOTEQUAL) (($LENGTH) $ELIST) 4.)
           ((MRETURN) (($DOERR) "rect: at least four args needed")) T
           $FALSE)
          ((MSETQ) $PR (($REST) $TARGS 4.))
          ((MSETQ) $LP (($LENGTH) $PR))
          ((MSETQ) $PTSL
           ((MLIST)
            (($RECTANGLE) (($REST) $ELIST ((MMINUS) 2.))
             (($REST) $ELIST 2.))))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "rect options: lc(color), lw(n), fill(color) "
               ((MLIST) $LC $LW $FILL)))
             ((MRETURN)) T $FALSE)
            (($SETOPTIONS) $PR))
           T $FALSE)
          ((MCOND) $ANERR ((MRETURN)) T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $POLY)
         ((MPROGN) ((MSETQ) $PL (($FIRST) $TARGS))
          ((MCOND) ((MNOT) (($LISTP) $PL))
           ((MRETURN)
            (($DOERR) "first arg of poly:[ [x0,y0],[x1,y1],...]"))
           T $FALSE)
          ((MSETQ) $PL1 (($FIRST) $PL))
          ((MCOND) ((MNOT) (($LISTP) $PL1))
           ((MRETURN)
            (($DOERR) "first arg of poly:[ [x0,y0],[x1,y1],...]"))
           T $FALSE)
          ((MCOND) ((MNOTEQUAL) (($LENGTH) $PL1) 2.)
           ((MRETURN)
            (($DOERR) "first arg of poly:[ [x0,y0],[x1,y1],...]"))
           T $FALSE)
          ((MSETQ) $PTSL ((MLIST) (($POLYGON) $PL)))
          ((MSETQ) $PR (($REST) $TARGS)) ((MSETQ) $LP (($LENGTH) $PR))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "poly options: lc(color), lw(n), fill(color) "
               ((MLIST) $LC $LW $FILL)))
             ((MRETURN)) T $FALSE)
            (($SETOPTIONS) $PR))
           T $FALSE)
          ((MCOND) $ANERR ((MRETURN)) T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $PTS)
         ((MPROGN) ((MSETQ) $PL (($FIRST) $TARGS))
          ((MCOND) ((MNOT) (($LISTP) $PL))
           ((MRETURN) (($DOERR) "first arg of pts must be a list")) T
           $FALSE)
          ((MCOND) ((MEQUAL) (($LENGTH) $PL) 2.)
           ((MCOND) ((MNOT) (($LISTP) (($PL ARRAY) 1.)))
            ((MSETQ) $PL ((MLIST) $PL)) T $FALSE)
           T $FALSE)
          ((MSETQ) $PTSL ((MLIST) (($POINTS) $PL)))
          ((MSETQ) $PR (($REST) $TARGS)) ((MSETQ) $LP (($LENGTH) $PR))
          ((MCOND) ((MGREATERP) $LP 0.)
           ((MPROGN)
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR
               "pts options: pc(color), ps(size), pk(string), pt(type), pj(lw) "
               ((MLIST) $PC $PS $PT $PJ $PK)))
             ((MRETURN)) T $FALSE)
            ((MDO) $JQ NIL NIL NIL $LP NIL
             ((MPROGN) ((MCOND) $ANERR ((MRETURN)) T $FALSE)
              ((MSETQ) $TT (($PR ARRAY) $JQ))
              ((MSETQ) $TTOP (($OP) $TT))
              ((MSETQ) $TTARGS (($ARGS) $TT))
              ((MCOND) ((MEQUAL) $TTOP $PC)
               ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                ((MPROGN)
                 ((MSETQ) $PTSL
                  (($CONS) ((MEQUAL) $COLOR (($TTARGS ARRAY) 1.))
                   $PTSL))
                 ((MSETQ) $PTSL
                  (($APPEND) $PTSL ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
                T
                ((MRETURN) (($DOERR) "pts: use pc(blue) for example")))
               T $FALSE)
              ((MCOND) ((MEQUAL) $TTOP $PS)
               ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                ((MPROGN)
                 ((MSETQ) $PTSL
                  (($CONS) ((MEQUAL) $POINT_SIZE (($TTARGS ARRAY) 1.))
                   $PTSL))
                 ((MSETQ) $PTSL
                  (($APPEND) $PTSL
                   ((MLIST) ((MEQUAL) $POINT_SIZE $PTSDEF)))))
                T ((MRETURN) (($DOERR) "pts: use ps(2) for example ")))
               T $FALSE)
              ((MCOND) ((MEQUAL) $TTOP $PT)
               ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                ((MPROGN)
                 ((MSETQ) $PTSL
                  (($CONS) ((MEQUAL) $POINT_TYPE (($TTARGS ARRAY) 1.))
                   $PTSL))
                 ((MSETQ) $PTSL
                  (($APPEND) $PTSL
                   ((MLIST) ((MEQUAL) $POINT_TYPE $PTTDEF)))))
                T ((MRETURN) (($DOERR) "pts: use pt(3) for example ")))
               T $FALSE)
              ((MCOND) ((MEQUAL) $TTOP $PJ)
               ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                ((MPROGN)
                 ((MCOND) ((MNOTEQUAL) (($TTARGS ARRAY) 1.) $LWDEF)
                  ((MSETQ) $PTSL
                   (($CONS) ((MEQUAL) $LINE_WIDTH (($TTARGS ARRAY) 1.))
                    $PTSL))
                  T $FALSE)
                 ((MSETQ) $PTSL
                  (($CONS) ((MEQUAL) $POINTS_JOINED T) $PTSL))
                 ((MSETQ) $PTSL
                  (($APPEND) $PTSL
                   ((MLIST) ((MEQUAL) $POINTS_JOINED NIL))))
                 ((MCOND) ((MNOTEQUAL) (($TTARGS ARRAY) 1.) $LWDEF)
                  ((MSETQ) $PTSL
                   (($APPEND) $PTSL
                    ((MLIST) ((MEQUAL) $LINE_WIDTH $LWDEF))))
                  T $FALSE))
                T ((MRETURN) (($DOERR) "pts: use pj(2) for example ")))
               T $FALSE)
              ((MCOND) ((MEQUAL) $TTOP $PK)
               ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
                ((MPROGN)
                 ((MSETQ) $PTSL
                  (($CONS) ((MEQUAL) $KEY (($TTARGS ARRAY) 1.)) $PTSL))
                 ((MSETQ) $PTSL
                  (($APPEND) $PTSL ((MLIST) ((MEQUAL) $KEY "")))))
                T
                ((MRETURN)
                 (($DOERR) "pts: use pk(\"case 1\") for example ")))
               T $FALSE))))
           T $FALSE)
          ((MCOND) $ANERR ((MRETURN)) T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $ERRORBARS)
         ((MPROGN)
          ((MCOND) ((MEQUAL) (($LENGTH) $TARGS) 1.)
           ((MRETURN) (($DOERR) "errorbars(ptl,dyl,options")) T $FALSE)
          ((MSETQ) $PTL (($FIRST) $TARGS))
          ((MCOND) ((MNOT) (($LISTP) $PTL))
           ((MRETURN)
            (($DOERR)
             "first arg of errorbars must be a list of points"))
           T $FALSE)
          ((MSETQ) $LE (($LENGTH) $PTL))
          ((MCOND) ((MEQUAL) $LE 2.)
           ((MCOND) ((MNOT) (($LISTP) (($PTL ARRAY) 1.)))
            ((MSETQ) $PTL ((MLIST) $PTL)) T $FALSE)
           T $FALSE)
          ((MSETQ) $LE (($LENGTH) $PTL))
          ((MSETQ) $DYL (($SECOND) $TARGS))
          ((MCOND) ((MNOT) (($LISTP) $DYL))
           ((MSETQ) $DYL ((MLIST) $DYL)) T $FALSE)
          ((MSETQ) $PTSL
           ((MLIST) ((MEQUAL) $POINTS_JOINED T)
            ((MEQUAL) $POINT_TYPE ((MMINUS) 1.))))
          ((MCOND) ((MEQUAL) (($LENGTH) $DYL) 1.)
           ((MPROGN) ((MSETQ) $DY (($DYL ARRAY) 1.))
            ((MDO) $JQ NIL NIL NIL (($LENGTH) $PTL) NIL
             ((MSETQ) $PTSL
              (($APPEND) $PTSL
               ((MLIST)
                (($POINTS)
                 ((MLIST)
                  ((MLIST) ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                   ((MPLUS) ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.)
                    ((MMINUS) $DY)))
                  ((MLIST) ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                   ((MPLUS) ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.)
                    $DY)))))))))
           T
           ((MPROGN)
            ((MCOND) ((MNOTEQUAL) (($LENGTH) $DYL) $LE)
             ((MRETURN)
              (($DOERR)
               "number of errorbars must equal number of points"))
             T $FALSE)
            ((MDO) $JQ NIL NIL NIL (($LENGTH) $PTL) NIL
             ((MSETQ) $PTSL
              (($APPEND) $PTSL
               ((MLIST)
                (($POINTS)
                 ((MLIST)
                  ((MLIST) ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                   ((MPLUS) ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.)
                    ((MMINUS) (($DYL ARRAY) $JQ))))
                  ((MLIST) ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 1.)
                   ((MPLUS) ((MQAPPLY ARRAY) (($PTL ARRAY) $JQ) 2.)
                    (($DYL ARRAY) $JQ)))))))))))
          ((MSETQ) $ERRBLW 1.)
          ((MCOND) ((MGREATERP) (($LENGTH) $TARGS) 2.)
           ((MPROGN) ((MSETQ) $PR (($REST) $TARGS 2.))
            ((MCOND)
             ((MNOT)
              (($GOODARGS) $PR "errorbars options: lc(c), lw(n) "
               ((MLIST) $LC $LW)))
             ((MRETURN)) T $FALSE)
            ((MSETQ) $LP (($LENGTH) $PR))
            ((MDO) $KK NIL NIL NIL $LP NIL
             ((MPROGN) ((MSETQ) $TT (($PR ARRAY) $KK))
              ((MSETQ) $TTOP (($OP) $TT))
              ((MSETQ) $TTARGS (($ARGS) $TT))
              ((MCOND) ((MEQUAL) $TTOP $LC)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                 ((MRETURN)
                  (($DOERR) "errorbars: use lc(red) for example"))
                 T $FALSE)
                ((MSETQ) $PTSL
                 (($CONS) ((MEQUAL) $COLOR (($TTARGS ARRAY) 1.)) $PTSL))
                ((MSETQ) $PTSL
                 (($APPEND) $PTSL ((MLIST) ((MEQUAL) $COLOR $COLDEF)))))
               T $FALSE)
              ((MCOND) ((MEQUAL) $TTOP $LW)
               ((MPROGN)
                ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 1.)
                 ((MRETURN)
                  (($DOERR) "errorbars: use lw(2) for example"))
                 T $FALSE)
                ((MSETQ) $ERRBLW (($TTARGS ARRAY) 1.)))
               T $FALSE))))
           T $FALSE)
          ((MSETQ) $PTSL
           (($CONS) ((MEQUAL) $LINE_WIDTH $ERRBLW) $PTSL))
          ((MSETQ) $PTSL
           (($APPEND) $PTSL
            ((MLIST) ((MEQUAL) $POINTS_JOINED NIL)
             ((MEQUAL) $POINT_TYPE $PTTDEF)
             ((MEQUAL) $LINE_WIDTH $LWDEF))))
          ((MCOND) $ANERR ((MRETURN)) T $FALSE)
          ((MSETQ) $PTSLIST (($APPEND) $PTSLIST $PTSL)))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $PIC)
         ((MPROGN)
          ((MCOND) $NPIC
           ((MRETURN)
            (($DOERR) "can only be one pic(...) arg to qdraw"))
           T $FALSE)
          ((MSETQ) $NPIC T) ((MSETQ) $NARGS (($LENGTH) $TARGS))
          ((MCOND) ((MOR) ((MLESSP) $NARGS 2.) ((MGREATERP) $NARGS 3.))
           ((MRETURN)
            (($DOERR)
             "pic args: type ,fname , font(string,size);
                                    type and fname required, font() optional "))
           T $FALSE)
          ((MSETQ) $PICTYPE (($TARGS ARRAY) 1.))
          ((MCOND)
           ((MNOT)
            (($INLISTP) $PICTYPE ((MLIST) $EPS $EPS_COLOR $JPG $PNG)))
           ((MRETURN)
            (($DOERR) "pic types are eps, eps_color, jpg, and png "))
           T $FALSE)
          ((MCOND) ((MEQUAL) $PICTYPE $EPS)
           ((MSETQ) $PICTYPE $EPS_COLOR) T $FALSE)
          ((MSETQ) $FNAMESTR (($TARGS ARRAY) 2.))
          ((MCOND) ((MNOT) (($STRINGP) $FNAMESTR))
           ((MRETURN)
            (($DOERR) "pic file name must be in double quotes "))
           T $FALSE)
          ((MSETQ) $FNAMELST (($CHARLIST) $FNAMESTR))
          ((MDO) $KK NIL NIL NIL (($LENGTH) $FNAMELST) NIL
           ((MCOND) ((MEQUAL) (($FNAMELST ARRAY) $KK) ".")
            ((MRETURN)
             (($DOERR) "pic file name string cannot contain a period"))
            T $FALSE))
          ((MCOND) $ANERR ((MRETURN)) T $FALSE)
          ((MSETQ) $PICLIST
           (($APPEND) $PICLIST
            ((MLIST) ((MEQUAL) $TERMINAL $PICTYPE)
             ((MEQUAL) $FILE_NAME $FNAMESTR))))
          ((MCOND) ((MEQUAL) $NARGS 3.)
           ((MPROGN) ((MSETQ) $TT (($TARGS ARRAY) 3.))
            ((MSETQ) $TTOP (($OP) $TT))
            ((MCOND) ((MNOTEQUAL) $TTOP $FONT)
             ((MRETURN) (($DOERR) "pic 3rd arg: font(string,size) ")) T
             $FALSE)
            ((MSETQ) $TTARGS (($ARGS) $TT))
            ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 2.)
             ((MRETURN) (($DOERR) "pic 3rd arg: font(string,size)")) T
             $FALSE)
            ((MSETQ) $FNTSTR (($TTARGS ARRAY) 1.))
            ((MCOND) ((MNOT) (($STRINGP) $FNTSTR))
             ((MRETURN)
              (($DOERR) "font string must be in double quotes "))
             T $FALSE)
            ((MSETQ) $FNTSIZE (($TTARGS ARRAY) 2.))
            ((MCOND) ((MNOT) (($INTEGERP) $FNTSIZE))
             ((MRETURN)
              (($DOERR)
               "pic: font syntax: size must be a positive integer "))
             T $FALSE)
            ((MSETQ) $PICLIST
             (($APPEND) $PICLIST
              ((MLIST) ((MEQUAL) $FONT $FNTSTR)
               ((MEQUAL) $FONT_SIZE $FNTSIZE)))))
           T $FALSE))
         T $FALSE)
        ((MCOND) ((MEQUAL) $QTOP $MORE)
         ((MSETQ) $MORELIST (($APPEND) $MORELIST $TARGS)) T $FALSE)))
      ((MCOND) $ANERR ((MRETURN)) T $FALSE)
      ((MSETQ) $DRLIST (($CONS) ((MEQUAL) $NTICKS $NTICKSDEF) $DRLIST))
      ((MCOND) $MKGRID
       ((MSETQ) $DRLIST (($CONS) ((MEQUAL) $GRID T) $DRLIST)) T $FALSE)
      ((MSETQ) $DRLIST
       (($CONS) ((MEQUAL) $IP_GRID_IN ((MLIST) $IPGRIDDEF $IPGRIDDEF))
        $DRLIST))
      ((MCOND) ((MGREATERP) (($LENGTH) $MORELIST) 0.)
       ((MSETQ) $DRLIST (($APPEND) $DRLIST $MORELIST)) T $FALSE)
      ((MSETQ) $DRLIST (($APPEND) $DRLIST $PTSLIST))
      ((MCOND) ((MAND) $MKXYAXES $MKXAXIS)
       ((MSETQ) $DRLIST
        (($APPEND) $DRLIST
         ((MLIST) ((MEQUAL) $XAXIS T) ((MEQUAL) $XAXIS_WIDTH 2.))))
       T $FALSE)
      ((MCOND) ((MAND) $MKXYAXES $MKYAXIS)
       ((MSETQ) $DRLIST
        (($APPEND) $DRLIST
         ((MLIST) ((MEQUAL) $YAXIS T) ((MEQUAL) $YAXIS_WIDTH 2.))))
       T $FALSE)
      ((MCOND) ((MNOT) $MKEDGE)
       ((MSETQ) $DRLIST
        (($APPEND) $DRLIST
         ((MLIST) ((MEQUAL) $XTICS ((MQUOTE) $NONE))
          ((MEQUAL) $YTICS ((MQUOTE) $NONE))
          ((MEQUAL) $AXIS_BOTTOM NIL) ((MEQUAL) $AXIS_TOP NIL)
          ((MEQUAL) $AXIS_LEFT NIL) ((MEQUAL) $AXIS_RIGHT NIL))))
       T $FALSE)
      ((MCOND) ((MGREATERP) (($LENGTH) $PICLIST) 0.)
       ((MSETQ) $DRLIST (($APPEND) $DRLIST $PICLIST)) T $FALSE)
      ((MCOND) $NLABEL
       ((MPROGN)
        ((MSETQ) $DRLIST
         (($APPEND) $DRLIST ((MLIST) ((MEQUAL) $COLOR $BLACK))))
        ((MSETQ) $DRLIST (($APPEND) $DRLIST $LABELLIST)))
       T $FALSE)
      ((MSETQ) $DRLIST (($APPEND) $RNGLIST $DRLIST)) $DRLIST))
    MEXPR) 
(ADD2LNC '(($QDRAW1) ((MLIST) $QDA)) $FUNCTIONS) 
(MDEFPROP $QDRAW1 T MLEXPRP) 
(MDEFPROP $QDRAW
    ((LAMBDA) ((MLIST) ((MLIST) $QARGS))
     ((MPROGN) (($APPLY) ((MQUOTE) $QDRAW1) $QARGS)
      ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $DRAW2D) $%%) T
       $FALSE)))
    MEXPR) 
(ADD2LNC '(($QDRAW) ((MLIST) $QARGS)) $FUNCTIONS) 
(MDEFPROP $QDRAW T MLEXPRP) 
(MDEFPROP $WXQDRAW
    ((LAMBDA) ((MLIST) ((MLIST) $QARGS))
     ((MPROGN) (($APPLY) ((MQUOTE) $QDRAW1) $QARGS)
      ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $WXDRAW2D) $%%) T
       $FALSE)))
    MEXPR) 
(ADD2LNC '(($WXQDRAW) ((MLIST) $QARGS)) $FUNCTIONS) 
(MDEFPROP $WXQDRAW T MLEXPRP) 
(MDEFPROP $QDENSITY
    ((LAMBDA) ((MLIST) ((MLIST) $QDA))
     ((MPROG)
      ((MLIST) $DDRLIST $DXX $DYY $IMATRIX $II $JJ $LQDA $NXX $NYY
       $QEXPR $XRDX $XX $XX1 $XX2 $XXLIST $XYVALS $YY $YY1 $YY2 $YRDY
       $YYLIST)
      ((MSETQ) $LQDA (($LENGTH) $QDA))
      ((MCOND) ((MGREATERP) $LQDA 5.)
       ((MRETURN)
        "qdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
       T $FALSE)
      ((MCOND) ((MLESSP) $LQDA 3.)
       ((MRETURN)
        "qdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
       T $FALSE)
      ((MSETQ) $QEXPR (($QDA ARRAY) 1.))
      ((MSETQ) $XRDX (($QDA ARRAY) 2.))
      ((MSETQ) $XX (($XRDX ARRAY) 1.))
      ((MSETQ) $XX1 (($XRDX ARRAY) 2.))
      ((MSETQ) $XX2 (($XRDX ARRAY) 3.))
      ((MSETQ) $DXX (($XRDX ARRAY) 4.))
      ((MSETQ) $YRDY (($QDA ARRAY) 3.))
      ((MSETQ) $YY (($YRDY ARRAY) 1.))
      ((MSETQ) $YY1 (($YRDY ARRAY) 2.))
      ((MSETQ) $YY2 (($YRDY ARRAY) 3.))
      ((MSETQ) $DYY (($YRDY ARRAY) 4.))
      ((MSETQ) $NXX
       (($FLOOR) ((MQUOTIENT) ((MPLUS) $XX2 ((MMINUS) $XX1)) $DXX)))
      ((MSETQ) $NYY
       (($FLOOR) ((MQUOTIENT) ((MPLUS) $YY2 ((MMINUS) $YY1)) $DYY)))
      ((MSETQ) $XXLIST
       (($FLOAT)
        (($MAKELIST) ((MPLUS) $XX1 ((MTIMES) $DXX $II)) $II 1. $NXX)))
      ((MSETQ) $YYLIST
       (($REVERSE)
        (($FLOAT)
         (($MAKELIST) ((MPLUS) $YY1 ((MTIMES) $DYY $II)) $II 1. $NYY))))
      ((MSETQ) $XYVALS
       (($FLOAT)
        (($MAKELIST)
         (($SUBSTITUTE) ((MEQUAL) $YY (($YYLIST ARRAY) $JJ))
          (($MAKELIST)
           (($SUBSTITUTE) ((MEQUAL) $XX (($XXLIST ARRAY) $II)) $QEXPR)
           $II 1. (($LENGTH) $XXLIST)))
         $JJ 1. (($LENGTH) $YYLIST))))
      ((MSETQ) $IMATRIX (($APPLY) ((MQUOTE) $MATRIX) $XYVALS))
      ((MSETQ) $DDRLIST
       ((MLIST) $IMATRIX ((MLIST) $XX1 $XX2) ((MLIST) $YY1 $YY2)))
      ((MCOND) ((MGREATERP) $LQDA 3.)
       ((MSETQ) $DDRLIST (($APPEND) $DDRLIST (($REST) $QDA 3.))) T
       $FALSE)
      (($APPLY) ((MQUOTE) $QDENSITY1) $DDRLIST)
      ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $DRAW2D) $%%) T
       $FALSE)))
    MEXPR) 
(ADD2LNC '(($QDENSITY) ((MLIST) $QDA)) $FUNCTIONS) 
(MDEFPROP $QDENSITY T MLEXPRP) 
(MDEFPROP $WXQDENSITY
    ((LAMBDA) ((MLIST) ((MLIST) $QDA))
     ((MPROG)
      ((MLIST) $DDRLIST $DXX $DYY $IMATRIX $II $JJ $LQDA $NXX $NYY
       $QEXPR $XRDX $XX $XX1 $XX2 $XXLIST $XYVALS $YY $YY1 $YY2 $YRDY
       $YYLIST)
      ((MSETQ) $LQDA (($LENGTH) $QDA))
      ((MCOND) ((MGREATERP) $LQDA 5.)
       ((MRETURN)
        "wxqdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
       T $FALSE)
      ((MCOND) ((MLESSP) $LQDA 3.)
       ((MRETURN)
        "wxqdensity(f(x,y),[x,x1,x2,dx],[y,y1,y2,dy],palette(p),pic(..)),
                             palette and pic are optional")
       T $FALSE)
      ((MSETQ) $QEXPR (($QDA ARRAY) 1.))
      ((MSETQ) $XRDX (($QDA ARRAY) 2.))
      ((MSETQ) $XX (($XRDX ARRAY) 1.))
      ((MSETQ) $XX1 (($XRDX ARRAY) 2.))
      ((MSETQ) $XX2 (($XRDX ARRAY) 3.))
      ((MSETQ) $DXX (($XRDX ARRAY) 4.))
      ((MSETQ) $YRDY (($QDA ARRAY) 3.))
      ((MSETQ) $YY (($YRDY ARRAY) 1.))
      ((MSETQ) $YY1 (($YRDY ARRAY) 2.))
      ((MSETQ) $YY2 (($YRDY ARRAY) 3.))
      ((MSETQ) $DYY (($YRDY ARRAY) 4.))
      ((MSETQ) $NXX
       (($FLOOR) ((MQUOTIENT) ((MPLUS) $XX2 ((MMINUS) $XX1)) $DXX)))
      ((MSETQ) $NYY
       (($FLOOR) ((MQUOTIENT) ((MPLUS) $YY2 ((MMINUS) $YY1)) $DYY)))
      ((MSETQ) $XXLIST
       (($FLOAT)
        (($MAKELIST) ((MPLUS) $XX1 ((MTIMES) $DXX $II)) $II 1. $NXX)))
      ((MSETQ) $YYLIST
       (($REVERSE)
        (($FLOAT)
         (($MAKELIST) ((MPLUS) $YY1 ((MTIMES) $DYY $II)) $II 1. $NYY))))
      ((MSETQ) $XYVALS
       (($FLOAT)
        (($MAKELIST)
         (($SUBSTITUTE) ((MEQUAL) $YY (($YYLIST ARRAY) $JJ))
          (($MAKELIST)
           (($SUBSTITUTE) ((MEQUAL) $XX (($XXLIST ARRAY) $II)) $QEXPR)
           $II 1. (($LENGTH) $XXLIST)))
         $JJ 1. (($LENGTH) $YYLIST))))
      ((MSETQ) $IMATRIX (($APPLY) ((MQUOTE) $MATRIX) $XYVALS))
      ((MSETQ) $DDRLIST
       ((MLIST) $IMATRIX ((MLIST) $XX1 $XX2) ((MLIST) $YY1 $YY2)))
      ((MCOND) ((MGREATERP) $LQDA 3.)
       ((MSETQ) $DDRLIST (($APPEND) $DDRLIST (($REST) $QDA 3.))) T
       $FALSE)
      (($APPLY) ((MQUOTE) $QDENSITY1) $DDRLIST)
      ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $WXDRAW2D) $%%) T
       $FALSE)))
    MEXPR) 
(ADD2LNC '(($WXQDENSITY) ((MLIST) $QDA)) $FUNCTIONS) 
(MDEFPROP $WXQDENSITY T MLEXPRP) 
(MDEFPROP $QDENSITY1
    ((LAMBDA) ((MLIST) ((MLIST) $QDA))
     ((MPROG)
      ((MLIST) $ANERR $XLIM $YLIM $XX1 $XX2 $YY1 $YY2 $DRLIST $FNAMELST
       $FNAMESTR $LQDA $PALDEF |$Mxy| $PRB $PICTYPE $TT $TTOP $TTARGS
       $FNAMESTR $FNAMELST)
      (($LOCAL) $DOERR)
      ((MDEFINE) (($DOERR) $MSG)
       ((MPROGN) ((MSETQ) $ANERR T) (($PRINT) "...syntax error")
        (($PRINT) $MSG) NIL))
      ((MSETQ) $PALDEF ((MLIST) 1. 3. 8.)) ((MSETQ) $ANERR NIL)
      ((MSETQ) $LQDA (($LENGTH) $QDA))
      ((MCOND) ((MGREATERP) $LQDA 5.)
       ((MRETURN)
        (($DOERR)
         "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)), palette and pic are optional"))
       T $FALSE)
      ((MCOND) ((MLESSP) $LQDA 3.)
       ((MRETURN)
        (($DOERR)
         "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)), palette and pic are optional"))
       T $FALSE)
      ((MSETQ) |$Mxy| (($QDA ARRAY) 1.))
      ((MCOND) ((MNOT) (($MATRIXP) |$Mxy|))
       ((MRETURN)
        (($DOERR)
         "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)),palette and pic are optional "))
       T $FALSE)
      ((MSETQ) $XLIM (($FLOAT) (($QDA ARRAY) 2.)))
      ((MCOND) ((MNOT) (($LISTP) $XLIM))
       ((MRETURN)
        (($DOERR)
         "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)),palette and pic are optional "))
       T $FALSE)
      ((MSETQ) $XX1 (($XLIM ARRAY) 1.))
      ((MSETQ) $XX2 (($XLIM ARRAY) 2.))
      ((MSETQ) $YLIM (($FLOAT) (($QDA ARRAY) 3.)))
      ((MCOND) ((MNOT) (($LISTP) $YLIM))
       ((MRETURN)
        (($DOERR)
         "qdensity1(Amatrix, [x1,x2], [y1,y2], palette(p),pic(..)),palette and pic are optional "))
       T $FALSE)
      ((MSETQ) $YY1 (($YLIM ARRAY) 1.))
      ((MSETQ) $YY2 (($YLIM ARRAY) 2.))
      ((MSETQ) $DRLIST
       ((MLIST)
        (($IMAGE) |$Mxy| $XX1 $YY1 ((MPLUS) $XX2 ((MMINUS) $XX1))
         ((MPLUS) $YY2 ((MMINUS) $YY1)))))
      ((MCOND) ((MGREATERP) $LQDA 3.)
       ((MPROGN) ((MSETQ) $PRB (($REST) $QDA 3.))
        ((MDO) $II NIL NIL NIL (($LENGTH) $PRB) NIL
         ((MPROGN) ((MSETQ) $TT (($PRB ARRAY) $II))
          ((MCOND) (($ATOM) $TT)
           ((MRETURN)
            (($DOERR) "qdensity1 options: palette(args), pic(args) "))
           T $FALSE)
          ((MCOND) $ANERR ((MRETURN)) T $FALSE)
          ((MSETQ) $TTOP (($OP) $TT)) ((MSETQ) $TTARGS (($ARGS) $TT))
          ((MCOND) ((MEQUAL) $TTOP $PALETTE)
           ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 1.)
            ((MCOND) ((MEQUAL) (($TTARGS ARRAY) 1.) $GRAY)
             ((MSETQ) $PALDEF ((MLIST) 3. 3. 3.)) T
             ((MCOND) ((MEQUAL) (($TTARGS ARRAY) 1.) $COLOR)
              ((MSETQ) $PALDEF ((MLIST) 7. 5. 15.)) T
              ((MCOND) ((MEQUAL) (($TTARGS ARRAY) 1.) $BLUE)
               ((MSETQ) $PALDEF ((MLIST) 1. 3. 8.)) T
               ((MRETURN)
                (($DOERR) "palette(gray,color,blue,or n1,n2,n3 ) ")))))
            T
            ((MCOND) ((MEQUAL) (($LENGTH) $TTARGS) 3.)
             ((MSETQ) $PALDEF
              ((MLIST) (($TTARGS ARRAY) 1.) (($TTARGS ARRAY) 2.)
               (($TTARGS ARRAY) 3.)))
             T
             ((MRETURN)
              (($DOERR) "palette(gray,color,blue,or n1,n2,n3 ) "))))
           T
           ((MCOND) ((MEQUAL) $TTOP $PIC)
            ((MPROGN)
             ((MCOND) ((MNOTEQUAL) (($LENGTH) $TTARGS) 2.)
              ((MRETURN)
               (($DOERR) "pic(type,flname) requires two args"))
              T $FALSE)
             ((MSETQ) $PICTYPE (($TTARGS ARRAY) 1.))
             ((MCOND) ((MEQUAL) $PICTYPE $EPS)
              ((MSETQ) $PICTYPE $EPS_COLOR) T $FALSE)
             ((MSETQ) $FNAMESTR (($TTARGS ARRAY) 2.))
             ((MCOND) ((MNOT) (($STRINGP) $FNAMESTR))
              ((MRETURN)
               (($DOERR) "pic file name must be in double quotes "))
              T $FALSE)
             ((MSETQ) $FNAMELST (($CHARLIST) $FNAMESTR))
             ((MDO) $KK NIL NIL NIL (($LENGTH) $FNAMELST) NIL
              ((MCOND) ((MEQUAL) (($FNAMELST ARRAY) $KK) ".")
               ((MRETURN)
                (($DOERR)
                 "pic file name string cannot contain a period"))
               T $FALSE))
             ((MCOND) $ANERR ((MRETURN)) T $FALSE)
             ((MSETQ) $DRLIST
              (($APPEND) $DRLIST
               ((MLIST) ((MEQUAL) $TERMINAL $PICTYPE)
                ((MEQUAL) $FILE_NAME $FNAMESTR)))))
            T
            ((MRETURN)
             (($DOERR) "qdensity1 options: palette(args), pic(args) ")))))))
       T $FALSE)
      ((MSETQ) $DRLIST (($CONS) ((MEQUAL) $PALETTE $PALDEF) $DRLIST))
      $DRLIST))
    MEXPR) 
(ADD2LNC '(($QDENSITY1) ((MLIST) $QDA)) $FUNCTIONS) 
(MDEFPROP $QDENSITY1 T MLEXPRP) 
(MDEFPROP $QDENSITY_MAT
    ((LAMBDA) ((MLIST) ((MLIST) |$qda|))
     ((MPROGN) (($APPLY) ((MQUOTE) $QDENSITY1) |$qda|)
      ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $DRAW2D) $%%) T
       $FALSE)))
    MEXPR) 
(ADD2LNC '(($QDENSITY_MAT) ((MLIST) |$qda|)) $FUNCTIONS) 
(MDEFPROP $QDENSITY_MAT T MLEXPRP) 
(MDEFPROP $WXQDENSITY_MAT
    ((LAMBDA) ((MLIST) ((MLIST) |$qda|))
     ((MPROGN) (($APPLY) ((MQUOTE) $QDENSITY1) |$qda|)
      ((MCOND) (($LISTP) $%%) (($APPLY) ((MQUOTE) $WXDRAW2D) $%%) T
       $FALSE)))
    MEXPR) 
(ADD2LNC '(($WXQDENSITY_MAT) ((MLIST) |$qda|)) $FUNCTIONS) 
(MDEFPROP $WXQDENSITY_MAT T MLEXPRP) 
(MDEFPROP $SHOW_COLORS
    ((LAMBDA) ((MLIST) $COLOR_LIST $NLW)
     ((MPROG) ((MLIST) |$Nl| $QLIST $XI $VI)
      (($PRINT) " show color list = " $COLOR_LIST)
      ((MSETQ) |$Nl| (($LENGTH) $COLOR_LIST))
      ((MSETQ) $XMAX ((MQUOTIENT) ((MPLUS) 1. |$Nl|) 2.))
      ((MSETQ) $QLIST ((MLIST) (($XR) ((MMINUS) $XMAX) $XMAX)))
      ((MDO) $I NIL NIL NIL |$Nl| NIL
       ((MPROGN) ((MSETQ) $XI ((MPLUS) $I ((MMINUS) $XMAX)))
        ((MSETQ) $VI
         (($LINE) $XI ((MMINUS) 1.) $XI 1.
          (($LC) (($COLOR_LIST ARRAY) $I)) (($LW) $NLW)))
        ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VI)))))
      ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) (($CUT) $ALL))))
      (($APPLY) ((MQUOTE) $QDRAW) $QLIST)))
    MEXPR) 
(ADD2LNC '(($SHOW_COLORS) $COLOR_LIST $NLW) $FUNCTIONS) 
(MDEFPROP $DEFAULT_COLORS
    ((LAMBDA) ((MLIST) $NLW)
     (($SHOW_COLORS)
      ((MLIST) $BLUE $RED $TURQUOISE $BROWN $MAGENTA $GREEN $BLACK)
      $NLW))
    MEXPR) 
(ADD2LNC '(($DEFAULT_COLORS) $NLW) $FUNCTIONS) 
(MDEFPROP $DOPLOT1
    ((LAMBDA) ((MLIST) $NLW)
     (($SHOW_COLORS)
      ((MLIST) $AQUAMARINE $BEIGE $BLUE $BROWN $CYAN $GOLD $GOLDENROD
       $GREEN $KHAKI $MAGENTA $ORANGE $PINK $PLUM $PURPLE $RED $SALMON
       $SKYBLUE $TURQUOISE $VIOLET $YELLOW)
      $NLW))
    MEXPR) 
(ADD2LNC '(($DOPLOT1) $NLW) $FUNCTIONS) 
(MDEFPROP $DOPLOT2
    ((LAMBDA) ((MLIST))
     ((MPROG) ((MLIST) $CC $QLIST $X1 $X2 $Y1 $Y2 $I $VAL)
      ((MSETQ) $CC
       ((MLIST) $AQUAMARINE $BEIGE $BLUE $BROWN $CYAN $GOLD $GOLDENROD
        $GREEN $KHAKI $MAGENTA $ORANGE $PINK $PLUM $PURPLE $RED $SALMON
        $SKYBLUE $TURQUOISE $VIOLET $YELLOW))
      (($PRINT) "this is doplot2 ")
      ((MSETQ) $QLIST
       ((MLIST) (($XR) ((MMINUS) 3.3) 3.3) (($YR) ((MMINUS) 3.3) 3.3)))
      ((MSETQ) $Y1 1.) ((MSETQ) $Y2 3.)
      ((MDO) $I 0. NIL NIL 5. NIL
       ((MPROGN) ((MSETQ) $X1 ((MPLUS) ((MMINUS) 3.) $I))
        ((MSETQ) $X2 ((MPLUS) $X1 1.))
        ((MSETQ) $VAL
         (($POLY)
          ((MLIST) ((MLIST) $X1 $Y1) ((MLIST) $X2 $Y1)
           ((MLIST) $X1 $Y2))
          (($FILL) (($CC ARRAY) ((MPLUS) $I 1.)))))
        ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VAL)))))
      ((MSETQ) $Y1 ((MMINUS) 1.)) ((MSETQ) $Y2 1.)
      ((MDO) $I 0. NIL NIL 5. NIL
       ((MPROGN) ((MSETQ) $X1 ((MPLUS) ((MMINUS) 3.) $I))
        ((MSETQ) $X2 ((MPLUS) $X1 1.))
        ((MSETQ) $VAL
         (($POLY)
          ((MLIST) ((MLIST) $X1 $Y1) ((MLIST) $X1 $Y2)
           ((MLIST) $X2 $Y2))
          (($FILL) (($CC ARRAY) ((MPLUS) $I 7.)))))
        ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VAL)))))
      ((MSETQ) $Y1 ((MMINUS) 3.)) ((MSETQ) $Y2 ((MMINUS) 1.))
      ((MDO) $I 0. NIL NIL 5. NIL
       ((MPROGN) ((MSETQ) $X1 ((MPLUS) ((MMINUS) 3.) $I))
        ((MSETQ) $X2 ((MPLUS) $X1 1.))
        ((MSETQ) $VAL
         (($POLY)
          ((MLIST) ((MLIST) $X1 $Y1) ((MLIST) $X2 $Y1)
           ((MLIST) $X1 $Y2))
          (($FILL) (($CC ARRAY) ((MPLUS) $I 13.)))))
        ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) $VAL)))))
      ((MSETQ) $QLIST (($APPEND) $QLIST ((MLIST) (($CUT) $ALL))))
      (($APPLY) ((MQUOTE) $QDRAW) $QLIST)))
    MEXPR) 
(ADD2LNC '(($DOPLOT2)) $FUNCTIONS) 
(MDEFPROP $POINT_TYPES
    ((LAMBDA) ((MLIST))
     (($QDRAW) (($XR) ((MMINUS) 2.) 2.) (($YR) ((MMINUS) 4.) 4.)
      (($LABEL_ALIGN) $C)
      (($LABEL) ((MLIST) "1" ((MMINUS) 1.5) 3.5)
       ((MLIST) "2" ((MMINUS) 0.5) 3.5) ((MLIST) "3" 0.5 3.5)
       ((MLIST) "4" 1.5 3.5))
      (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) 2.5)) (($PT) 1.))
      (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) 2.5)) (($PT) 2.))
      (($PTS) ((MLIST) ((MLIST) 0.5 2.5)) (($PT) 3.))
      (($PTS) ((MLIST) ((MLIST) 1.5 2.5)) (($PT) 4.))
      (($LABEL) ((MLIST) "5" ((MMINUS) 1.5) 1.5)
       ((MLIST) "6" ((MMINUS) 0.5) 1.5) ((MLIST) "7" 0.5 1.5)
       ((MLIST) "8" 1.5 1.5))
      (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) 0.5)) (($PT) 5.))
      (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) 0.5)) (($PT) 6.))
      (($PTS) ((MLIST) ((MLIST) 0.5 0.5)) (($PT) 7.))
      (($PTS) ((MLIST) ((MLIST) 1.5 0.5)) (($PT) 8.))
      (($LABEL) ((MLIST) "9" ((MMINUS) 1.5) ((MMINUS) 0.5))
       ((MLIST) "10" ((MMINUS) 0.5) ((MMINUS) 0.5))
       ((MLIST) "11" 0.5 ((MMINUS) 0.5))
       ((MLIST) "12" 1.5 ((MMINUS) 0.5)))
      (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) ((MMINUS) 1.5)))
       (($PT) 9.))
      (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) ((MMINUS) 1.5)))
       (($PT) 10.))
      (($PTS) ((MLIST) ((MLIST) 0.5 ((MMINUS) 1.5))) (($PT) 11.))
      (($PTS) ((MLIST) ((MLIST) 1.5 ((MMINUS) 1.5))) (($PT) 12.))
      (($LABEL) ((MLIST) "13" ((MMINUS) 1.5) ((MMINUS) 2.5))
       ((MLIST) "14" ((MMINUS) 0.5) ((MMINUS) 2.5))
       ((MLIST) "15" 0.5 ((MMINUS) 2.5))
       ((MLIST) "16" 1.5 ((MMINUS) 2.5)))
      (($PTS) ((MLIST) ((MLIST) ((MMINUS) 1.5) ((MMINUS) 3.5)))
       (($PT) 13.))
      (($PTS) ((MLIST) ((MLIST) ((MMINUS) 0.5) ((MMINUS) 3.5)))
       (($PT) 14.))
      (($PTS) ((MLIST) ((MLIST) 0.5 ((MMINUS) 3.5))) (($PT) 15.))
      (($PTS) ((MLIST) ((MLIST) 1.5 ((MMINUS) 3.5))) (($PT) 16.))
      (($CUT) $ALL)))
    MEXPR) 
(ADD2LNC '(($POINT_TYPES)) $FUNCTIONS) 
(MDEFPROP $MAKE_XYGRID
    ((LAMBDA) ((MLIST) |$Xfunc| |$Yfunc| |$Th0| |$Thf| |$Num|)
     ((MPROG) ((MLIST) |$dTh| |$Xgrid| |$Ygrid|) ((MSETQ) $NUMER T)
      ((MSETQ) |$dTh|
       (($FLOAT)
        ((MQUOTIENT) ((MPLUS) |$Thf| ((MMINUS) |$Th0|)) |$Num|)))
      ((MSETQ) |$Xgrid|
       (($MAKELIST) ((|$Xfunc|) ((MPLUS) |$Th0| ((MTIMES) $N |$dTh|)))
        $N 0. |$Num|))
      ((MSETQ) |$Ygrid|
       (($MAKELIST) ((|$Yfunc|) ((MPLUS) |$Th0| ((MTIMES) $N |$dTh|)))
        $N 0. |$Num|))
      (($MAKELIST)
       ((MLIST) ((|$Xgrid| ARRAY) $N) ((|$Ygrid| ARRAY) $N)) $N 1.
       ((MPLUS) |$Num| 1.))))
    MEXPR) 
(ADD2LNC '(($MAKE_XYGRID) |$Xfunc| |$Yfunc| |$Th0| |$Thf| |$Num|)
         $FUNCTIONS) 
(DEFPROP $FLL T EVFUN) 
(ADD2LNC '$FLL $PROPS) 
(MDEFPROP $FLL
    ((LAMBDA) ((MLIST) $X)
     ((MLIST) (($FIRST) $X) (($LAST) $X) (($LENGTH) $X)))
    MEXPR) 
(ADD2LNC '(($FLL) $X) $FUNCTIONS) 
(MDEFPROP $HEAD
    ((LAMBDA) ((MLIST) $MYLIST)
     ((MPROG) ((MLIST) |$numL| ((MSETQ) $NLEFT 6.))
      ((MSETQ) |$numL| (($LENGTH) $MYLIST))
      (($REST) $MYLIST ((MMINUS) ((MPLUS) |$numL| ((MMINUS) $NLEFT))))))
    MEXPR) 
(ADD2LNC '(($HEAD) $MYLIST) $FUNCTIONS) 
(MDEFPROP $TAIL
    ((LAMBDA) ((MLIST) $MYLIST)
     ((MPROG) ((MLIST) |$numL| ((MSETQ) $NLEFT 6.))
      ((MSETQ) |$numL| (($LENGTH) $MYLIST))
      (($REST) $MYLIST ((MPLUS) |$numL| ((MMINUS) $NLEFT)))))
    MEXPR) 
(ADD2LNC '(($TAIL) $MYLIST) $FUNCTIONS) 
(MDEFPROP $F
    ((LAMBDA) ((MLIST) $X $Y $Z)
     ((MPLUS) ((MTIMES) 3. ((MEXPT) $X 2.) ((MEXPT) $Y 3.))
      ((MTIMES) 5. ((MEXPT) $Y 4.) ((MEXPT) $Z 2.))
      ((MTIMES) ((MMINUS) 7.) ((MEXPT) $Z 3.) ((MEXPT) $X 9.))))
    MEXPR) 
(ADD2LNC '(($F) $X $Y $Z) $FUNCTIONS) 
(MDEFPROP $INNERPRODUCT
    ((LAMBDA) ((MLIST) $X $Y)
     ((MPROG) ((MLIST) $LISTARITH) ((MSETQ) $LISTARITH T)
      (($RATSIMP) ((MNCTIMES) (($CONJUGATE) $X) $Y))))
    MEXPR) 
(ADD2LNC '(($INNERPRODUCT) $X $Y) $FUNCTIONS) 
(MDEFPROP $UNITVECTOR
    ((LAMBDA) ((MLIST) $X)
     ((MPROG) ((MLIST) $LISTARITH) ((MSETQ) $LISTARITH T)
      ((MQUOTIENT) $X ((%SQRT) (($INNERPRODUCT) $X $X)))))
    MEXPR) 
(ADD2LNC '(($UNITVECTOR) $X) $FUNCTIONS) 
(MDEFPROP $COLUMNVECTOR
    ((LAMBDA) ((MLIST) $X) (($TRANSPOSE) (($MATRIX) $X))) MEXPR) 
(ADD2LNC '(($COLUMNVECTOR) $X) $FUNCTIONS) 
(MDEFPROP $GRAMSCHMIDT
    ((LAMBDA) ((MLIST) $X ((MLIST) $MYINNERPRODUCT))
     ((MPROG)
      ((MLIST) $LISTARITH $DIMNSN $LISTALL $INTERN $COUNT $DENOM $UNIT
       $INDEX1 $INDEX2)
      ((MCOND) ((MEQUAL) $MYINNERPRODUCT ((MLIST)))
       ((MSETQ) $MYINNERPRODUCT $INNERPRODUCT) T
       ((MSETQ) $MYINNERPRODUCT (($FIRST) $MYINNERPRODUCT)))
      (($MODEDECLARE) ((MLIST) $DIMNSN $COUNT $INDEX1 $INDEX2) $FIXNUM
       ((MLIST) $LISTALL) $LIST ((MLIST) $INTERN $DENOM $UNIT) $ANY)
      ((MSETQ) $LISTARITH T) ((MSETQ) $DIMNSN (($MI) (($LENGTH) $X)))
      ((MSETQ) $LISTALL ((MLIST) (($PART) $X 1.))) ((MSETQ) $COUNT 1.)
      ((MCOND) ((MEQUAL) $DIMNSN 1.) ((MRETURN) $X) T
       ((MPROGN)
        ((MDO) $INDEX1 2. NIL NIL $DIMNSN NIL
         ((MPROGN) ((MSETQ) $UNIT (($PART) $X $INDEX1))
          ((MDO) $INDEX2 NIL NIL NIL $COUNT NIL
           ((MPROGN) ((MSETQ) $INTERN (($PART) $LISTALL $INDEX2))
            ((MSETQ) $DENOM
             (($APPLY) $MYINNERPRODUCT ((MLIST) $INTERN $INTERN)))
            ((MSETQ) $UNIT
             (($FACTOR)
              (($RATSIMP)
               ((MPLUS) $UNIT
                ((MMINUS)
                 ((MQUOTIENT)
                  ((MTIMES)
                   (($APPLY) $MYINNERPRODUCT ((MLIST) $INTERN $UNIT))
                   $INTERN)
                  $DENOM))))))))
          ((MSETQ) $COUNT ((MPLUS) $COUNT 1.))
          ((MSETQ) $LISTALL (($ENDCONS) $UNIT $LISTALL))))
        ((MRETURN) $LISTALL)))))
    MEXPR) 
(ADD2LNC '(($GRAMSCHMIDT) $X ((MLIST) $MYINNERPRODUCT)) $FUNCTIONS) 
(MDEFPROP $GRAMSCHMIDT T MLEXPRP) 
(MDEFPROP $EIGENVALUES
    ((LAMBDA) ((MLIST) $MAT)
     ((MPROG)
      ((MLIST) $DIMNSN $LISTALL $SOLUTION $MULTIPLICITIES
       $SOLVEEXPLICIT ((MSETQ) $DUMMY ((GENSYM))) $INDEX2)
      (($MODEDECLARE) ((MLIST) $DIMNSN $INDEX2) $FIXNUM
       ((MLIST) $LISTALL $SOLUTION) $LIST ((MLIST) $DUMMY) $ANY)
      ((MSETQ) $LISTALL ((MLIST))) ((MSETQ) $SOLVEEXPLICIT T)
      ((MSETQ) $DIMNSN (($MI) (($LENGTH) $MAT)))
      ((MSETQ) $SOLUTION
       ((MPROG) ((MLIST) ((MSETQ) $PROGRAMMODE T))
        (($SOLVE) (($CHARPOLY) $MAT $DUMMY) $DUMMY)))
      ((MCOND) ((MEQUAL) $SOLUTION ((MLIST)))
       ((MPROGN) (($PRINT) " ")
        (($PRINT)
         "eigenvalues: solve is unable to find the roots of the characteristic polynomial.")
        ((MRETURN) $LISTALL))
       T
       ((MCOND) ((MLESSP) (($APPLY) "+" $MULTIPLICITIES) $DIMNSN)
        ((MPROGN) (($PRINT) " ")
         (($PRINT)
          "eigenvalues: solve is unable to find some of the roots of the characteristic polynomial.")
         ((MSETQ) $DIMNSN (($APPLY) "+" $MULTIPLICITIES)))
        T $FALSE))
      ((MDO) $INDEX2 NIL NIL NIL $DIMNSN NIL
       ((MPROGN)
        ((MSETQ) $DIMNSN
         (($MI)
          ((MPLUS) $DIMNSN ((MMINUS) (($PART) $MULTIPLICITIES $INDEX2))
           1.)))
        ((MSETQ) $LISTALL
         (($ENDCONS) (($RHS) (($PART) $SOLUTION $INDEX2)) $LISTALL))))
      ((MSETQ) $LISTALL
       (($ENDCONS) $MULTIPLICITIES ((MLIST) $LISTALL)))
      ((MRETURN) $LISTALL)))
    MEXPR) 
(ADD2LNC '(($EIGENVALUES) $MAT) $FUNCTIONS) 
(MDEFPROP $EIGENVECTORS
    ((LAMBDA) ((MLIST) $MAT)
     ((MPROG)
      ((MLIST) $EIGVECS $EQUATIONS $UNKNOWNS $SOLUTION $EIGVALS $DIMNSN
       $COUNT $VECTR $INDEX3 $INDEX4 $INDEX2 $INDEX1 $MATRX $MMATRX
       $NOTKNWN $UNIT $MULTIPLICITIES $%RNUM $REALONLY $ALGEBRAIC
       $INTERM $INTERN)
      (($MODEDECLARE)
       ((MLIST) $EQUATIONS $UNKNOWNS $SOLUTION $EIGVALS $UNIT $INTERM)
       $LIST ((MLIST) $DIMNSN $COUNT $INDEX3 $INDEX4 $INDEX2 $INDEX1)
       $FIXNUM ((MLIST) $VECTR $MATRX $MMATRX $INTERN $NOTKNWN) $ANY)
      ((MSETQ) $UNKNOWNS ((MLIST)))
      ((MSETQ) $DIMNSN (($MI) (($LENGTH) $MAT)))
      ((MSETQ) $COUNT (($MI) $DIMNSN)) ((MSETQ) $NOTKNWN ((GENSYM)))
      ((MCOND) $KNOWNEIGVALS ((MSETQ) $EIGVALS $LISTEIGVALS) T
       ((MSETQ) $EIGVALS (($EIGENVALUES) $MAT)))
      ((MCOND) ((MEQUAL) $EIGVALS ((MLIST)))
       ((MPROGN) ((MSETQ) $NONDIAGONALIZABLE T) ((MRETURN) $EIGVALS)) T
       ((MPROGN) ((MSETQ) $MULTIPLICITIES (($PART) $EIGVALS 2.))
        ((MSETQ) $COUNT (($LENGTH) $MULTIPLICITIES))
        ((MDO) $INDEX1 NIL NIL NIL $DIMNSN NIL
         ((MSETQ) $UNKNOWNS
          (($ENDCONS) (($CONCAT) $NOTKNWN $INDEX1) $UNKNOWNS)))
        ((MSETQ) $VECTR (($COLUMNVECTOR) $UNKNOWNS))
        ((MSETQ) $MATRX ((MNCTIMES) $MAT $VECTR))
        ((MSETQ) $NONDIAGONALIZABLE NIL) ((MSETQ) $EIGVECS ((MLIST)))
        ((MSETQ) $REALONLY NIL) ((MSETQ) $ALGEBRAIC T)
        ((MDO) $INDEX1 NIL NIL NIL $COUNT NIL
         ((MPROGN)
          ((MSETQ) $MMATRX
           ((MPLUS) $MATRX
            ((MMINUS) ((MTIMES) (($PART) $EIGVALS 1. $INDEX1) $VECTR))))
          ((MSETQ) $EQUATIONS ((MLIST)))
          ((MDO) $INDEX2 NIL NIL NIL $DIMNSN NIL
           ((MSETQ) $EQUATIONS
            (($CONS) (($MMATRX ARRAY) $INDEX2 1.) $EQUATIONS)))
          ((MSETQ) $%RNUM 0.)
          ((MSETQ) $SOLUTION (($ALGSYS) $EQUATIONS $UNKNOWNS))
          ((MSETQ) $INTERM
           (($MAP) ((MQUOTE) $RHS) (($SOLUTION ARRAY) 1.)))
          ((MSETQ) $UNIT ((MLIST)))
          ((MCOND)
           ((MNOTEQUAL) $%RNUM (($PART) $MULTIPLICITIES $INDEX1))
           ((MSETQ) $NONDIAGONALIZABLE T) T $FALSE)
          ((MDO) $INDEX3 NIL NIL NIL $%RNUM NIL
           ((MPROGN)
            ((MSETQ) $INTERN
             (($SUBSTVECTK) $%RNUM_LIST $INDEX3 $INTERM))
            ((MSETQ) $UNIT (($APPEND) $UNIT ((MLIST) $INTERN)))))
          ((MCOND) ((MEQUAL) $UNIT ((MLIST)))
           ((MPROGN) (($PRINT) " ")
            (($PRINT) "eigenvectors: the eigenvector(s) for the"
             $INDEX1 "th eigenvalue will be missing."))
           T $FALSE)
          ((MCOND) ((MAND) $HERMITIANMATRIX ((MGREATERP) $%RNUM 1.))
           ((MSETQ) $UNIT (($GRAMSCHMIDT) $UNIT)) T $FALSE)
          ((MSETQ) $EIGVECS (($APPEND) $EIGVECS ((MLIST) $UNIT)))))
        ((MRETURN) ((MLIST) $EIGVALS $EIGVECS))))))
    MEXPR) 
(ADD2LNC '(($EIGENVECTORS) $MAT) $FUNCTIONS) 
(MDEFPROP $SUBSTVECTK
    ((LAMBDA) ((MLIST) $L $N %EXP)
     ((MPROGN) (($MODEDECLARE) $L $LIST $N $FIXNUM %EXP $ANY)
      ((MPROG) ((MLIST) ((MSETQ) $SUB_LIST ((MLIST))) ((MSETQ) $J 0.))
       (($MODEDECLARE) $SUB_LIST $LIST $J $FIXNUM)
       ((MDOIN) $VAR $L NIL NIL NIL NIL
        ((MPROGN) (($MODEDECLARE) $VAR $ANY)
         ((MSETQ) $J ((MPLUS) $J 1.))
         ((MSETQ) $SUB_LIST
          (($CONS) ((MEQUAL) $VAR ((MCOND) ((MEQUAL) $J $N) 1. T 0.))
           $SUB_LIST))))
       (($SUBLIS) $SUB_LIST %EXP))))
    MEXPR) 
(ADD2LNC '(($SUBSTVECTK) $L $N %EXP) $FUNCTIONS) 
(MDEFPROP $UNITEIGENVECTORS
    ((LAMBDA) ((MLIST) |$m|)
     ((MPROG) ((MLIST) $UV)
      (($MODEDECLARE) $UV $LIST ((MLIST) $I $J) $FIXNUM)
      ((MCOND) $KNOWNEIGVECTS ((MSETQ) $UV (($COPY) $LISTEIGVECTS)) T
       ((MSETQ) $UV (($COPY) (($EIGENVECTORS) |$m|))))
      ((MCOND) ((MEQUAL) $UV ((MLIST))) ((MLIST)) T
       ((MPROGN)
        ((MDO) $I NIL NIL NIL (($LENGTH) (($UV ARRAY) 2.)) NIL
         ((MDO) $J NIL NIL NIL
          (($LENGTH) ((MQAPPLY ARRAY) (($UV ARRAY) 2.) $I)) NIL
          ((MSETQ)
           ((MQAPPLY ARRAY) ((MQAPPLY ARRAY) (($UV ARRAY) 2.) $I) $J)
           (($RATSIMP)
            (($UNITVECTOR)
             ((MQAPPLY ARRAY) ((MQAPPLY ARRAY) (($UV ARRAY) 2.) $I) $J))))))
        $UV))))
    MEXPR) 
(ADD2LNC '(($UNITEIGENVECTORS) |$m|) $FUNCTIONS) 
(MDEFPROP $SIMILARITYTRANSFORM
    ((LAMBDA) ((MLIST) $MAT)
     ((MPROG) ((MLIST) $LISTVEC $LISTUEVEC)
      (($MODEDECLARE) ((MLIST) $LISTVEC $LISTUEVEC) $LIST)
      ((MSETQ) $LISTUEVEC (($UNITEIGENVECTORS) $MAT))
      ((MCOND) $NONDIAGONALIZABLE ((MRETURN) $LISTUEVEC) T
       ((MPROGN)
        ((MSETQ) $LISTVEC (($APPLY) $APPEND (($LISTUEVEC ARRAY) 2.)))
        ((MSETQ) $RIGHTMATRIX
         (($TRANSPOSE) (($APPLY) ((MQUOTE) $MATRIX) $LISTVEC)))
        ((MCOND) $HERMITIANMATRIX
         ((MSETQ) $LEFTMATRIX
          (($CONJUGATE) (($TRANSPOSE) $RIGHTMATRIX)))
         T
         ((MSETQ) $LEFTMATRIX ((MNCEXPT) $RIGHTMATRIX ((MMINUS) 1.))))
        ((MRETURN) $LISTUEVEC)))))
    MEXPR) 
(ADD2LNC '(($SIMILARITYTRANSFORM) $MAT) $FUNCTIONS) 
(MDEFPROP $CONJ ((LAMBDA) ((MLIST) $X) (($CONJUGATE) $X)) MEXPR) 
(ADD2LNC '(($CONJ) $X) $FUNCTIONS) 
(MDEFPROP $INPROD ((LAMBDA) ((MLIST) $X $Y) (($INNERPRODUCT) $X $Y))
    MEXPR) 
(ADD2LNC '(($INPROD) $X $Y) $FUNCTIONS) 
(MDEFPROP $UVECT ((LAMBDA) ((MLIST) $X) (($UNITVECTOR) $X)) MEXPR) 
(ADD2LNC '(($UVECT) $X) $FUNCTIONS) 
(MDEFPROP $COVECT ((LAMBDA) ((MLIST) $X) (($COLUMNVECTOR) $X)) MEXPR) 
(ADD2LNC '(($COVECT) $X) $FUNCTIONS) 
(MDEFPROP $GSCHMIT
    ((LAMBDA) ((MLIST) $X ((MLIST) $F))
     ((MCOND) ((MEQUAL) $F ((MLIST))) (($GRAMSCHMIDT) $X) T
      (($GRAMSCHMIDT) $X (($F ARRAY) 1.))))
    MEXPR) 
(ADD2LNC '(($GSCHMIT) $X ((MLIST) $F)) $FUNCTIONS) 
(MDEFPROP $GSCHMIT T MLEXPRP) 
(MDEFPROP $EIVALS ((LAMBDA) ((MLIST) $MAT) (($EIGENVALUES) $MAT))
    MEXPR) 
(ADD2LNC '(($EIVALS) $MAT) $FUNCTIONS) 
(MDEFPROP $EIVECTS ((LAMBDA) ((MLIST) $MAT) (($EIGENVECTORS) $MAT))
    MEXPR) 
(ADD2LNC '(($EIVECTS) $MAT) $FUNCTIONS) 
(MDEFPROP $UEIVECTS
    ((LAMBDA) ((MLIST) $MAT) (($UNITEIGENVECTORS) $MAT)) MEXPR) 
(ADD2LNC '(($UEIVECTS) $MAT) $FUNCTIONS) 
(MDEFPROP $SIMTRAN
    ((LAMBDA) ((MLIST) $MAT) (($SIMILARITYTRANSFORM) $MAT)) MEXPR) 
(ADD2LNC '(($SIMTRAN) $MAT) $FUNCTIONS) 
(MDEFPROP $MI
    ((LAMBDA) ((MLIST) $VAR)
     (($BUILDQ) ((MLIST) $VAR) (($MODE_IDENTITY) $FIXNUM $VAR)))
    MMACRO) 
(ADD2LNC '(($MI) $VAR) $MACROS) 
(MDEFPROP $DV
    ((LAMBDA) ((MLIST) $VAR)
     (($BUILDQ) ((MLIST) $VAR) (($DEFINE_VARIABLE) $VAR NIL $BOOLEAN)))
    MMACRO) 
(ADD2LNC '(($DV) $VAR) $MACROS) 
(MDEFPROP $A (T) MATCHDECLARE) 
(ADD2LNC '$A $PROPS) 
(DSKSETQ $INFLAG 'NIL) 
(DEFPROP %SIN $SIN NOUN) 
(DEFPROP %SIN SIMP-%SIN OPERATORS) 
(ADD2LNC '%SIN $PROPS) 
(DEFPROP %SIN
         ((%SUM)
          ((MTIMES) ((MEXPT) -1. *INDEX)
           ((MEXPT) ((MFACTORIAL) ((MPLUS) ((MTIMES) 2. *INDEX) 1.))
            -1.)
           ((MEXPT) SP2VAR ((MPLUS) ((MTIMES) 2. *INDEX) 1.)))
          *INDEX 0. $INF)
         SP2) 
(ADD2LNC '%SIN $PROPS) 
(DEFPROP %SIN
         ((X)
          ((MTIMES)
           ((MPLUS) 1.
            ((MTIMES) -1.
             ((MEXPT) ((%TAN) ((MTIMES) ((RAT) 1. 2.) X)) 2.)))
           ((MEXPT)
            ((MPLUS) 1.
             ((MEXPT) ((%TAN) ((MTIMES) ((RAT) 1. 2.) X)) 2.))
            -1.)))
         GRAD) 
(ADD2LNC '((%SIN) X) $GRADEFS) 
(MDEFPROP %SIN
    (NIL $TYPE $TRIGONOMETRIC $COMPLEMENT_COF -1. $UNITCOF 1.
         $COMPLEMENT_FUNCTION %COS)
    $PROPS) 
(ADD2LNC '%SIN $PROPS) 
(DEFPROP $SIN %SIN VERB) 
(DEFPROP %COS $COS NOUN) 
(DEFPROP %COS SIMP-%COS OPERATORS) 
(ADD2LNC '%COS $PROPS) 
(DEFPROP %COS
         ((%SUM)
          ((MTIMES) ((MEXPT) -1. *INDEX)
           ((MEXPT) ((MFACTORIAL) ((MTIMES) 2. *INDEX)) -1.)
           ((MEXPT) SP2VAR ((MTIMES) 2. *INDEX)))
          *INDEX 0. $INF)
         SP2) 
(ADD2LNC '%COS $PROPS) 
(DEFPROP %COS
         ((X)
          ((MTIMES) -2. ((%TAN) ((MTIMES) ((RAT) 1. 2.) X))
           ((MEXPT)
            ((MPLUS) 1.
             ((MEXPT) ((%TAN) ((MTIMES) ((RAT) 1. 2.) X)) 2.))
            -1.)))
         GRAD) 
(ADD2LNC '((%COS) X) $GRADEFS) 
(MDEFPROP %COS
    (NIL $TYPE $TRIGONOMETRIC $COMPLEMENT_COF -1. $UNITCOF 1.
         $COMPLEMENT_FUNCTION %SIN)
    $PROPS) 
(ADD2LNC '%COS $PROPS) 
(DEFPROP $COS %COS VERB) 
(DEFPROP %SINH $SINH NOUN) 
(DEFPROP %SINH SIMP-%SINH OPERATORS) 
(ADD2LNC '%SINH $PROPS) 
(DEFPROP %SINH
         ((%SUM)
          ((MTIMES)
           ((MEXPT) ((MFACTORIAL) ((MPLUS) ((MTIMES) 2. *INDEX) 1.))
            -1.)
           ((MEXPT) SP2VAR ((MPLUS) ((MTIMES) 2. *INDEX) 1.)))
          *INDEX 0. $INF)
         SP2) 
(ADD2LNC '%SINH $PROPS) 
(MDEFPROP %SINH
    (NIL $TYPE $HYPER_TRIGONOMETRIC $COMPLEMENT_COF 1. $UNITCOF -1.
         $COMPLEMENT_FUNCTION %COSH)
    $PROPS) 
(ADD2LNC '%SINH $PROPS) 
(DEFPROP $SINH %SINH VERB) 
(DEFPROP %COSH $COSH NOUN) 
(DEFPROP %COSH SIMP-%COSH OPERATORS) 
(ADD2LNC '%COSH $PROPS) 
(DEFPROP %COSH
         ((%SUM)
          ((MTIMES) ((MEXPT) ((MFACTORIAL) ((MTIMES) 2. *INDEX)) -1.)
           ((MEXPT) SP2VAR ((MTIMES) 2. *INDEX)))
          *INDEX 0. $INF)
         SP2) 
(ADD2LNC '%COSH $PROPS) 
(MDEFPROP %COSH
    (NIL $TYPE $HYPER_TRIGONOMETRIC $COMPLEMENT_COF 1. $UNITCOF 1.
         $COMPLEMENT_FUNCTION %SINH)
    $PROPS) 
(ADD2LNC '%COSH $PROPS) 
(DEFPROP $COSH %COSH VERB) 
(DEFPROP $DRAW "draw" AUTOLOAD) 
(ADD2LNC '$DRAW $PROPS) 
(MDEFPROP $DRAW (NIL $VERSION 2.) $PROPS) 
(ADD2LNC '$DRAW $PROPS) 
(MDEFPROP $GNUPLOT (NIL $VERSION 1.) $PROPS) 
(ADD2LNC '$GNUPLOT $PROPS) 
(ADD2LNC '$TRIGRULE1 $RULES) 
(MDEFPROP $TRIGRULE1 $DEFRULE $RULETYPE) 
(ADD2LNC '$TRIGRULE1 $PROPS) 
(MDEFPROP $TRIGRULE1
    ((MEQUAL) ((%TAN SIMP) $A)
     ((MTIMES SIMP) ((MEXPT SIMP) ((%COS SIMP) $A) -1.)
      ((%SIN SIMP) $A)))
    $RULE) 
(ADD2LNC '$TRIGRULE1 $PROPS) 
(ADD2LNC '$TRIGRULE2 $RULES) 
(MDEFPROP $TRIGRULE2 $DEFRULE $RULETYPE) 
(ADD2LNC '$TRIGRULE2 $PROPS) 
(MDEFPROP $TRIGRULE2
    ((MEQUAL) ((%SEC SIMP) $A) ((MEXPT SIMP) ((%COS SIMP) $A) -1.))
    $RULE) 
(ADD2LNC '$TRIGRULE2 $PROPS) 
(ADD2LNC '$TRIGRULE3 $RULES) 
(MDEFPROP $TRIGRULE3 $DEFRULE $RULETYPE) 
(ADD2LNC '$TRIGRULE3 $PROPS) 
(MDEFPROP $TRIGRULE3
    ((MEQUAL) ((%CSC SIMP) $A) ((MEXPT SIMP) ((%SIN SIMP) $A) -1.))
    $RULE) 
(ADD2LNC '$TRIGRULE3 $PROPS) 
(ADD2LNC '$TRIGRULE4 $RULES) 
(MDEFPROP $TRIGRULE4 $DEFRULE $RULETYPE) 
(ADD2LNC '$TRIGRULE4 $PROPS) 
(MDEFPROP $TRIGRULE4
    ((MEQUAL) ((%COT SIMP) $A)
     ((MTIMES SIMP) ((%COS SIMP) $A)
      ((MEXPT SIMP) ((%SIN SIMP) $A) -1.)))
    $RULE) 
(ADD2LNC '$TRIGRULE4 $PROPS) 
(ADD2LNC '$HTRIGRULE1 $RULES) 
(MDEFPROP $HTRIGRULE1 $DEFRULE $RULETYPE) 
(ADD2LNC '$HTRIGRULE1 $PROPS) 
(MDEFPROP $HTRIGRULE1
    ((MEQUAL) ((%TANH SIMP) $A)
     ((MTIMES SIMP) ((MEXPT SIMP) ((%COSH SIMP) $A) -1.)
      ((%SINH SIMP) $A)))
    $RULE) 
(ADD2LNC '$HTRIGRULE1 $PROPS) 
(ADD2LNC '$HTRIGRULE2 $RULES) 
(MDEFPROP $HTRIGRULE2 $DEFRULE $RULETYPE) 
(ADD2LNC '$HTRIGRULE2 $PROPS) 
(MDEFPROP $HTRIGRULE2
    ((MEQUAL) ((%SECH SIMP) $A) ((MEXPT SIMP) ((%COSH SIMP) $A) -1.))
    $RULE) 
(ADD2LNC '$HTRIGRULE2 $PROPS) 
(ADD2LNC '$HTRIGRULE3 $RULES) 
(MDEFPROP $HTRIGRULE3 $DEFRULE $RULETYPE) 
(ADD2LNC '$HTRIGRULE3 $PROPS) 
(MDEFPROP $HTRIGRULE3
    ((MEQUAL) ((%CSCH SIMP) $A) ((MEXPT SIMP) ((%SINH SIMP) $A) -1.))
    $RULE) 
(ADD2LNC '$HTRIGRULE3 $PROPS) 
(ADD2LNC '$HTRIGRULE4 $RULES) 
(MDEFPROP $HTRIGRULE4 $DEFRULE $RULETYPE) 
(ADD2LNC '$HTRIGRULE4 $PROPS) 
(MDEFPROP $HTRIGRULE4
    ((MEQUAL) ((%COTH SIMP) $A)
     ((MTIMES SIMP) ((%COSH SIMP) $A)
      ((MEXPT SIMP) ((%SINH SIMP) $A) -1.)))
    $RULE) 
(ADD2LNC '$HTRIGRULE4 $PROPS) 
(DEFPROP %TAN $TAN NOUN) 
(DEFPROP %TAN SIMP-%TAN OPERATORS) 
(DEFPROP %TAN ((X) ((MPLUS) 1. ((MEXPT) ((%TAN) X) 2.))) GRAD) 
(ADD2LNC '((%TAN) X) $GRADEFS) 
(DEFPROP $TAN %TAN VERB) 
(SETQ $LINENUM 121.) 
(SETQ *ALPHABET* (NCONC '(#\_ #\%) *ALPHABET*)) 